name: Automate build and deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: courtlistener
  EKS_NAMESPACE: court-listener

jobs:
  get-pr-labels:
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.find_pr.outputs.labels }}
    steps:
      - uses: actions/checkout@v3
      - name: Find merged PR by merge_commit_sha
        id: find_pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitSha = context.sha;
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed",
              sort: "updated",
              direction: "desc",
              per_page: 1
            });

            const pr = prs.find(p => p.merge_commit_sha === commitSha);
            if (!pr) {
              core.setOutput("labels", "");
              core.warning("No merged PR found for this commit.");
              return;
            }

            const labels = pr.labels.map(l => l.name);
            core.setOutput("labels", labels.join(","));
            console.log(`PR #${pr.number} labels: ${labels.join(", ")}`);

  build:
    needs: get-pr-labels
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.get-pr-labels.outputs.labels, 'skip-deploy') }}
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push
        run: |
          make push-image --file docker/django/Makefile -e VERSION=$(git rev-parse --short HEAD)

  setup-deploy:
    needs: [get-pr-labels, build]
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v4
      - name: Set shortcode
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Kubeconfig with AWS CLI
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Update Environment Variables
        env:
          CL_ENV: cl-env
        run: kubectl annotate es $CL_ENV force-sync=$(date +%s) --overwrite -n ${{ env.EKS_NAMESPACE }} && kubectl wait es -n ${{ env.EKS_NAMESPACE }} --for=jsonpath="{.status.conditions[?(@.reason=='SecretSynced')].status}"=True --timeout=30s $CL_ENV

      - name: Launch Temporary Pod
        id: tempPod
        run: |
          kubectl run temp-pod-${{ steps.vars.outputs.sha_short }} -n ${{ env.EKS_NAMESPACE }} --image=freelawproject/courtlistener:${{ steps.vars.outputs.sha_short }}-prod --restart Never --pod-running-timeout=120s --overrides='
          {
              "spec": {
              "containers": [{
                  "name": "temp-pod",
                  "image": "freelawproject/courtlistener:${{ steps.vars.outputs.sha_short }}-prod",
                  "command": ["/bin/sh", "-c", "trap : TERM INT; sleep 259200 & wait"],
                  "envFrom": [{
                  "secretRef": {
                      "name": "cl-env"
                  }
                  }]
              }]
              }
          }'
      - name: Wait for Temporary Pod to Start
        run: kubectl wait pods -n ${{ env.EKS_NAMESPACE }} --for condition=Ready --timeout=90s temp-pod-${{ steps.vars.outputs.sha_short }}
      - name: Collect Static Assets
        id: collectStatic
        run: |
          kubectl exec -n ${{ env.EKS_NAMESPACE }} temp-pod-${{ steps.vars.outputs.sha_short }} -- ./manage.py collectstatic --noinput
      - name: Handle Collectstatic Error
        if: failure()
        run: | # Error-handling logic for collectstatic
          echo "collectstatic failed--aborting build"
          exit 1

      - name: Check Migrations
        id: checkMigration
        run: |
          kubectl exec -n ${{ env.EKS_NAMESPACE }} temp-pod-${{ steps.vars.outputs.sha_short }} -- ./manage.py migrate --check
      - name: Handle Check Migrations Error
        if: failure()
        run: |
          echo "Found unapplied migrations. Open shell into pod temp-pod-${{ steps.vars.outputs.sha_short }}"
          echo "Manually run migrations. That pod will delete itself after an hour."
          exit 1
      - name: Delete Temporary Pod
        run: kubectl delete pod -n ${{ env.EKS_NAMESPACE }} temp-pod-${{ steps.vars.outputs.sha_short }}

  # Roll out the application code
  deploy-python:
    needs: [get-pr-labels, setup-deploy]
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.get-pr-labels.outputs.labels, 'skip-web-deploy') }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create Kubeconfig with AWS CLI
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Rollout cl-python
        run: kubectl set image -n ${{ env.EKS_NAMESPACE }} deployment/cl-python web=freelawproject/courtlistener:${{ needs.setup-deploy.outputs.sha_short }}-prod
      - name: Watch cl-python rollout status
        run: kubectl rollout status -n ${{ env.EKS_NAMESPACE }} deployment/cl-python

  deploy-celery:
    needs: [get-pr-labels, setup-deploy]
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.get-pr-labels.outputs.labels, 'skip-celery-deploy') }}
    strategy:
      matrix:
        deployment:
          - celery-default
          - celery-feeds
          - celery-batch0
          - celery-batch1
          - celery-batch2
          - celery-batch3
          - celery-etl
          - celery-iquery
          - celery-free-pacer-docs
          - celery-inception
          - celery-es-sweep
          - celery-recap-fetch
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create Kubeconfig with AWS CLI
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Rollout ${{ matrix.deployment }}
        run: kubectl set image -n ${{ env.EKS_NAMESPACE }} deployment/${{ matrix.deployment }} ${{ matrix.deployment }}=freelawproject/courtlistener:${{ needs.setup-deploy.outputs.sha_short }}-prod
      - name: Watch ${{ matrix.deployment }} rollout status
        run: kubectl rollout status -n ${{ env.EKS_NAMESPACE }} deployment/${{ matrix.deployment }}

  deploy-daemons:
    needs: [get-pr-labels, setup-deploy]
    if: ${{ !contains(needs.get-pr-labels.outputs.labels, 'skip-daemon-deploy') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deployment:
          - name: cl-scrape-rss
            image_label: scrape-rss
          - name: cl-retry-webhooks
            image_label: retry-webhooks
          - name: cl-send-rt-percolator-alerts
            image_label: cl-send-rt-percolator-alerts
          - name: cl-es-sweep-indexer
            image_label: sweep-indexer
          - name: cl-iquery-probe
            image_label: cl-iquery-probe
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create Kubeconfig with AWS CLI
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Rollout ${{ matrix.deployment.name }}
        run: kubectl set image -n ${{ env.EKS_NAMESPACE }} deployment/${{ matrix.deployment.name }} ${{ matrix.deployment.image_label }}=freelawproject/courtlistener:${{ needs.setup-deploy.outputs.sha_short }}-prod
      - name: Watch ${{ matrix.deployment.name }} rollout status
        run: kubectl rollout status -n ${{ env.EKS_NAMESPACE }} deployment/${{ matrix.deployment.name }}

  deploy-cronjobs:
    needs: [get-pr-labels, setup-deploy]
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.get-pr-labels.outputs.labels, 'skip-cronjob-deploy') }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Create Kubeconfig with AWS CLI
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Update cronjobs
        run: |
          CRONJOB_NAMES=$(kubectl get cronjobs -n ${{ env.EKS_NAMESPACE }} -o jsonpath='{.items.*.metadata.name}' -l image_type=web-prod);
          for name in $CRONJOB_NAMES; do
             kubectl set image -n ${{ env.EKS_NAMESPACE }} CronJob/$name job=freelawproject/courtlistener:${{ needs.setup-deploy.outputs.sha_short }}-prod;
          done;

  # Orchestration job to ensure all deployments complete
  complete-deploy:
    needs:
      [
        deploy-python,
        deploy-celery,
        deploy-daemons,
        deploy-cronjobs,
      ]
    runs-on: ubuntu-latest
    concurrency: production
    # Ensure this job runs even if the needs are skipped, to ensure only one deployment
    # runs at a time.
    if: always()
    steps:
      - name: Deployment Complete
        run: echo "All deployments and cronjob updates have finished."
