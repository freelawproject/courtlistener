# Generated by Django 3.1.14 on 2022-03-08 07:47
#
# Remove several indexes. All are from the docket table. Together they should
# account for about 50GB of space. Most are completely unused. A couple are
# needed for niche features or APIs that nobody cares about.
from django.db import migrations, models


class Migration(migrations.Migration):
    # Concurrent index removals can't be done in transactions, so normally we'd
    # include atomic=False, but RemoveIndexConcurrently doesn't work unless the
    # index is defined in the Meta.indexes parameter of the model.
    #
    # The commented-out code below is what we'd like to run (I carefully
    # created it by hand), but it crashes with variations of:
    #
    # Traceback (most recent call last):
    #   File "/opt/courtlistener/manage.py", line 15, in <module>
    #     main()
    #   File "/opt/courtlistener/manage.py", line 11, in main
    #     execute_from_command_line(sys.argv)
    #   File "/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py", line 401, in execute_from_command_line
    #     utility.execute()
    #   File "/usr/local/lib/python3.8/site-packages/django/core/management/__init__.py", line 395, in execute
    #     self.fetch_command(subcommand).run_from_argv(self.argv)
    #   File "/usr/local/lib/python3.8/site-packages/django/core/management/base.py", line 330, in run_from_argv
    #     self.execute(*args, **cmd_options)
    #   File "/usr/local/lib/python3.8/site-packages/django/core/management/commands/sqlmigrate.py", line 29, in execute
    #     return super().execute(*args, **options)
    #   File "/usr/local/lib/python3.8/site-packages/django/core/management/base.py", line 371, in execute
    #     output = self.handle(*args, **options)
    #   File "/usr/local/lib/python3.8/site-packages/django/core/management/commands/sqlmigrate.py", line 65, in handle
    #     sql_statements = loader.collect_sql(plan)
    #   File "/usr/local/lib/python3.8/site-packages/django/db/migrations/loader.py", line 345, in collect_sql
    #     state = migration.apply(state, schema_editor, collect_sql=True)
    #   File "/usr/local/lib/python3.8/site-packages/django/db/migrations/migration.py", line 124, in apply
    #     operation.database_forwards(self.app_label, schema_editor, old_state, project_state)
    #   File "/usr/local/lib/python3.8/site-packages/django/contrib/postgres/operations.py", line 139, in database_forwards
    #     index = from_model_state.get_index_by_name(self.name)
    #   File "/usr/local/lib/python3.8/site-packages/django/db/migrations/state.py", line 581, in get_index_by_name
    #     raise ValueError("No index named %s on model %s" % (name, self.name))
    # ValueError: No index named date_argued on model Docket
    #
    # So instead of running the migration like we'd like to, instead we land
    # the default migration into the code (which will work for devs and
    # whatnot, where performance doesn't matter), and we write a custom sql
    # migration for the servers. Then, on the server, we fake the migration so
    # the migration table is happy, and we run the sql migration by hand. Lame.
    #atomic = False

    dependencies = [
        ("search", "0005_add_opinion_parentheticals"),
    ]

    operations = [
        # RemoveIndexConcurrently(
        #     # Remove docket.date_argued (6.1GB)
        #     model_name="search.Docket",
        #     name="search_docket_220746bf",
        # ),
        # RemoveIndexConcurrently(
        #     # Remove docket.date_reargued (6.1GB)
        #     model_name="docket",
        #     name="search_docket_dc3f2df2",
        # ),
        # RemoveIndexConcurrently(
        #     # Remove docket.date_reargument_denied (6.1GB)
        #     model_name="docket",
        #     name="search_docket_657961a4",
        # ),
        # RemoveIndexConcurrently(
        #     # Remove docket.date_cert_denied (6.1GB)
        #     model_name="docket",
        #     name="search_docket_40a9d293",
        # ),
        # RemoveIndexConcurrently(
        #     # Remove docket.date_cert_granted (6.1GB)
        #     model_name="docket",
        #     name="search_docket_70bec8bd",
        # ),
        # RemoveIndexConcurrently(
        #     # Remove ia_date_first_changed (5.9GB)
        #     model_name="docket",
        #     name="search_docket_4f3b580f",
        # ),
        # RemoveIndexConcurrently(
        #     # Remove index_together on: (
        #     #   "ia_upload_failure_count",
        #     #   "ia_needs_upload",
        #     #   "ia_date_first_change",
        #     # )
        #     # Biggest index of all: 10GB
        #     model_name="docket",
        #     name="search_docket_ia_upload_failure_count_28fe663d91d7ffbb_idx",
        # ),
        migrations.AlterField(
            model_name="docket",
            name="date_argued",
            field=models.DateField(
                blank=True, help_text="the date the case was argued", null=True
            ),
        ),
        migrations.AlterField(
            model_name="docket",
            name="date_cert_denied",
            field=models.DateField(
                blank=True,
                help_text="the date cert was denied for this case, if applicable",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="docket",
            name="date_cert_granted",
            field=models.DateField(
                blank=True,
                help_text="date cert was granted for this case, if applicable",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="docket",
            name="date_reargued",
            field=models.DateField(
                blank=True,
                help_text="the date the case was reargued",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="docket",
            name="date_reargument_denied",
            field=models.DateField(
                blank=True,
                help_text="the date the reargument was denied",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="docket",
            name="ia_date_first_change",
            field=models.DateTimeField(
                blank=True,
                help_text="The moment when this item first changed and was marked as needing an upload. Used for determining when to upload an item.",
                null=True,
            ),
        )
    ]
