# Generated by Django 5.1.8 on 2025-10-16 19:12

import cl.lib.model_helpers
import cl.lib.storage
import django.db.models.deletion
import localflavor.us.models
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0006_delete_aggregateevent'),
        ('search', '0043_add_date_fields_citation_model'),
    ]

    operations = [
        migrations.CreateModel(
            name='StateDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('sha1', models.CharField(blank=True, help_text='The ID used for a document in RECAP', max_length=40)),
                ('page_count', models.IntegerField(blank=True, help_text='The number of pages in the document, if known', null=True)),
                ('file_size', models.IntegerField(blank=True, help_text='The size of the file in bytes, if known', null=True)),
                ('filepath_local', models.FileField(blank=True, help_text='The path is AWS S3 where the file is saved. Note that the field name is historical, from before when we used S3. To find the location in S3, concatenate https://storage.courtlistener.com/ and the value of this field.', max_length=1000, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_path)),
                ('filepath_ia', models.CharField(blank=True, help_text='The URL of the file in IA', max_length=1000)),
                ('ia_upload_failure_count', models.SmallIntegerField(blank=True, help_text='Number of times the upload to the Internet Archive failed.', null=True)),
                ('thumbnail', models.FileField(blank=True, help_text='The path to a thumbnail in S3 of the first page of the document.', null=True, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_thumb_path)),
                ('thumbnail_status', models.SmallIntegerField(choices=[(0, 'Thumbnail needed'), (1, 'Thumbnail completed successfully'), (2, 'Unable to generate thumbnail')], default=0, help_text='The status of the thumbnail generation')),
                ('plain_text', models.TextField(blank=True, help_text='Plain text of the document after extraction using pdftotext, wpd2txt, etc.')),
                ('ocr_status', models.SmallIntegerField(blank=True, choices=[(1, 'OCR Complete'), (2, 'OCR Not Necessary'), (3, 'OCR Failed'), (4, 'OCR Needed')], help_text='The status of OCR processing on this item.', null=True)),
                ('document_number', models.IntegerField(help_text='Document number assigned by the state')),
                ('document_name', models.CharField(blank=True, help_text='Assigned name of the document', max_length=100)),
                ('description', models.CharField(blank=True, help_text='Description of the document provided in the sub-header', max_length=100)),
                ('filed_by_str', models.CharField(blank=True, help_text='Person who filed the document as a string', max_length=100)),
                ('filed_status', models.CharField(blank=True, help_text='Status of the document filed (e.g., Processed)', max_length=100)),
                ('confirmation_notice_url', models.URLField(blank=True, help_text='URL to the confirmation notice of the document')),
                ('document_source_url', models.URLField(blank=True, help_text='URL for the online PDF of the document')),
                ('date_filed', models.DateTimeField(blank=True, help_text='The date the document was filed', null=True)),
                ('date_received', models.DateTimeField(blank=True, help_text='The date the file was received', null=True)),
            ],
            bases=(models.Model, cl.lib.model_helpers.CSVExportMixin),
        ),
        migrations.CreateModel(
            name='StateDocumentEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('sha1', models.CharField(blank=True, help_text='The ID used for a document in RECAP', max_length=40)),
                ('page_count', models.IntegerField(blank=True, help_text='The number of pages in the document, if known', null=True)),
                ('file_size', models.IntegerField(blank=True, help_text='The size of the file in bytes, if known', null=True)),
                ('filepath_local', models.FileField(blank=True, help_text='The path is AWS S3 where the file is saved. Note that the field name is historical, from before when we used S3. To find the location in S3, concatenate https://storage.courtlistener.com/ and the value of this field.', max_length=1000, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_path)),
                ('filepath_ia', models.CharField(blank=True, help_text='The URL of the file in IA', max_length=1000)),
                ('ia_upload_failure_count', models.SmallIntegerField(blank=True, help_text='Number of times the upload to the Internet Archive failed.', null=True)),
                ('thumbnail', models.FileField(blank=True, help_text='The path to a thumbnail in S3 of the first page of the document.', null=True, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_thumb_path)),
                ('thumbnail_status', models.SmallIntegerField(choices=[(0, 'Thumbnail needed'), (1, 'Thumbnail completed successfully'), (2, 'Unable to generate thumbnail')], default=0, help_text='The status of the thumbnail generation')),
                ('plain_text', models.TextField(blank=True, help_text='Plain text of the document after extraction using pdftotext, wpd2txt, etc.')),
                ('ocr_status', models.SmallIntegerField(blank=True, choices=[(1, 'OCR Complete'), (2, 'OCR Not Necessary'), (3, 'OCR Failed'), (4, 'OCR Needed')], help_text='The status of OCR processing on this item.', null=True)),
                ('document_number', models.IntegerField(help_text='Document number assigned by the state')),
                ('document_name', models.CharField(blank=True, help_text='Assigned name of the document', max_length=100)),
                ('description', models.CharField(blank=True, help_text='Description of the document provided in the sub-header', max_length=100)),
                ('filed_by_str', models.CharField(blank=True, help_text='Person who filed the document as a string', max_length=100)),
                ('filed_status', models.CharField(blank=True, help_text='Status of the document filed (e.g., Processed)', max_length=100)),
                ('confirmation_notice_url', models.URLField(blank=True, help_text='URL to the confirmation notice of the document')),
                ('document_source_url', models.URLField(blank=True, help_text='URL for the online PDF of the document')),
                ('date_filed', models.DateTimeField(blank=True, help_text='The date the document was filed', null=True)),
                ('date_received', models.DateTimeField(blank=True, help_text='The date the file was received', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='court',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='court',
            name='delete_delete',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='docket',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='docket',
            name='delete_delete',
        ),
        migrations.AddField(
            model_name='court',
            name='state',
            field=localflavor.us.models.USPostalCodeField(blank=True, help_text='The two-letter USPS postal abbreviation for the state the court is in', max_length=2),
        ),
        migrations.AddField(
            model_name='courtevent',
            name='state',
            field=localflavor.us.models.USPostalCodeField(blank=True, help_text='The two-letter USPS postal abbreviation for the state the court is in', max_length=2),
        ),
        migrations.AddField(
            model_name='docket',
            name='case_source_url',
            field=models.URLField(blank=True, help_text='URL for the source page of the case details', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='docket',
            name='case_status',
            field=models.CharField(blank=True, help_text='The status of the case (e.g. Active, Disposed)', max_length=100),
        ),
        migrations.AddField(
            model_name='docket',
            name='efile_status',
            field=models.CharField(blank=True, help_text='How complete is the efile account for the case', max_length=100),
        ),
        migrations.AddField(
            model_name='docketevent',
            name='case_source_url',
            field=models.URLField(blank=True, help_text='URL for the source page of the case details', max_length=500, null=True),
        ),
        migrations.AddField(
            model_name='docketevent',
            name='case_status',
            field=models.CharField(blank=True, help_text='The status of the case (e.g. Active, Disposed)', max_length=100),
        ),
        migrations.AddField(
            model_name='docketevent',
            name='efile_status',
            field=models.CharField(blank=True, help_text='How complete is the efile account for the case', max_length=100),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='court',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."citation_string" IS DISTINCT FROM (NEW."citation_string") OR OLD."date_last_pacer_contact" IS DISTINCT FROM (NEW."date_last_pacer_contact") OR OLD."end_date" IS DISTINCT FROM (NEW."end_date") OR OLD."fjc_court_id" IS DISTINCT FROM (NEW."fjc_court_id") OR OLD."full_name" IS DISTINCT FROM (NEW."full_name") OR OLD."has_opinion_scraper" IS DISTINCT FROM (NEW."has_opinion_scraper") OR OLD."has_oral_argument_scraper" IS DISTINCT FROM (NEW."has_oral_argument_scraper") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."in_use" IS DISTINCT FROM (NEW."in_use") OR OLD."jurisdiction" IS DISTINCT FROM (NEW."jurisdiction") OR OLD."notes" IS DISTINCT FROM (NEW."notes") OR OLD."pacer_court_id" IS DISTINCT FROM (NEW."pacer_court_id") OR OLD."pacer_has_rss_feed" IS DISTINCT FROM (NEW."pacer_has_rss_feed") OR OLD."pacer_rss_entry_types" IS DISTINCT FROM (NEW."pacer_rss_entry_types") OR OLD."parent_court_id" IS DISTINCT FROM (NEW."parent_court_id") OR OLD."position" IS DISTINCT FROM (NEW."position") OR OLD."short_name" IS DISTINCT FROM (NEW."short_name") OR OLD."start_date" IS DISTINCT FROM (NEW."start_date") OR OLD."state" IS DISTINCT FROM (NEW."state") OR OLD."url" IS DISTINCT FROM (NEW."url"))', func='INSERT INTO "search_courtevent" ("citation_string", "date_last_pacer_contact", "date_modified", "end_date", "fjc_court_id", "full_name", "has_opinion_scraper", "has_oral_argument_scraper", "id", "in_use", "jurisdiction", "notes", "pacer_court_id", "pacer_has_rss_feed", "pacer_rss_entry_types", "parent_court_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "short_name", "start_date", "state", "url") VALUES (OLD."citation_string", OLD."date_last_pacer_contact", OLD."date_modified", OLD."end_date", OLD."fjc_court_id", OLD."full_name", OLD."has_opinion_scraper", OLD."has_oral_argument_scraper", OLD."id", OLD."in_use", OLD."jurisdiction", OLD."notes", OLD."pacer_court_id", OLD."pacer_has_rss_feed", OLD."pacer_rss_entry_types", OLD."parent_court_id", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."position", OLD."short_name", OLD."start_date", OLD."state", OLD."url"); RETURN NULL;', hash='042383c582c6eccb3a677dbfd337d5a081bf4f37', operation='UPDATE', pgid='pgtrigger_update_update_14e3e', table='search_court', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='court',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_courtevent" ("citation_string", "date_last_pacer_contact", "date_modified", "end_date", "fjc_court_id", "full_name", "has_opinion_scraper", "has_oral_argument_scraper", "id", "in_use", "jurisdiction", "notes", "pacer_court_id", "pacer_has_rss_feed", "pacer_rss_entry_types", "parent_court_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "short_name", "start_date", "state", "url") VALUES (OLD."citation_string", OLD."date_last_pacer_contact", OLD."date_modified", OLD."end_date", OLD."fjc_court_id", OLD."full_name", OLD."has_opinion_scraper", OLD."has_oral_argument_scraper", OLD."id", OLD."in_use", OLD."jurisdiction", OLD."notes", OLD."pacer_court_id", OLD."pacer_has_rss_feed", OLD."pacer_rss_entry_types", OLD."parent_court_id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."position", OLD."short_name", OLD."start_date", OLD."state", OLD."url"); RETURN NULL;', hash='f2fc7ebf95d26ffc6b8e3537172c4a78af1149d8', operation='DELETE', pgid='pgtrigger_delete_delete_cf358', table='search_court', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='docket',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."appeal_from_id" IS DISTINCT FROM (NEW."appeal_from_id") OR OLD."appeal_from_str" IS DISTINCT FROM (NEW."appeal_from_str") OR OLD."appellate_case_type_information" IS DISTINCT FROM (NEW."appellate_case_type_information") OR OLD."appellate_fee_status" IS DISTINCT FROM (NEW."appellate_fee_status") OR OLD."assigned_to_id" IS DISTINCT FROM (NEW."assigned_to_id") OR OLD."assigned_to_str" IS DISTINCT FROM (NEW."assigned_to_str") OR OLD."blocked" IS DISTINCT FROM (NEW."blocked") OR OLD."case_name" IS DISTINCT FROM (NEW."case_name") OR OLD."case_name_full" IS DISTINCT FROM (NEW."case_name_full") OR OLD."case_name_short" IS DISTINCT FROM (NEW."case_name_short") OR OLD."case_source_url" IS DISTINCT FROM (NEW."case_source_url") OR OLD."case_status" IS DISTINCT FROM (NEW."case_status") OR OLD."cause" IS DISTINCT FROM (NEW."cause") OR OLD."court_id" IS DISTINCT FROM (NEW."court_id") OR OLD."date_argued" IS DISTINCT FROM (NEW."date_argued") OR OLD."date_blocked" IS DISTINCT FROM (NEW."date_blocked") OR OLD."date_cert_denied" IS DISTINCT FROM (NEW."date_cert_denied") OR OLD."date_cert_granted" IS DISTINCT FROM (NEW."date_cert_granted") OR OLD."date_filed" IS DISTINCT FROM (NEW."date_filed") OR OLD."date_last_filing" IS DISTINCT FROM (NEW."date_last_filing") OR OLD."date_last_index" IS DISTINCT FROM (NEW."date_last_index") OR OLD."date_reargued" IS DISTINCT FROM (NEW."date_reargued") OR OLD."date_reargument_denied" IS DISTINCT FROM (NEW."date_reargument_denied") OR OLD."date_terminated" IS DISTINCT FROM (NEW."date_terminated") OR OLD."docket_number" IS DISTINCT FROM (NEW."docket_number") OR OLD."docket_number_core" IS DISTINCT FROM (NEW."docket_number_core") OR OLD."docket_number_raw" IS DISTINCT FROM (NEW."docket_number_raw") OR OLD."efile_status" IS DISTINCT FROM (NEW."efile_status") OR OLD."federal_defendant_number" IS DISTINCT FROM (NEW."federal_defendant_number") OR OLD."federal_dn_case_type" IS DISTINCT FROM (NEW."federal_dn_case_type") OR OLD."federal_dn_judge_initials_assigned" IS DISTINCT FROM (NEW."federal_dn_judge_initials_assigned") OR OLD."federal_dn_judge_initials_referred" IS DISTINCT FROM (NEW."federal_dn_judge_initials_referred") OR OLD."federal_dn_office_code" IS DISTINCT FROM (NEW."federal_dn_office_code") OR OLD."filepath_ia" IS DISTINCT FROM (NEW."filepath_ia") OR OLD."filepath_ia_json" IS DISTINCT FROM (NEW."filepath_ia_json") OR OLD."filepath_local" IS DISTINCT FROM (NEW."filepath_local") OR OLD."ia_date_first_change" IS DISTINCT FROM (NEW."ia_date_first_change") OR OLD."ia_needs_upload" IS DISTINCT FROM (NEW."ia_needs_upload") OR OLD."ia_upload_failure_count" IS DISTINCT FROM (NEW."ia_upload_failure_count") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."idb_data_id" IS DISTINCT FROM (NEW."idb_data_id") OR OLD."jurisdiction_type" IS DISTINCT FROM (NEW."jurisdiction_type") OR OLD."jury_demand" IS DISTINCT FROM (NEW."jury_demand") OR OLD."mdl_status" IS DISTINCT FROM (NEW."mdl_status") OR OLD."nature_of_suit" IS DISTINCT FROM (NEW."nature_of_suit") OR OLD."originating_court_information_id" IS DISTINCT FROM (NEW."originating_court_information_id") OR OLD."pacer_case_id" IS DISTINCT FROM (NEW."pacer_case_id") OR OLD."panel_str" IS DISTINCT FROM (NEW."panel_str") OR OLD."parent_docket_id" IS DISTINCT FROM (NEW."parent_docket_id") OR OLD."referred_to_id" IS DISTINCT FROM (NEW."referred_to_id") OR OLD."referred_to_str" IS DISTINCT FROM (NEW."referred_to_str") OR OLD."slug" IS DISTINCT FROM (NEW."slug") OR OLD."source" IS DISTINCT FROM (NEW."source"))', func='INSERT INTO "search_docketevent" ("appeal_from_id", "appeal_from_str", "appellate_case_type_information", "appellate_fee_status", "assigned_to_id", "assigned_to_str", "blocked", "case_name", "case_name_full", "case_name_short", "case_source_url", "case_status", "cause", "court_id", "date_argued", "date_blocked", "date_cert_denied", "date_cert_granted", "date_created", "date_filed", "date_last_filing", "date_last_index", "date_modified", "date_reargued", "date_reargument_denied", "date_terminated", "docket_number", "docket_number_core", "docket_number_raw", "efile_status", "federal_defendant_number", "federal_dn_case_type", "federal_dn_judge_initials_assigned", "federal_dn_judge_initials_referred", "federal_dn_office_code", "filepath_ia", "filepath_ia_json", "filepath_local", "ia_date_first_change", "ia_needs_upload", "ia_upload_failure_count", "id", "idb_data_id", "jurisdiction_type", "jury_demand", "mdl_status", "nature_of_suit", "originating_court_information_id", "pacer_case_id", "panel_str", "parent_docket_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "referred_to_id", "referred_to_str", "slug", "source") VALUES (OLD."appeal_from_id", OLD."appeal_from_str", OLD."appellate_case_type_information", OLD."appellate_fee_status", OLD."assigned_to_id", OLD."assigned_to_str", OLD."blocked", OLD."case_name", OLD."case_name_full", OLD."case_name_short", OLD."case_source_url", OLD."case_status", OLD."cause", OLD."court_id", OLD."date_argued", OLD."date_blocked", OLD."date_cert_denied", OLD."date_cert_granted", OLD."date_created", OLD."date_filed", OLD."date_last_filing", OLD."date_last_index", OLD."date_modified", OLD."date_reargued", OLD."date_reargument_denied", OLD."date_terminated", OLD."docket_number", OLD."docket_number_core", OLD."docket_number_raw", OLD."efile_status", OLD."federal_defendant_number", OLD."federal_dn_case_type", OLD."federal_dn_judge_initials_assigned", OLD."federal_dn_judge_initials_referred", OLD."federal_dn_office_code", OLD."filepath_ia", OLD."filepath_ia_json", OLD."filepath_local", OLD."ia_date_first_change", OLD."ia_needs_upload", OLD."ia_upload_failure_count", OLD."id", OLD."idb_data_id", OLD."jurisdiction_type", OLD."jury_demand", OLD."mdl_status", OLD."nature_of_suit", OLD."originating_court_information_id", OLD."pacer_case_id", OLD."panel_str", OLD."parent_docket_id", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."referred_to_id", OLD."referred_to_str", OLD."slug", OLD."source"); RETURN NULL;', hash='261a617ee6d0aa4dc640b2c6e437598bf6e4a775', operation='UPDATE', pgid='pgtrigger_update_update_068f7', table='search_docket', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='docket',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_docketevent" ("appeal_from_id", "appeal_from_str", "appellate_case_type_information", "appellate_fee_status", "assigned_to_id", "assigned_to_str", "blocked", "case_name", "case_name_full", "case_name_short", "case_source_url", "case_status", "cause", "court_id", "date_argued", "date_blocked", "date_cert_denied", "date_cert_granted", "date_created", "date_filed", "date_last_filing", "date_last_index", "date_modified", "date_reargued", "date_reargument_denied", "date_terminated", "docket_number", "docket_number_core", "docket_number_raw", "efile_status", "federal_defendant_number", "federal_dn_case_type", "federal_dn_judge_initials_assigned", "federal_dn_judge_initials_referred", "federal_dn_office_code", "filepath_ia", "filepath_ia_json", "filepath_local", "ia_date_first_change", "ia_needs_upload", "ia_upload_failure_count", "id", "idb_data_id", "jurisdiction_type", "jury_demand", "mdl_status", "nature_of_suit", "originating_court_information_id", "pacer_case_id", "panel_str", "parent_docket_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "referred_to_id", "referred_to_str", "slug", "source") VALUES (OLD."appeal_from_id", OLD."appeal_from_str", OLD."appellate_case_type_information", OLD."appellate_fee_status", OLD."assigned_to_id", OLD."assigned_to_str", OLD."blocked", OLD."case_name", OLD."case_name_full", OLD."case_name_short", OLD."case_source_url", OLD."case_status", OLD."cause", OLD."court_id", OLD."date_argued", OLD."date_blocked", OLD."date_cert_denied", OLD."date_cert_granted", OLD."date_created", OLD."date_filed", OLD."date_last_filing", OLD."date_last_index", OLD."date_modified", OLD."date_reargued", OLD."date_reargument_denied", OLD."date_terminated", OLD."docket_number", OLD."docket_number_core", OLD."docket_number_raw", OLD."efile_status", OLD."federal_defendant_number", OLD."federal_dn_case_type", OLD."federal_dn_judge_initials_assigned", OLD."federal_dn_judge_initials_referred", OLD."federal_dn_office_code", OLD."filepath_ia", OLD."filepath_ia_json", OLD."filepath_local", OLD."ia_date_first_change", OLD."ia_needs_upload", OLD."ia_upload_failure_count", OLD."id", OLD."idb_data_id", OLD."jurisdiction_type", OLD."jury_demand", OLD."mdl_status", OLD."nature_of_suit", OLD."originating_court_information_id", OLD."pacer_case_id", OLD."panel_str", OLD."parent_docket_id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."referred_to_id", OLD."referred_to_str", OLD."slug", OLD."source"); RETURN NULL;', hash='57408639cf9d9c446840f20fe11e9704ce08ea24', operation='DELETE', pgid='pgtrigger_delete_delete_7303c', table='search_docket', when='AFTER')),
        ),
        migrations.AddField(
            model_name='statedocument',
            name='docket',
            field=models.ForeignKey(help_text='Foreign key to the Docket this document belongs to. Multiple documents can belong to a docket.', on_delete=django.db.models.deletion.CASCADE, related_name='state_documents', to='search.docket'),
        ),
        migrations.AddField(
            model_name='statedocument',
            name='filed_by',
            field=models.ForeignKey(blank=True, help_text='The person who filed the document in the system', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='filed_by', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='statedocument',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='The tags associated with the document.', related_name='state_documents', to='search.tag'),
        ),
        migrations.AddField(
            model_name='statedocumentevent',
            name='docket',
            field=models.ForeignKey(db_constraint=False, help_text='Foreign key to the Docket this document belongs to. Multiple documents can belong to a docket.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.docket'),
        ),
        migrations.AddField(
            model_name='statedocumentevent',
            name='filed_by',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The person who filed the document in the system', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='statedocumentevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='statedocumentevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='search.statedocument'),
        ),
        migrations.AlterUniqueTogether(
            name='statedocument',
            unique_together={('docket', 'document_number')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='statedocument',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."confirmation_notice_url" IS DISTINCT FROM (NEW."confirmation_notice_url") OR OLD."date_filed" IS DISTINCT FROM (NEW."date_filed") OR OLD."date_received" IS DISTINCT FROM (NEW."date_received") OR OLD."description" IS DISTINCT FROM (NEW."description") OR OLD."docket_id" IS DISTINCT FROM (NEW."docket_id") OR OLD."document_name" IS DISTINCT FROM (NEW."document_name") OR OLD."document_number" IS DISTINCT FROM (NEW."document_number") OR OLD."document_source_url" IS DISTINCT FROM (NEW."document_source_url") OR OLD."file_size" IS DISTINCT FROM (NEW."file_size") OR OLD."filed_by_id" IS DISTINCT FROM (NEW."filed_by_id") OR OLD."filed_by_str" IS DISTINCT FROM (NEW."filed_by_str") OR OLD."filed_status" IS DISTINCT FROM (NEW."filed_status") OR OLD."filepath_ia" IS DISTINCT FROM (NEW."filepath_ia") OR OLD."filepath_local" IS DISTINCT FROM (NEW."filepath_local") OR OLD."ia_upload_failure_count" IS DISTINCT FROM (NEW."ia_upload_failure_count") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."ocr_status" IS DISTINCT FROM (NEW."ocr_status") OR OLD."page_count" IS DISTINCT FROM (NEW."page_count") OR OLD."plain_text" IS DISTINCT FROM (NEW."plain_text") OR OLD."sha1" IS DISTINCT FROM (NEW."sha1") OR OLD."thumbnail" IS DISTINCT FROM (NEW."thumbnail") OR OLD."thumbnail_status" IS DISTINCT FROM (NEW."thumbnail_status"))', func='INSERT INTO "search_statedocumentevent" ("confirmation_notice_url", "date_created", "date_filed", "date_modified", "date_received", "description", "docket_id", "document_name", "document_number", "document_source_url", "file_size", "filed_by_id", "filed_by_str", "filed_status", "filepath_ia", "filepath_local", "ia_upload_failure_count", "id", "ocr_status", "page_count", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plain_text", "sha1", "thumbnail", "thumbnail_status") VALUES (OLD."confirmation_notice_url", OLD."date_created", OLD."date_filed", OLD."date_modified", OLD."date_received", OLD."description", OLD."docket_id", OLD."document_name", OLD."document_number", OLD."document_source_url", OLD."file_size", OLD."filed_by_id", OLD."filed_by_str", OLD."filed_status", OLD."filepath_ia", OLD."filepath_local", OLD."ia_upload_failure_count", OLD."id", OLD."ocr_status", OLD."page_count", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."plain_text", OLD."sha1", OLD."thumbnail", OLD."thumbnail_status"); RETURN NULL;', hash='1406bb916bdfc631e02f596c91f195a40aab148c', operation='UPDATE', pgid='pgtrigger_update_update_7a5a2', table='search_statedocument', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='statedocument',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_statedocumentevent" ("confirmation_notice_url", "date_created", "date_filed", "date_modified", "date_received", "description", "docket_id", "document_name", "document_number", "document_source_url", "file_size", "filed_by_id", "filed_by_str", "filed_status", "filepath_ia", "filepath_local", "ia_upload_failure_count", "id", "ocr_status", "page_count", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plain_text", "sha1", "thumbnail", "thumbnail_status") VALUES (OLD."confirmation_notice_url", OLD."date_created", OLD."date_filed", OLD."date_modified", OLD."date_received", OLD."description", OLD."docket_id", OLD."document_name", OLD."document_number", OLD."document_source_url", OLD."file_size", OLD."filed_by_id", OLD."filed_by_str", OLD."filed_status", OLD."filepath_ia", OLD."filepath_local", OLD."ia_upload_failure_count", OLD."id", OLD."ocr_status", OLD."page_count", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."plain_text", OLD."sha1", OLD."thumbnail", OLD."thumbnail_status"); RETURN NULL;', hash='28f2246d22fb93258823771d6658c07d911642e8', operation='DELETE', pgid='pgtrigger_delete_delete_003e0', table='search_statedocument', when='AFTER')),
        ),
    ]
