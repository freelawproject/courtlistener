# Generated by Django 3.1.7 on 2021-05-22 00:26

from django.db import migrations, models

import cl.lib.model_helpers
import cl.lib.storage


class Migration(migrations.Migration):

    dependencies = [
        ('search', '0100_add_court_and_pk_index_to_docket'),
    ]

    operations = [
        migrations.AlterField(
            model_name='claimhistory',
            name='filepath_local',
            field=models.FileField(blank=True, help_text='The path is AWS S3 where the file is saved. Note that the field name is historical, from before when we used S3. To find the location in S3, concatenate https://storage.courtlistener.com/ and the value of this field.', max_length=1000, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_path),
        ),
        migrations.AlterField(
            model_name='claimhistory',
            name='is_sealed',
            field=models.BooleanField(help_text='Is this item sealed or otherwise unavailable on PACER?', null=True),
        ),
        migrations.AlterField(
            model_name='docket',
            name='blocked',
            field=models.BooleanField(default=False, help_text='Whether a document should be blocked from indexing by search engines'),
        ),
        migrations.AlterField(
            model_name='docket',
            name='ia_needs_upload',
            field=models.BooleanField(blank=True, help_text="Does this item need to be uploaded to the Internet Archive? I.e., has it changed? This field is important because it keeps track of the status of all the related objects to the docket. For example, if a related docket entry changes, we need to upload the item to IA, but we can't easily check that.", null=True),
        ),
        migrations.AlterField(
            model_name='docketentry',
            name='pacer_sequence_number',
            field=models.IntegerField(blank=True, help_text='The de_seqno value pulled out of dockets, RSS feeds, and sundry other pages in PACER. The place to find this is currently in the onclick attribute of the links in PACER. Because we do not have this value for all items in the DB, we do not use this value for anything. Still, we collect it for good measure.', null=True),
        ),
        migrations.AlterField(
            model_name='docketentry',
            name='recap_sequence_number',
            field=models.CharField(blank=True, help_text='A field used for ordering the docket entries on a docket. You might wonder, "Why not use the docket entry numbers?" That\'s a reasonable question, and prior to late 2018, this was the method we used. However, dockets often have "unnumbered" docket entries, and so knowing where to put those was only possible if you had another sequencing field, since they lacked an entry number. This field is populated by a combination of the date for the entry and a sequence number indicating the order that the unnumbered entries occur.', max_length=50),
        ),
        migrations.AlterField(
            model_name='recapdocument',
            name='document_type',
            field=models.IntegerField(choices=[(1, 'PACER Document'), (2, 'Attachment')], help_text='Whether this is a regular document or an attachment.'),
        ),
        migrations.AlterField(
            model_name='recapdocument',
            name='filepath_local',
            field=models.FileField(blank=True, help_text='The path is AWS S3 where the file is saved. Note that the field name is historical, from before when we used S3. To find the location in S3, concatenate https://storage.courtlistener.com/ and the value of this field.', max_length=1000, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_path),
        ),
        migrations.AlterField(
            model_name='recapdocument',
            name='is_sealed',
            field=models.BooleanField(help_text='Is this item sealed or otherwise unavailable on PACER?', null=True),
        ),
        migrations.AddIndex(
            model_name='recapdocument',
            index=models.Index(fields=['filepath_local'], name='search_recapdocument_filepath_local_7dc6b0e53ccf753_uniq'),
        ),
    ]
