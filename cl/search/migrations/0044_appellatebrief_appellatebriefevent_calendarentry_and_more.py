# Generated by Django 5.1.8 on 2025-10-16 18:52

import cl.lib.model_helpers
import cl.lib.storage
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('people_db', '0020_alter_person_religion_alter_personevent_religion_and_more'),
        ('pghistory', '0006_delete_aggregateevent'),
        ('search', '0043_add_date_fields_citation_model'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppellateBrief',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('sha1', models.CharField(blank=True, help_text='The ID used for a document in RECAP', max_length=40)),
                ('page_count', models.IntegerField(blank=True, help_text='The number of pages in the document, if known', null=True)),
                ('file_size', models.IntegerField(blank=True, help_text='The size of the file in bytes, if known', null=True)),
                ('filepath_local', models.FileField(blank=True, help_text='The path is AWS S3 where the file is saved. Note that the field name is historical, from before when we used S3. To find the location in S3, concatenate https://storage.courtlistener.com/ and the value of this field.', max_length=1000, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_path)),
                ('filepath_ia', models.CharField(blank=True, help_text='The URL of the file in IA', max_length=1000)),
                ('ia_upload_failure_count', models.SmallIntegerField(blank=True, help_text='Number of times the upload to the Internet Archive failed.', null=True)),
                ('thumbnail', models.FileField(blank=True, help_text='The path to a thumbnail in S3 of the first page of the document.', null=True, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_thumb_path)),
                ('thumbnail_status', models.SmallIntegerField(choices=[(0, 'Thumbnail needed'), (1, 'Thumbnail completed successfully'), (2, 'Unable to generate thumbnail')], default=0, help_text='The status of the thumbnail generation')),
                ('plain_text', models.TextField(blank=True, help_text='Plain text of the document after extraction using pdftotext, wpd2txt, etc.')),
                ('ocr_status', models.SmallIntegerField(blank=True, choices=[(1, 'OCR Complete'), (2, 'OCR Not Necessary'), (3, 'OCR Failed'), (4, 'OCR Needed')], help_text='The status of OCR processing on this item.', null=True)),
                ('source_url', models.CharField(blank=True, help_text='The URL this PDF was stored at before import, if known and public', max_length=1000, null=True)),
                ('brief_source', models.IntegerField(choices=[(1, 'appellant'), (2, 'appellee')], help_text='The source of appellate brief')),
                ('brief_type', models.IntegerField(choices=[(101, 'Reply Brief'), (102, 'Brief'), (103, 'Notice')], help_text='The type of appellate brief')),
                ('date_filed', models.DateField(db_index=True, help_text='The filing date for the brief')),
                ('description', models.CharField(blank=True, help_text='Description of the brief (or missing brief)', max_length=100)),
            ],
            options={
                'ordering': ['-date_filed'],
            },
        ),
        migrations.CreateModel(
            name='AppellateBriefEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('sha1', models.CharField(blank=True, help_text='The ID used for a document in RECAP', max_length=40)),
                ('page_count', models.IntegerField(blank=True, help_text='The number of pages in the document, if known', null=True)),
                ('file_size', models.IntegerField(blank=True, help_text='The size of the file in bytes, if known', null=True)),
                ('filepath_local', models.FileField(blank=True, help_text='The path is AWS S3 where the file is saved. Note that the field name is historical, from before when we used S3. To find the location in S3, concatenate https://storage.courtlistener.com/ and the value of this field.', max_length=1000, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_path)),
                ('filepath_ia', models.CharField(blank=True, help_text='The URL of the file in IA', max_length=1000)),
                ('ia_upload_failure_count', models.SmallIntegerField(blank=True, help_text='Number of times the upload to the Internet Archive failed.', null=True)),
                ('thumbnail', models.FileField(blank=True, help_text='The path to a thumbnail in S3 of the first page of the document.', null=True, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_pdf_thumb_path)),
                ('thumbnail_status', models.SmallIntegerField(choices=[(0, 'Thumbnail needed'), (1, 'Thumbnail completed successfully'), (2, 'Unable to generate thumbnail')], default=0, help_text='The status of the thumbnail generation')),
                ('plain_text', models.TextField(blank=True, help_text='Plain text of the document after extraction using pdftotext, wpd2txt, etc.')),
                ('ocr_status', models.SmallIntegerField(blank=True, choices=[(1, 'OCR Complete'), (2, 'OCR Not Necessary'), (3, 'OCR Failed'), (4, 'OCR Needed')], help_text='The status of OCR processing on this item.', null=True)),
                ('source_url', models.CharField(blank=True, help_text='The URL this PDF was stored at before import, if known and public', max_length=1000, null=True)),
                ('brief_source', models.IntegerField(choices=[(1, 'appellant'), (2, 'appellee')], help_text='The source of appellate brief')),
                ('brief_type', models.IntegerField(choices=[(101, 'Reply Brief'), (102, 'Brief'), (103, 'Notice')], help_text='The type of appellate brief')),
                ('date_filed', models.DateField(help_text='The filing date for the brief')),
                ('description', models.CharField(blank=True, help_text='Description of the brief (or missing brief)', max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CalendarEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('entry_type', models.CharField(help_text='The type of calendar entry', max_length=100)),
                ('entry_date', models.DateField(help_text='The date of the calendar entry')),
                ('reason_set', models.CharField(help_text='The reason set for the calendar entry', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Calendar Entries',
                'ordering': ['entry_date'],
            },
        ),
        migrations.CreateModel(
            name='CalendarEntryEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('entry_type', models.CharField(help_text='The type of calendar entry', max_length=100)),
                ('entry_date', models.DateField(help_text='The date of the calendar entry')),
                ('reason_set', models.CharField(help_text='The reason set for the calendar entry', max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='claimhistory',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='claimhistory',
            name='delete_delete',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='docket',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='docket',
            name='delete_delete',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='originatingcourtinformation',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='originatingcourtinformation',
            name='delete_delete',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='recapdocument',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='recapdocument',
            name='delete_delete',
        ),
        migrations.AddField(
            model_name='claimhistory',
            name='source_url',
            field=models.CharField(blank=True, help_text='The URL this PDF was stored at before import, if known and public', max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='claimhistoryevent',
            name='source_url',
            field=models.CharField(blank=True, help_text='The URL this PDF was stored at before import, if known and public', max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='docket',
            name='is_original_proceeding',
            field=models.BooleanField(default=None, help_text='Whether this is an original proceeding rather than an appeal, if known', null=True),
        ),
        migrations.AddField(
            model_name='docket',
            name='transfer_date',
            field=models.DateField(blank=True, db_index=True, help_text='The date the case was transfered to another court if applicable', null=True),
        ),
        migrations.AddField(
            model_name='docket',
            name='transfer_to',
            field=models.ForeignKey(blank=True, help_text='This case was granted a motion to transfer venue, and was assigned a new docket in another court.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfer_from', to='search.docket'),
        ),
        migrations.AddField(
            model_name='docketevent',
            name='is_original_proceeding',
            field=models.BooleanField(default=None, help_text='Whether this is an original proceeding rather than an appeal, if known', null=True),
        ),
        migrations.AddField(
            model_name='docketevent',
            name='transfer_date',
            field=models.DateField(blank=True, help_text='The date the case was transfered to another court if applicable', null=True),
        ),
        migrations.AddField(
            model_name='docketevent',
            name='transfer_to',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='This case was granted a motion to transfer venue, and was assigned a new docket in another court.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.docket'),
        ),
        migrations.AddField(
            model_name='originatingcourtinformation',
            name='county',
            field=models.CharField(blank=True, help_text='The name of the county of the originating court, if available', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='originatingcourtinformation',
            name='sentence',
            field=models.TextField(blank=True, help_text='The punishment or sentence determined by the originating court', null=True),
        ),
        migrations.AddField(
            model_name='originatingcourtinformationevent',
            name='county',
            field=models.CharField(blank=True, help_text='The name of the county of the originating court, if available', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='originatingcourtinformationevent',
            name='sentence',
            field=models.TextField(blank=True, help_text='The punishment or sentence determined by the originating court', null=True),
        ),
        migrations.AddField(
            model_name='recapdocument',
            name='source_url',
            field=models.CharField(blank=True, help_text='The URL this PDF was stored at before import, if known and public', max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='recapdocumentevent',
            name='source_url',
            field=models.CharField(blank=True, help_text='The URL this PDF was stored at before import, if known and public', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='opinioncluster',
            name='source',
            field=models.CharField(blank=True, choices=[('C', 'court website'), ('R', 'public.resource.org'), ('CR', 'court website merged with resource.org'), ('L', 'lawbox'), ('LC', 'lawbox merged with court'), ('LR', 'lawbox merged with resource.org'), ('LCR', 'lawbox merged with court and resource.org'), ('M', 'manual input'), ('A', 'internet archive'), ('H', 'brad heath archive'), ('Z', 'columbia archive'), ('ZA', 'columbia merged with internet archive'), ('ZD', 'columbia merged with direct court input'), ('ZC', 'columbia merged with court'), ('ZH', 'columbia merged with brad heath archive'), ('ZLC', 'columbia merged with lawbox and court'), ('ZLR', 'columbia merged with lawbox and resource.org'), ('ZLCR', 'columbia merged with lawbox, court, and resource.org'), ('ZR', 'columbia merged with resource.org'), ('ZCR', 'columbia merged with court and resource.org'), ('ZL', 'columbia merged with lawbox'), ('ZM', 'columbia merged with manual input'), ('ZQ', 'columbia merged with 2020 anonymous database'), ('U', 'Harvard, Library Innovation Lab Case Law Access Project'), ('CU', 'court website merged with Harvard'), ('D', 'direct court input'), ('Q', '2020 anonymous database'), ('QU', '2020 anonymous database merged with Harvard'), ('CU', 'court website merged with Harvard'), ('CRU', 'court website merged with public.resource.org and Harvard'), ('DU', 'direct court input merged with Harvard'), ('LU', 'lawbox merged with Harvard'), ('LCU', 'Lawbox merged with court website and Harvard'), ('LRU', 'Lawbox merged with public.resource.org and with Harvard'), ('MU', 'Manual input merged with Harvard'), ('RU', 'public.resource.org merged with Harvard'), ('ZU', 'columbia archive merged with Harvard'), ('ZLU', 'columbia archive merged with Lawbox and Harvard'), ('ZDU', 'columbia archive merged with direct court input and Harvard'), ('ZLRU', 'columbia archive merged with lawbox, public.resource.org and Harvard'), ('ZLCRU', 'columbia archive merged with lawbox, court website, public.resource.org and Harvard'), ('ZCU', 'columbia archive merged with court website and Harvard'), ('ZMU', 'columbia archive merged with manual input and Harvard'), ('ZRU', 'columbia archive merged with public.resource.org and Harvard'), ('ZLCU', 'columbia archive merged with lawbox, court website and Harvard'), ('G', 'recap'), ('TAMES', 'Texas courts public court records at search.txcourts.gov')], help_text='the source of the cluster, one of: C (court website), R (public.resource.org), CR (court website merged with resource.org), L (lawbox), LC (lawbox merged with court), LR (lawbox merged with resource.org), LCR (lawbox merged with court and resource.org), M (manual input), A (internet archive), H (brad heath archive), Z (columbia archive), ZA (columbia merged with internet archive), ZD (columbia merged with direct court input), ZC (columbia merged with court), ZH (columbia merged with brad heath archive), ZLC (columbia merged with lawbox and court), ZLR (columbia merged with lawbox and resource.org), ZLCR (columbia merged with lawbox, court, and resource.org), ZR (columbia merged with resource.org), ZCR (columbia merged with court and resource.org), ZL (columbia merged with lawbox), ZM (columbia merged with manual input), ZQ (columbia merged with 2020 anonymous database), U (Harvard, Library Innovation Lab Case Law Access Project), CU (court website merged with Harvard), D (direct court input), Q (2020 anonymous database), QU (2020 anonymous database merged with Harvard), CU (court website merged with Harvard), CRU (court website merged with public.resource.org and Harvard), DU (direct court input merged with Harvard), LU (lawbox merged with Harvard), LCU (Lawbox merged with court website and Harvard), LRU (Lawbox merged with public.resource.org and with Harvard), MU (Manual input merged with Harvard), RU (public.resource.org merged with Harvard), ZU (columbia archive merged with Harvard), ZLU (columbia archive merged with Lawbox and Harvard), ZDU (columbia archive merged with direct court input and Harvard), ZLRU (columbia archive merged with lawbox, public.resource.org and Harvard), ZLCRU (columbia archive merged with lawbox, court website, public.resource.org and Harvard), ZCU (columbia archive merged with court website and Harvard), ZMU (columbia archive merged with manual input and Harvard), ZRU (columbia archive merged with public.resource.org and Harvard), ZLCU (columbia archive merged with lawbox, court website and Harvard), G (recap), TAMES (Texas courts public court records at search.txcourts.gov)', max_length=10),
        ),
        migrations.AlterField(
            model_name='opinionclusterevent',
            name='source',
            field=models.CharField(blank=True, choices=[('C', 'court website'), ('R', 'public.resource.org'), ('CR', 'court website merged with resource.org'), ('L', 'lawbox'), ('LC', 'lawbox merged with court'), ('LR', 'lawbox merged with resource.org'), ('LCR', 'lawbox merged with court and resource.org'), ('M', 'manual input'), ('A', 'internet archive'), ('H', 'brad heath archive'), ('Z', 'columbia archive'), ('ZA', 'columbia merged with internet archive'), ('ZD', 'columbia merged with direct court input'), ('ZC', 'columbia merged with court'), ('ZH', 'columbia merged with brad heath archive'), ('ZLC', 'columbia merged with lawbox and court'), ('ZLR', 'columbia merged with lawbox and resource.org'), ('ZLCR', 'columbia merged with lawbox, court, and resource.org'), ('ZR', 'columbia merged with resource.org'), ('ZCR', 'columbia merged with court and resource.org'), ('ZL', 'columbia merged with lawbox'), ('ZM', 'columbia merged with manual input'), ('ZQ', 'columbia merged with 2020 anonymous database'), ('U', 'Harvard, Library Innovation Lab Case Law Access Project'), ('CU', 'court website merged with Harvard'), ('D', 'direct court input'), ('Q', '2020 anonymous database'), ('QU', '2020 anonymous database merged with Harvard'), ('CU', 'court website merged with Harvard'), ('CRU', 'court website merged with public.resource.org and Harvard'), ('DU', 'direct court input merged with Harvard'), ('LU', 'lawbox merged with Harvard'), ('LCU', 'Lawbox merged with court website and Harvard'), ('LRU', 'Lawbox merged with public.resource.org and with Harvard'), ('MU', 'Manual input merged with Harvard'), ('RU', 'public.resource.org merged with Harvard'), ('ZU', 'columbia archive merged with Harvard'), ('ZLU', 'columbia archive merged with Lawbox and Harvard'), ('ZDU', 'columbia archive merged with direct court input and Harvard'), ('ZLRU', 'columbia archive merged with lawbox, public.resource.org and Harvard'), ('ZLCRU', 'columbia archive merged with lawbox, court website, public.resource.org and Harvard'), ('ZCU', 'columbia archive merged with court website and Harvard'), ('ZMU', 'columbia archive merged with manual input and Harvard'), ('ZRU', 'columbia archive merged with public.resource.org and Harvard'), ('ZLCU', 'columbia archive merged with lawbox, court website and Harvard'), ('G', 'recap'), ('TAMES', 'Texas courts public court records at search.txcourts.gov')], help_text='the source of the cluster, one of: C (court website), R (public.resource.org), CR (court website merged with resource.org), L (lawbox), LC (lawbox merged with court), LR (lawbox merged with resource.org), LCR (lawbox merged with court and resource.org), M (manual input), A (internet archive), H (brad heath archive), Z (columbia archive), ZA (columbia merged with internet archive), ZD (columbia merged with direct court input), ZC (columbia merged with court), ZH (columbia merged with brad heath archive), ZLC (columbia merged with lawbox and court), ZLR (columbia merged with lawbox and resource.org), ZLCR (columbia merged with lawbox, court, and resource.org), ZR (columbia merged with resource.org), ZCR (columbia merged with court and resource.org), ZL (columbia merged with lawbox), ZM (columbia merged with manual input), ZQ (columbia merged with 2020 anonymous database), U (Harvard, Library Innovation Lab Case Law Access Project), CU (court website merged with Harvard), D (direct court input), Q (2020 anonymous database), QU (2020 anonymous database merged with Harvard), CU (court website merged with Harvard), CRU (court website merged with public.resource.org and Harvard), DU (direct court input merged with Harvard), LU (lawbox merged with Harvard), LCU (Lawbox merged with court website and Harvard), LRU (Lawbox merged with public.resource.org and with Harvard), MU (Manual input merged with Harvard), RU (public.resource.org merged with Harvard), ZU (columbia archive merged with Harvard), ZLU (columbia archive merged with Lawbox and Harvard), ZDU (columbia archive merged with direct court input and Harvard), ZLRU (columbia archive merged with lawbox, public.resource.org and Harvard), ZLCRU (columbia archive merged with lawbox, court website, public.resource.org and Harvard), ZCU (columbia archive merged with court website and Harvard), ZMU (columbia archive merged with manual input and Harvard), ZRU (columbia archive merged with public.resource.org and Harvard), ZLCU (columbia archive merged with lawbox, court website and Harvard), G (recap), TAMES (Texas courts public court records at search.txcourts.gov)', max_length=10),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='claimhistory',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."attachment_number" IS DISTINCT FROM (NEW."attachment_number") OR OLD."claim_id" IS DISTINCT FROM (NEW."claim_id") OR OLD."claim_doc_id" IS DISTINCT FROM (NEW."claim_doc_id") OR OLD."claim_document_type" IS DISTINCT FROM (NEW."claim_document_type") OR OLD."date_filed" IS DISTINCT FROM (NEW."date_filed") OR OLD."date_upload" IS DISTINCT FROM (NEW."date_upload") OR OLD."description" IS DISTINCT FROM (NEW."description") OR OLD."document_number" IS DISTINCT FROM (NEW."document_number") OR OLD."file_size" IS DISTINCT FROM (NEW."file_size") OR OLD."filepath_ia" IS DISTINCT FROM (NEW."filepath_ia") OR OLD."filepath_local" IS DISTINCT FROM (NEW."filepath_local") OR OLD."ia_upload_failure_count" IS DISTINCT FROM (NEW."ia_upload_failure_count") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."is_available" IS DISTINCT FROM (NEW."is_available") OR OLD."is_free_on_pacer" IS DISTINCT FROM (NEW."is_free_on_pacer") OR OLD."is_sealed" IS DISTINCT FROM (NEW."is_sealed") OR OLD."ocr_status" IS DISTINCT FROM (NEW."ocr_status") OR OLD."pacer_case_id" IS DISTINCT FROM (NEW."pacer_case_id") OR OLD."pacer_dm_id" IS DISTINCT FROM (NEW."pacer_dm_id") OR OLD."pacer_doc_id" IS DISTINCT FROM (NEW."pacer_doc_id") OR OLD."page_count" IS DISTINCT FROM (NEW."page_count") OR OLD."plain_text" IS DISTINCT FROM (NEW."plain_text") OR OLD."sha1" IS DISTINCT FROM (NEW."sha1") OR OLD."source_url" IS DISTINCT FROM (NEW."source_url") OR OLD."thumbnail" IS DISTINCT FROM (NEW."thumbnail") OR OLD."thumbnail_status" IS DISTINCT FROM (NEW."thumbnail_status"))', func='INSERT INTO "search_claimhistoryevent" ("attachment_number", "claim_doc_id", "claim_document_type", "claim_id", "date_created", "date_filed", "date_modified", "date_upload", "description", "document_number", "file_size", "filepath_ia", "filepath_local", "ia_upload_failure_count", "id", "is_available", "is_free_on_pacer", "is_sealed", "ocr_status", "pacer_case_id", "pacer_dm_id", "pacer_doc_id", "page_count", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plain_text", "sha1", "source_url", "thumbnail", "thumbnail_status") VALUES (OLD."attachment_number", OLD."claim_doc_id", OLD."claim_document_type", OLD."claim_id", OLD."date_created", OLD."date_filed", OLD."date_modified", OLD."date_upload", OLD."description", OLD."document_number", OLD."file_size", OLD."filepath_ia", OLD."filepath_local", OLD."ia_upload_failure_count", OLD."id", OLD."is_available", OLD."is_free_on_pacer", OLD."is_sealed", OLD."ocr_status", OLD."pacer_case_id", OLD."pacer_dm_id", OLD."pacer_doc_id", OLD."page_count", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."plain_text", OLD."sha1", OLD."source_url", OLD."thumbnail", OLD."thumbnail_status"); RETURN NULL;', hash='959df2f7d7c2fd15a7974c3f48942849f1253654', operation='UPDATE', pgid='pgtrigger_update_update_51cdc', table='search_claimhistory', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='claimhistory',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_claimhistoryevent" ("attachment_number", "claim_doc_id", "claim_document_type", "claim_id", "date_created", "date_filed", "date_modified", "date_upload", "description", "document_number", "file_size", "filepath_ia", "filepath_local", "ia_upload_failure_count", "id", "is_available", "is_free_on_pacer", "is_sealed", "ocr_status", "pacer_case_id", "pacer_dm_id", "pacer_doc_id", "page_count", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plain_text", "sha1", "source_url", "thumbnail", "thumbnail_status") VALUES (OLD."attachment_number", OLD."claim_doc_id", OLD."claim_document_type", OLD."claim_id", OLD."date_created", OLD."date_filed", OLD."date_modified", OLD."date_upload", OLD."description", OLD."document_number", OLD."file_size", OLD."filepath_ia", OLD."filepath_local", OLD."ia_upload_failure_count", OLD."id", OLD."is_available", OLD."is_free_on_pacer", OLD."is_sealed", OLD."ocr_status", OLD."pacer_case_id", OLD."pacer_dm_id", OLD."pacer_doc_id", OLD."page_count", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."plain_text", OLD."sha1", OLD."source_url", OLD."thumbnail", OLD."thumbnail_status"); RETURN NULL;', hash='fdc03ae27eb61ecc9359c831e60e64545dadf9dc', operation='DELETE', pgid='pgtrigger_delete_delete_8a93d', table='search_claimhistory', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='docket',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."appeal_from_id" IS DISTINCT FROM (NEW."appeal_from_id") OR OLD."appeal_from_str" IS DISTINCT FROM (NEW."appeal_from_str") OR OLD."appellate_case_type_information" IS DISTINCT FROM (NEW."appellate_case_type_information") OR OLD."appellate_fee_status" IS DISTINCT FROM (NEW."appellate_fee_status") OR OLD."assigned_to_id" IS DISTINCT FROM (NEW."assigned_to_id") OR OLD."assigned_to_str" IS DISTINCT FROM (NEW."assigned_to_str") OR OLD."blocked" IS DISTINCT FROM (NEW."blocked") OR OLD."case_name" IS DISTINCT FROM (NEW."case_name") OR OLD."case_name_full" IS DISTINCT FROM (NEW."case_name_full") OR OLD."case_name_short" IS DISTINCT FROM (NEW."case_name_short") OR OLD."cause" IS DISTINCT FROM (NEW."cause") OR OLD."court_id" IS DISTINCT FROM (NEW."court_id") OR OLD."date_argued" IS DISTINCT FROM (NEW."date_argued") OR OLD."date_blocked" IS DISTINCT FROM (NEW."date_blocked") OR OLD."date_cert_denied" IS DISTINCT FROM (NEW."date_cert_denied") OR OLD."date_cert_granted" IS DISTINCT FROM (NEW."date_cert_granted") OR OLD."date_filed" IS DISTINCT FROM (NEW."date_filed") OR OLD."date_last_filing" IS DISTINCT FROM (NEW."date_last_filing") OR OLD."date_last_index" IS DISTINCT FROM (NEW."date_last_index") OR OLD."date_reargued" IS DISTINCT FROM (NEW."date_reargued") OR OLD."date_reargument_denied" IS DISTINCT FROM (NEW."date_reargument_denied") OR OLD."date_terminated" IS DISTINCT FROM (NEW."date_terminated") OR OLD."docket_number" IS DISTINCT FROM (NEW."docket_number") OR OLD."docket_number_core" IS DISTINCT FROM (NEW."docket_number_core") OR OLD."docket_number_raw" IS DISTINCT FROM (NEW."docket_number_raw") OR OLD."federal_defendant_number" IS DISTINCT FROM (NEW."federal_defendant_number") OR OLD."federal_dn_case_type" IS DISTINCT FROM (NEW."federal_dn_case_type") OR OLD."federal_dn_judge_initials_assigned" IS DISTINCT FROM (NEW."federal_dn_judge_initials_assigned") OR OLD."federal_dn_judge_initials_referred" IS DISTINCT FROM (NEW."federal_dn_judge_initials_referred") OR OLD."federal_dn_office_code" IS DISTINCT FROM (NEW."federal_dn_office_code") OR OLD."filepath_ia" IS DISTINCT FROM (NEW."filepath_ia") OR OLD."filepath_ia_json" IS DISTINCT FROM (NEW."filepath_ia_json") OR OLD."filepath_local" IS DISTINCT FROM (NEW."filepath_local") OR OLD."ia_date_first_change" IS DISTINCT FROM (NEW."ia_date_first_change") OR OLD."ia_needs_upload" IS DISTINCT FROM (NEW."ia_needs_upload") OR OLD."ia_upload_failure_count" IS DISTINCT FROM (NEW."ia_upload_failure_count") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."idb_data_id" IS DISTINCT FROM (NEW."idb_data_id") OR OLD."is_original_proceeding" IS DISTINCT FROM (NEW."is_original_proceeding") OR OLD."jurisdiction_type" IS DISTINCT FROM (NEW."jurisdiction_type") OR OLD."jury_demand" IS DISTINCT FROM (NEW."jury_demand") OR OLD."mdl_status" IS DISTINCT FROM (NEW."mdl_status") OR OLD."nature_of_suit" IS DISTINCT FROM (NEW."nature_of_suit") OR OLD."originating_court_information_id" IS DISTINCT FROM (NEW."originating_court_information_id") OR OLD."pacer_case_id" IS DISTINCT FROM (NEW."pacer_case_id") OR OLD."panel_str" IS DISTINCT FROM (NEW."panel_str") OR OLD."parent_docket_id" IS DISTINCT FROM (NEW."parent_docket_id") OR OLD."referred_to_id" IS DISTINCT FROM (NEW."referred_to_id") OR OLD."referred_to_str" IS DISTINCT FROM (NEW."referred_to_str") OR OLD."slug" IS DISTINCT FROM (NEW."slug") OR OLD."source" IS DISTINCT FROM (NEW."source") OR OLD."transfer_date" IS DISTINCT FROM (NEW."transfer_date") OR OLD."transfer_to_id" IS DISTINCT FROM (NEW."transfer_to_id"))', func='INSERT INTO "search_docketevent" ("appeal_from_id", "appeal_from_str", "appellate_case_type_information", "appellate_fee_status", "assigned_to_id", "assigned_to_str", "blocked", "case_name", "case_name_full", "case_name_short", "cause", "court_id", "date_argued", "date_blocked", "date_cert_denied", "date_cert_granted", "date_created", "date_filed", "date_last_filing", "date_last_index", "date_modified", "date_reargued", "date_reargument_denied", "date_terminated", "docket_number", "docket_number_core", "docket_number_raw", "federal_defendant_number", "federal_dn_case_type", "federal_dn_judge_initials_assigned", "federal_dn_judge_initials_referred", "federal_dn_office_code", "filepath_ia", "filepath_ia_json", "filepath_local", "ia_date_first_change", "ia_needs_upload", "ia_upload_failure_count", "id", "idb_data_id", "is_original_proceeding", "jurisdiction_type", "jury_demand", "mdl_status", "nature_of_suit", "originating_court_information_id", "pacer_case_id", "panel_str", "parent_docket_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "referred_to_id", "referred_to_str", "slug", "source", "transfer_date", "transfer_to_id") VALUES (OLD."appeal_from_id", OLD."appeal_from_str", OLD."appellate_case_type_information", OLD."appellate_fee_status", OLD."assigned_to_id", OLD."assigned_to_str", OLD."blocked", OLD."case_name", OLD."case_name_full", OLD."case_name_short", OLD."cause", OLD."court_id", OLD."date_argued", OLD."date_blocked", OLD."date_cert_denied", OLD."date_cert_granted", OLD."date_created", OLD."date_filed", OLD."date_last_filing", OLD."date_last_index", OLD."date_modified", OLD."date_reargued", OLD."date_reargument_denied", OLD."date_terminated", OLD."docket_number", OLD."docket_number_core", OLD."docket_number_raw", OLD."federal_defendant_number", OLD."federal_dn_case_type", OLD."federal_dn_judge_initials_assigned", OLD."federal_dn_judge_initials_referred", OLD."federal_dn_office_code", OLD."filepath_ia", OLD."filepath_ia_json", OLD."filepath_local", OLD."ia_date_first_change", OLD."ia_needs_upload", OLD."ia_upload_failure_count", OLD."id", OLD."idb_data_id", OLD."is_original_proceeding", OLD."jurisdiction_type", OLD."jury_demand", OLD."mdl_status", OLD."nature_of_suit", OLD."originating_court_information_id", OLD."pacer_case_id", OLD."panel_str", OLD."parent_docket_id", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."referred_to_id", OLD."referred_to_str", OLD."slug", OLD."source", OLD."transfer_date", OLD."transfer_to_id"); RETURN NULL;', hash='f3cd0a22142f418b9060fb1be763cdffd15aa432', operation='UPDATE', pgid='pgtrigger_update_update_068f7', table='search_docket', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='docket',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_docketevent" ("appeal_from_id", "appeal_from_str", "appellate_case_type_information", "appellate_fee_status", "assigned_to_id", "assigned_to_str", "blocked", "case_name", "case_name_full", "case_name_short", "cause", "court_id", "date_argued", "date_blocked", "date_cert_denied", "date_cert_granted", "date_created", "date_filed", "date_last_filing", "date_last_index", "date_modified", "date_reargued", "date_reargument_denied", "date_terminated", "docket_number", "docket_number_core", "docket_number_raw", "federal_defendant_number", "federal_dn_case_type", "federal_dn_judge_initials_assigned", "federal_dn_judge_initials_referred", "federal_dn_office_code", "filepath_ia", "filepath_ia_json", "filepath_local", "ia_date_first_change", "ia_needs_upload", "ia_upload_failure_count", "id", "idb_data_id", "is_original_proceeding", "jurisdiction_type", "jury_demand", "mdl_status", "nature_of_suit", "originating_court_information_id", "pacer_case_id", "panel_str", "parent_docket_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "referred_to_id", "referred_to_str", "slug", "source", "transfer_date", "transfer_to_id") VALUES (OLD."appeal_from_id", OLD."appeal_from_str", OLD."appellate_case_type_information", OLD."appellate_fee_status", OLD."assigned_to_id", OLD."assigned_to_str", OLD."blocked", OLD."case_name", OLD."case_name_full", OLD."case_name_short", OLD."cause", OLD."court_id", OLD."date_argued", OLD."date_blocked", OLD."date_cert_denied", OLD."date_cert_granted", OLD."date_created", OLD."date_filed", OLD."date_last_filing", OLD."date_last_index", OLD."date_modified", OLD."date_reargued", OLD."date_reargument_denied", OLD."date_terminated", OLD."docket_number", OLD."docket_number_core", OLD."docket_number_raw", OLD."federal_defendant_number", OLD."federal_dn_case_type", OLD."federal_dn_judge_initials_assigned", OLD."federal_dn_judge_initials_referred", OLD."federal_dn_office_code", OLD."filepath_ia", OLD."filepath_ia_json", OLD."filepath_local", OLD."ia_date_first_change", OLD."ia_needs_upload", OLD."ia_upload_failure_count", OLD."id", OLD."idb_data_id", OLD."is_original_proceeding", OLD."jurisdiction_type", OLD."jury_demand", OLD."mdl_status", OLD."nature_of_suit", OLD."originating_court_information_id", OLD."pacer_case_id", OLD."panel_str", OLD."parent_docket_id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."referred_to_id", OLD."referred_to_str", OLD."slug", OLD."source", OLD."transfer_date", OLD."transfer_to_id"); RETURN NULL;', hash='a1e321517aa0316d788fd35f5beb159a1fcdbd2a', operation='DELETE', pgid='pgtrigger_delete_delete_7303c', table='search_docket', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='originatingcourtinformation',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."assigned_to_id" IS DISTINCT FROM (NEW."assigned_to_id") OR OLD."assigned_to_str" IS DISTINCT FROM (NEW."assigned_to_str") OR OLD."county" IS DISTINCT FROM (NEW."county") OR OLD."court_reporter" IS DISTINCT FROM (NEW."court_reporter") OR OLD."date_disposed" IS DISTINCT FROM (NEW."date_disposed") OR OLD."date_filed" IS DISTINCT FROM (NEW."date_filed") OR OLD."date_filed_noa" IS DISTINCT FROM (NEW."date_filed_noa") OR OLD."date_judgment" IS DISTINCT FROM (NEW."date_judgment") OR OLD."date_judgment_eod" IS DISTINCT FROM (NEW."date_judgment_eod") OR OLD."date_received_coa" IS DISTINCT FROM (NEW."date_received_coa") OR OLD."docket_number" IS DISTINCT FROM (NEW."docket_number") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."ordering_judge_id" IS DISTINCT FROM (NEW."ordering_judge_id") OR OLD."ordering_judge_str" IS DISTINCT FROM (NEW."ordering_judge_str") OR OLD."sentence" IS DISTINCT FROM (NEW."sentence"))', func='INSERT INTO "search_originatingcourtinformationevent" ("assigned_to_id", "assigned_to_str", "county", "court_reporter", "date_created", "date_disposed", "date_filed", "date_filed_noa", "date_judgment", "date_judgment_eod", "date_modified", "date_received_coa", "docket_number", "id", "ordering_judge_id", "ordering_judge_str", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "sentence") VALUES (OLD."assigned_to_id", OLD."assigned_to_str", OLD."county", OLD."court_reporter", OLD."date_created", OLD."date_disposed", OLD."date_filed", OLD."date_filed_noa", OLD."date_judgment", OLD."date_judgment_eod", OLD."date_modified", OLD."date_received_coa", OLD."docket_number", OLD."id", OLD."ordering_judge_id", OLD."ordering_judge_str", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."sentence"); RETURN NULL;', hash='9f61b518c7d578a4d2b46c633a442ed42851056d', operation='UPDATE', pgid='pgtrigger_update_update_65b0a', table='search_originatingcourtinformation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='originatingcourtinformation',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_originatingcourtinformationevent" ("assigned_to_id", "assigned_to_str", "county", "court_reporter", "date_created", "date_disposed", "date_filed", "date_filed_noa", "date_judgment", "date_judgment_eod", "date_modified", "date_received_coa", "docket_number", "id", "ordering_judge_id", "ordering_judge_str", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "sentence") VALUES (OLD."assigned_to_id", OLD."assigned_to_str", OLD."county", OLD."court_reporter", OLD."date_created", OLD."date_disposed", OLD."date_filed", OLD."date_filed_noa", OLD."date_judgment", OLD."date_judgment_eod", OLD."date_modified", OLD."date_received_coa", OLD."docket_number", OLD."id", OLD."ordering_judge_id", OLD."ordering_judge_str", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."sentence"); RETURN NULL;', hash='70dd71f1897be4187de55737ea0ccb4e9bf0c9a0', operation='DELETE', pgid='pgtrigger_delete_delete_ea96d', table='search_originatingcourtinformation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='recapdocument',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."acms_document_guid" IS DISTINCT FROM (NEW."acms_document_guid") OR OLD."attachment_number" IS DISTINCT FROM (NEW."attachment_number") OR OLD."date_upload" IS DISTINCT FROM (NEW."date_upload") OR OLD."description" IS DISTINCT FROM (NEW."description") OR OLD."docket_entry_id" IS DISTINCT FROM (NEW."docket_entry_id") OR OLD."document_number" IS DISTINCT FROM (NEW."document_number") OR OLD."document_type" IS DISTINCT FROM (NEW."document_type") OR OLD."file_size" IS DISTINCT FROM (NEW."file_size") OR OLD."filepath_ia" IS DISTINCT FROM (NEW."filepath_ia") OR OLD."filepath_local" IS DISTINCT FROM (NEW."filepath_local") OR OLD."ia_upload_failure_count" IS DISTINCT FROM (NEW."ia_upload_failure_count") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."is_available" IS DISTINCT FROM (NEW."is_available") OR OLD."is_free_on_pacer" IS DISTINCT FROM (NEW."is_free_on_pacer") OR OLD."is_sealed" IS DISTINCT FROM (NEW."is_sealed") OR OLD."ocr_status" IS DISTINCT FROM (NEW."ocr_status") OR OLD."pacer_doc_id" IS DISTINCT FROM (NEW."pacer_doc_id") OR OLD."page_count" IS DISTINCT FROM (NEW."page_count") OR OLD."plain_text" IS DISTINCT FROM (NEW."plain_text") OR OLD."sha1" IS DISTINCT FROM (NEW."sha1") OR OLD."source_url" IS DISTINCT FROM (NEW."source_url") OR OLD."thumbnail" IS DISTINCT FROM (NEW."thumbnail") OR OLD."thumbnail_status" IS DISTINCT FROM (NEW."thumbnail_status"))', func='INSERT INTO "search_recapdocumentevent" ("acms_document_guid", "attachment_number", "date_created", "date_modified", "date_upload", "description", "docket_entry_id", "document_number", "document_type", "file_size", "filepath_ia", "filepath_local", "ia_upload_failure_count", "id", "is_available", "is_free_on_pacer", "is_sealed", "ocr_status", "pacer_doc_id", "page_count", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plain_text", "sha1", "source_url", "thumbnail", "thumbnail_status") VALUES (OLD."acms_document_guid", OLD."attachment_number", OLD."date_created", OLD."date_modified", OLD."date_upload", OLD."description", OLD."docket_entry_id", OLD."document_number", OLD."document_type", OLD."file_size", OLD."filepath_ia", OLD."filepath_local", OLD."ia_upload_failure_count", OLD."id", OLD."is_available", OLD."is_free_on_pacer", OLD."is_sealed", OLD."ocr_status", OLD."pacer_doc_id", OLD."page_count", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."plain_text", OLD."sha1", OLD."source_url", OLD."thumbnail", OLD."thumbnail_status"); RETURN NULL;', hash='385eb2a30f95321b6234269ea77ec96f9ff443c5', operation='UPDATE', pgid='pgtrigger_update_update_af6ad', table='search_recapdocument', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='recapdocument',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_recapdocumentevent" ("acms_document_guid", "attachment_number", "date_created", "date_modified", "date_upload", "description", "docket_entry_id", "document_number", "document_type", "file_size", "filepath_ia", "filepath_local", "ia_upload_failure_count", "id", "is_available", "is_free_on_pacer", "is_sealed", "ocr_status", "pacer_doc_id", "page_count", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plain_text", "sha1", "source_url", "thumbnail", "thumbnail_status") VALUES (OLD."acms_document_guid", OLD."attachment_number", OLD."date_created", OLD."date_modified", OLD."date_upload", OLD."description", OLD."docket_entry_id", OLD."document_number", OLD."document_type", OLD."file_size", OLD."filepath_ia", OLD."filepath_local", OLD."ia_upload_failure_count", OLD."id", OLD."is_available", OLD."is_free_on_pacer", OLD."is_sealed", OLD."ocr_status", OLD."pacer_doc_id", OLD."page_count", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."plain_text", OLD."sha1", OLD."source_url", OLD."thumbnail", OLD."thumbnail_status"); RETURN NULL;', hash='c12d34ad62493baea121c9198e8351884b68779b', operation='DELETE', pgid='pgtrigger_delete_delete_28a84', table='search_recapdocument', when='AFTER')),
        ),
        migrations.AddField(
            model_name='appellatebrief',
            name='docket',
            field=models.ForeignKey(help_text='The docket for this brief', on_delete=django.db.models.deletion.CASCADE, related_name='appellate_briefs', to='search.docket'),
        ),
        migrations.AddField(
            model_name='appellatebrief',
            name='filing_party',
            field=models.ForeignKey(blank=True, help_text='The party filing this brief', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='briefs_filed', to='people_db.party'),
        ),
        migrations.AddField(
            model_name='appellatebriefevent',
            name='docket',
            field=models.ForeignKey(db_constraint=False, help_text='The docket for this brief', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.docket'),
        ),
        migrations.AddField(
            model_name='appellatebriefevent',
            name='filing_party',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The party filing this brief', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.party'),
        ),
        migrations.AddField(
            model_name='appellatebriefevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='appellatebriefevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='search.appellatebrief'),
        ),
        migrations.AddField(
            model_name='calendarentry',
            name='docket',
            field=models.ForeignKey(help_text='The docket for this calendar entry', on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to='search.docket'),
        ),
        migrations.AddField(
            model_name='calendarentryevent',
            name='docket',
            field=models.ForeignKey(db_constraint=False, help_text='The docket for this calendar entry', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.docket'),
        ),
        migrations.AddField(
            model_name='calendarentryevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='calendarentryevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='search.calendarentry'),
        ),
        migrations.AddIndex(
            model_name='appellatebrief',
            index=models.Index(fields=['docket_id', 'date_filed'], name='search_appe_docket__5fd70f_idx'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='appellatebrief',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."brief_source" IS DISTINCT FROM (NEW."brief_source") OR OLD."brief_type" IS DISTINCT FROM (NEW."brief_type") OR OLD."date_filed" IS DISTINCT FROM (NEW."date_filed") OR OLD."description" IS DISTINCT FROM (NEW."description") OR OLD."docket_id" IS DISTINCT FROM (NEW."docket_id") OR OLD."file_size" IS DISTINCT FROM (NEW."file_size") OR OLD."filepath_ia" IS DISTINCT FROM (NEW."filepath_ia") OR OLD."filepath_local" IS DISTINCT FROM (NEW."filepath_local") OR OLD."filing_party_id" IS DISTINCT FROM (NEW."filing_party_id") OR OLD."ia_upload_failure_count" IS DISTINCT FROM (NEW."ia_upload_failure_count") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."ocr_status" IS DISTINCT FROM (NEW."ocr_status") OR OLD."page_count" IS DISTINCT FROM (NEW."page_count") OR OLD."plain_text" IS DISTINCT FROM (NEW."plain_text") OR OLD."sha1" IS DISTINCT FROM (NEW."sha1") OR OLD."source_url" IS DISTINCT FROM (NEW."source_url") OR OLD."thumbnail" IS DISTINCT FROM (NEW."thumbnail") OR OLD."thumbnail_status" IS DISTINCT FROM (NEW."thumbnail_status"))', func='INSERT INTO "search_appellatebriefevent" ("brief_source", "brief_type", "date_created", "date_filed", "date_modified", "description", "docket_id", "file_size", "filepath_ia", "filepath_local", "filing_party_id", "ia_upload_failure_count", "id", "ocr_status", "page_count", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plain_text", "sha1", "source_url", "thumbnail", "thumbnail_status") VALUES (OLD."brief_source", OLD."brief_type", OLD."date_created", OLD."date_filed", OLD."date_modified", OLD."description", OLD."docket_id", OLD."file_size", OLD."filepath_ia", OLD."filepath_local", OLD."filing_party_id", OLD."ia_upload_failure_count", OLD."id", OLD."ocr_status", OLD."page_count", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."plain_text", OLD."sha1", OLD."source_url", OLD."thumbnail", OLD."thumbnail_status"); RETURN NULL;', hash='b5ef8655b3638725569f1b8e4391f881c1121ea3', operation='UPDATE', pgid='pgtrigger_update_update_faeeb', table='search_appellatebrief', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='appellatebrief',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_appellatebriefevent" ("brief_source", "brief_type", "date_created", "date_filed", "date_modified", "description", "docket_id", "file_size", "filepath_ia", "filepath_local", "filing_party_id", "ia_upload_failure_count", "id", "ocr_status", "page_count", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plain_text", "sha1", "source_url", "thumbnail", "thumbnail_status") VALUES (OLD."brief_source", OLD."brief_type", OLD."date_created", OLD."date_filed", OLD."date_modified", OLD."description", OLD."docket_id", OLD."file_size", OLD."filepath_ia", OLD."filepath_local", OLD."filing_party_id", OLD."ia_upload_failure_count", OLD."id", OLD."ocr_status", OLD."page_count", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."plain_text", OLD."sha1", OLD."source_url", OLD."thumbnail", OLD."thumbnail_status"); RETURN NULL;', hash='1ab781455234f34bc359f72a0e66153e34cbcee5', operation='DELETE', pgid='pgtrigger_delete_delete_9eebb', table='search_appellatebrief', when='AFTER')),
        ),
        migrations.AddIndex(
            model_name='calendarentry',
            index=models.Index(fields=['docket_id', 'entry_date'], name='search_cale_docket__8a8d11_idx'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='calendarentry',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."docket_id" IS DISTINCT FROM (NEW."docket_id") OR OLD."entry_date" IS DISTINCT FROM (NEW."entry_date") OR OLD."entry_type" IS DISTINCT FROM (NEW."entry_type") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."reason_set" IS DISTINCT FROM (NEW."reason_set"))', func='INSERT INTO "search_calendarentryevent" ("date_created", "date_modified", "docket_id", "entry_date", "entry_type", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reason_set") VALUES (OLD."date_created", OLD."date_modified", OLD."docket_id", OLD."entry_date", OLD."entry_type", OLD."id", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."reason_set"); RETURN NULL;', hash='56613531e6602e341a8abaab0509228bf3ba6d2e', operation='UPDATE', pgid='pgtrigger_update_update_a02a7', table='search_calendarentry', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='calendarentry',
            trigger=pgtrigger.compiler.Trigger(name='delete_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "search_calendarentryevent" ("date_created", "date_modified", "docket_id", "entry_date", "entry_type", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "reason_set") VALUES (OLD."date_created", OLD."date_modified", OLD."docket_id", OLD."entry_date", OLD."entry_type", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."reason_set"); RETURN NULL;', hash='227de5bd87b38a8c5cb9be659fca98ae0efcc074', operation='DELETE', pgid='pgtrigger_delete_delete_b7659', table='search_calendarentry', when='AFTER')),
        ),
    ]
