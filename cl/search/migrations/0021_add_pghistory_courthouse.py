# Generated by Django 4.2.4 on 2023-09-26 23:52

from django.db import migrations, models
import django.db.models.deletion
import localflavor.us.models
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):
    dependencies = [
        ("pghistory", "0005_events_middlewareevents"),
        ("search", "0020_courthouse_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="CourtAppealsToEvent",
            fields=[
                (
                    "pgh_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CourthouseEvent",
            fields=[
                (
                    "pgh_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.IntegerField()),
                (
                    "court_seat",
                    models.BooleanField(
                        default=False,
                        help_text="Is this the seat of the Court?",
                        null=True,
                    ),
                ),
                (
                    "building_name",
                    models.TextField(
                        blank=True, help_text="Ex. John Adams Courthouse."
                    ),
                ),
                (
                    "address1",
                    models.TextField(
                        blank=True,
                        help_text="The normalized address1 of the courthouse.",
                    ),
                ),
                (
                    "address2",
                    models.TextField(
                        blank=True,
                        help_text="The normalized address2 of the courthouse.",
                    ),
                ),
                (
                    "city",
                    models.TextField(
                        blank=True,
                        help_text="The normalized city of the courthouse.",
                    ),
                ),
                (
                    "county",
                    models.TextField(
                        blank=True,
                        help_text="The county, if any, where the courthouse resides.",
                    ),
                ),
                (
                    "state",
                    localflavor.us.models.USPostalCodeField(
                        blank=True,
                        help_text="The two-letter USPS postal abbreviation for the organization w/ obsolete state options.",
                        max_length=2,
                    ),
                ),
                (
                    "zip_code",
                    localflavor.us.models.USZipCodeField(
                        blank=True,
                        help_text="The zip code for the organization, XXXXX or XXXXX-XXXX work.",
                        max_length=10,
                    ),
                ),
                (
                    "country_code",
                    models.TextField(
                        choices=[
                            ("GB", "United Kingdom"),
                            ("US", "United States"),
                        ],
                        default="US",
                        help_text="The two letter country code.",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CourtAppealsTo",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("search.court_appeals_to",),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="courthouse",
            trigger=pgtrigger.compiler.Trigger(
                name="update_or_delete_snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "search_courthouseevent" ("address1", "address2", "building_name", "city", "country_code", "county", "court_id", "court_seat", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "state", "zip_code") VALUES (OLD."address1", OLD."address2", OLD."building_name", OLD."city", OLD."country_code", OLD."county", OLD."court_id", OLD."court_seat", OLD."id", _pgh_attach_context(), NOW(), \'update_or_delete_snapshot\', OLD."id", OLD."state", OLD."zip_code"); RETURN NULL;',
                    hash="b3a38d787937fd3591951860f2bf9fc980f8f87f",
                    operation="UPDATE",
                    pgid="pgtrigger_update_or_delete_snapshot_update_e394a",
                    table="search_courthouse",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="courthouse",
            trigger=pgtrigger.compiler.Trigger(
                name="update_or_delete_snapshot_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "search_courthouseevent" ("address1", "address2", "building_name", "city", "country_code", "county", "court_id", "court_seat", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "state", "zip_code") VALUES (OLD."address1", OLD."address2", OLD."building_name", OLD."city", OLD."country_code", OLD."county", OLD."court_id", OLD."court_seat", OLD."id", _pgh_attach_context(), NOW(), \'update_or_delete_snapshot\', OLD."id", OLD."state", OLD."zip_code"); RETURN NULL;',
                    hash="52ca038a3b52ba39ca02facbb87977a5cd1f59a3",
                    operation="DELETE",
                    pgid="pgtrigger_update_or_delete_snapshot_delete_aabf8",
                    table="search_courthouse",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="courthouseevent",
            name="court",
            field=models.ForeignKey(
                db_constraint=False,
                help_text="The court object associated with this courthouse.",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="search.court",
            ),
        ),
        migrations.AddField(
            model_name="courthouseevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="courthouseevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="event",
                to="search.courthouse",
            ),
        ),
        migrations.AddField(
            model_name="courtappealstoevent",
            name="from_court",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="search.court",
            ),
        ),
        migrations.AddField(
            model_name="courtappealstoevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="courtappealstoevent",
            name="to_court",
            field=models.ForeignKey(
                db_constraint=False,
                db_tablespace="",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="search.court",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="courtappealsto",
            trigger=pgtrigger.compiler.Trigger(
                name="update_or_delete_snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "search_courtappealstoevent" ("from_court_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "to_court_id") VALUES (OLD."from_court_id", OLD."id", _pgh_attach_context(), NOW(), \'update_or_delete_snapshot\', OLD."to_court_id"); RETURN NULL;',
                    hash="5224e4a3e58a56dba44b76077e4915f981134af3",
                    operation="UPDATE",
                    pgid="pgtrigger_update_or_delete_snapshot_update_cc38c",
                    table="search_court_appeals_to",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="courtappealsto",
            trigger=pgtrigger.compiler.Trigger(
                name="update_or_delete_snapshot_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "search_courtappealstoevent" ("from_court_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "to_court_id") VALUES (OLD."from_court_id", OLD."id", _pgh_attach_context(), NOW(), \'update_or_delete_snapshot\', OLD."to_court_id"); RETURN NULL;',
                    hash="60c71e3e490f9be107654bc74bf4149d448b4842",
                    operation="DELETE",
                    pgid="pgtrigger_update_or_delete_snapshot_delete_01d31",
                    table="search_court_appeals_to",
                    when="AFTER",
                ),
            ),
        ),
    ]
