# Generated by Django 5.0.6 on 2024-06-06 23:21

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("audio", "0007_alter_audio_source_alter_audioevent_source_noop"),
    ]

    operations = [
        migrations.CreateModel(
            name="AudioTranscriptionMetadata",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        help_text="Word and/or segment level metadata returned by a STT model. May be used for diarization. Contains start and end timestamps for segments and words, probabilities and other model outputs"
                    ),
                ),
            ],
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="audio",
            name="update_or_delete_snapshot_delete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="audio",
            name="update_or_delete_snapshot_update",
        ),
        migrations.RemoveField(
            model_name="audio",
            name="stt_google_response",
        ),
        migrations.RemoveField(
            model_name="audioevent",
            name="stt_google_response",
        ),
        migrations.AddField(
            model_name="audio",
            name="stt_source",
            field=models.SmallIntegerField(
                blank=True,
                choices=[
                    (1, "OpenAI API's whisper-1 model"),
                    (2, "Self hosted Whisper model"),
                ],
                help_text="Source used to get the transcription",
                null=True,
                verbose_name="Speech to text source",
            ),
        ),
        migrations.AddField(
            model_name="audio",
            name="stt_transcript",
            field=models.TextField(
                blank=True,
                help_text="Speech to text transcription",
                verbose_name="Speech to text transcription",
            ),
        ),
        migrations.AddField(
            model_name="audioevent",
            name="stt_source",
            field=models.SmallIntegerField(
                blank=True,
                choices=[
                    (1, "OpenAI API's whisper-1 model"),
                    (2, "Self hosted Whisper model"),
                ],
                help_text="Source used to get the transcription",
                null=True,
                verbose_name="Speech to text source",
            ),
        ),
        migrations.AddField(
            model_name="audioevent",
            name="stt_transcript",
            field=models.TextField(
                blank=True,
                help_text="Speech to text transcription",
                verbose_name="Speech to text transcription",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="audio",
            trigger=pgtrigger.compiler.Trigger(
                name="update_or_delete_snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."date_created" IS DISTINCT FROM (NEW."date_created") OR OLD."docket_id" IS DISTINCT FROM (NEW."docket_id") OR OLD."source" IS DISTINCT FROM (NEW."source") OR OLD."case_name_short" IS DISTINCT FROM (NEW."case_name_short") OR OLD."case_name" IS DISTINCT FROM (NEW."case_name") OR OLD."case_name_full" IS DISTINCT FROM (NEW."case_name_full") OR OLD."judges" IS DISTINCT FROM (NEW."judges") OR OLD."sha1" IS DISTINCT FROM (NEW."sha1") OR OLD."download_url" IS DISTINCT FROM (NEW."download_url") OR OLD."local_path_mp3" IS DISTINCT FROM (NEW."local_path_mp3") OR OLD."local_path_original_file" IS DISTINCT FROM (NEW."local_path_original_file") OR OLD."filepath_ia" IS DISTINCT FROM (NEW."filepath_ia") OR OLD."ia_upload_failure_count" IS DISTINCT FROM (NEW."ia_upload_failure_count") OR OLD."duration" IS DISTINCT FROM (NEW."duration") OR OLD."processing_complete" IS DISTINCT FROM (NEW."processing_complete") OR OLD."date_blocked" IS DISTINCT FROM (NEW."date_blocked") OR OLD."blocked" IS DISTINCT FROM (NEW."blocked") OR OLD."stt_status" IS DISTINCT FROM (NEW."stt_status") OR OLD."stt_source" IS DISTINCT FROM (NEW."stt_source") OR OLD."stt_transcript" IS DISTINCT FROM (NEW."stt_transcript"))',
                    func='INSERT INTO "audio_audioevent" ("blocked", "case_name", "case_name_full", "case_name_short", "date_blocked", "date_created", "date_modified", "docket_id", "download_url", "duration", "filepath_ia", "ia_upload_failure_count", "id", "judges", "local_path_mp3", "local_path_original_file", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "processing_complete", "sha1", "source", "stt_source", "stt_status", "stt_transcript") VALUES (OLD."blocked", OLD."case_name", OLD."case_name_full", OLD."case_name_short", OLD."date_blocked", OLD."date_created", OLD."date_modified", OLD."docket_id", OLD."download_url", OLD."duration", OLD."filepath_ia", OLD."ia_upload_failure_count", OLD."id", OLD."judges", OLD."local_path_mp3", OLD."local_path_original_file", _pgh_attach_context(), NOW(), \'update_or_delete_snapshot\', OLD."id", OLD."processing_complete", OLD."sha1", OLD."source", OLD."stt_source", OLD."stt_status", OLD."stt_transcript"); RETURN NULL;',
                    hash="42dd84aefb19b650e531a47793e27eac9ea2bd68",
                    operation="UPDATE",
                    pgid="pgtrigger_update_or_delete_snapshot_update_63362",
                    table="audio_audio",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="audio",
            trigger=pgtrigger.compiler.Trigger(
                name="update_or_delete_snapshot_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "audio_audioevent" ("blocked", "case_name", "case_name_full", "case_name_short", "date_blocked", "date_created", "date_modified", "docket_id", "download_url", "duration", "filepath_ia", "ia_upload_failure_count", "id", "judges", "local_path_mp3", "local_path_original_file", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "processing_complete", "sha1", "source", "stt_source", "stt_status", "stt_transcript") VALUES (OLD."blocked", OLD."case_name", OLD."case_name_full", OLD."case_name_short", OLD."date_blocked", OLD."date_created", OLD."date_modified", OLD."docket_id", OLD."download_url", OLD."duration", OLD."filepath_ia", OLD."ia_upload_failure_count", OLD."id", OLD."judges", OLD."local_path_mp3", OLD."local_path_original_file", _pgh_attach_context(), NOW(), \'update_or_delete_snapshot\', OLD."id", OLD."processing_complete", OLD."sha1", OLD."source", OLD."stt_source", OLD."stt_status", OLD."stt_transcript"); RETURN NULL;',
                    hash="2556e1e50a7150a360642f05de1dc52100f5d4e7",
                    operation="DELETE",
                    pgid="pgtrigger_update_or_delete_snapshot_delete_63666",
                    table="audio_audio",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="audiotranscriptionmetadata",
            name="audio",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="audio.audio",
            ),
        ),
    ]
