# Generated by Django 5.0.8 on 2024-09-10 16:53

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        (
            "audio",
            "0009_alter_audio_stt_status_alter_audioevent_stt_status_noop",
        ),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="audio",
            name="update_or_delete_snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="audio",
            name="update_or_delete_snapshot_delete",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="audiopanel",
            name="update_or_delete_snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="audiopanel",
            name="update_or_delete_snapshot_delete",
        ),
        migrations.AlterField(
            model_name="audioevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="audio.audio",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="audio",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."blocked" IS DISTINCT FROM (NEW."blocked") OR OLD."case_name" IS DISTINCT FROM (NEW."case_name") OR OLD."case_name_full" IS DISTINCT FROM (NEW."case_name_full") OR OLD."case_name_short" IS DISTINCT FROM (NEW."case_name_short") OR OLD."date_blocked" IS DISTINCT FROM (NEW."date_blocked") OR OLD."docket_id" IS DISTINCT FROM (NEW."docket_id") OR OLD."download_url" IS DISTINCT FROM (NEW."download_url") OR OLD."duration" IS DISTINCT FROM (NEW."duration") OR OLD."filepath_ia" IS DISTINCT FROM (NEW."filepath_ia") OR OLD."ia_upload_failure_count" IS DISTINCT FROM (NEW."ia_upload_failure_count") OR OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."judges" IS DISTINCT FROM (NEW."judges") OR OLD."local_path_mp3" IS DISTINCT FROM (NEW."local_path_mp3") OR OLD."local_path_original_file" IS DISTINCT FROM (NEW."local_path_original_file") OR OLD."processing_complete" IS DISTINCT FROM (NEW."processing_complete") OR OLD."sha1" IS DISTINCT FROM (NEW."sha1") OR OLD."source" IS DISTINCT FROM (NEW."source") OR OLD."stt_source" IS DISTINCT FROM (NEW."stt_source") OR OLD."stt_status" IS DISTINCT FROM (NEW."stt_status") OR OLD."stt_transcript" IS DISTINCT FROM (NEW."stt_transcript"))',
                    func='INSERT INTO "audio_audioevent" ("blocked", "case_name", "case_name_full", "case_name_short", "date_blocked", "date_created", "date_modified", "docket_id", "download_url", "duration", "filepath_ia", "ia_upload_failure_count", "id", "judges", "local_path_mp3", "local_path_original_file", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "processing_complete", "sha1", "source", "stt_source", "stt_status", "stt_transcript") VALUES (OLD."blocked", OLD."case_name", OLD."case_name_full", OLD."case_name_short", OLD."date_blocked", OLD."date_created", OLD."date_modified", OLD."docket_id", OLD."download_url", OLD."duration", OLD."filepath_ia", OLD."ia_upload_failure_count", OLD."id", OLD."judges", OLD."local_path_mp3", OLD."local_path_original_file", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."processing_complete", OLD."sha1", OLD."source", OLD."stt_source", OLD."stt_status", OLD."stt_transcript"); RETURN NULL;',
                    hash="666831a578b79c48bc3a26d307bad268ce4e4e07",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_581d8",
                    table="audio_audio",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="audio",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "audio_audioevent" ("blocked", "case_name", "case_name_full", "case_name_short", "date_blocked", "date_created", "date_modified", "docket_id", "download_url", "duration", "filepath_ia", "ia_upload_failure_count", "id", "judges", "local_path_mp3", "local_path_original_file", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "processing_complete", "sha1", "source", "stt_source", "stt_status", "stt_transcript") VALUES (OLD."blocked", OLD."case_name", OLD."case_name_full", OLD."case_name_short", OLD."date_blocked", OLD."date_created", OLD."date_modified", OLD."docket_id", OLD."download_url", OLD."duration", OLD."filepath_ia", OLD."ia_upload_failure_count", OLD."id", OLD."judges", OLD."local_path_mp3", OLD."local_path_original_file", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."processing_complete", OLD."sha1", OLD."source", OLD."stt_source", OLD."stt_status", OLD."stt_transcript"); RETURN NULL;',
                    hash="3cd590791fb720db3c7ec3d0a8ecd7de9f7d9e84",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_15ad9",
                    table="audio_audio",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="audiopanel",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "audio_audiopanelevent" ("audio_id", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label") VALUES (NEW."audio_id", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'insert\'); RETURN NULL;',
                    hash="2f84722ed145863e5187a0488f6aad725927f1ac",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_b8778",
                    table="audio_audio_panel",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="audiopanel",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "audio_audiopanelevent" ("audio_id", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label") VALUES (OLD."audio_id", OLD."id", OLD."person_id", _pgh_attach_context(), NOW(), \'delete\'); RETURN NULL;',
                    hash="61df118b866f8dbcf1c9b4f7d90281c98aeaec4f",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_cae12",
                    table="audio_audio_panel",
                    when="AFTER",
                ),
            ),
        ),
    ]
