# Generated by Django 3.1.7 on 2021-05-28 19:36

import django.db.models.deletion
from django.db import migrations, models

import cl.lib.model_helpers
import cl.lib.storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('people_db', '0002_initial_part_two'),
        ('search', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('source', models.CharField(blank=True, choices=[('C', 'court website'), ('R', 'public.resource.org'), ('CR', 'court website merged with resource.org'), ('L', 'lawbox'), ('LC', 'lawbox merged with court'), ('LR', 'lawbox merged with resource.org'), ('LCR', 'lawbox merged with court and resource.org'), ('M', 'manual input'), ('A', 'internet archive'), ('H', 'brad heath archive'), ('Z', 'columbia archive'), ('ZC', 'columbia merged with court'), ('ZLC', 'columbia merged with lawbox and court'), ('ZLR', 'columbia merged with lawbox and resource.org'), ('ZLCR', 'columbia merged with lawbox, court, and resource.org'), ('ZR', 'columbia merged with resource.org'), ('ZCR', 'columbia merged with court and resource.org'), ('ZL', 'columbia merged with lawbox'), ('U', 'Harvard, Library Innovation Lab Case Law Access Project'), ('CU', 'court website merged with Harvard'), ('D', 'direct court input')], help_text='the source of the audio file, one of: C (court website), R (public.resource.org), CR (court website merged with resource.org), L (lawbox), LC (lawbox merged with court), LR (lawbox merged with resource.org), LCR (lawbox merged with court and resource.org), M (manual input), A (internet archive), H (brad heath archive), Z (columbia archive), ZC (columbia merged with court), ZLC (columbia merged with lawbox and court), ZLR (columbia merged with lawbox and resource.org), ZLCR (columbia merged with lawbox, court, and resource.org), ZR (columbia merged with resource.org), ZCR (columbia merged with court and resource.org), ZL (columbia merged with lawbox), U (Harvard, Library Innovation Lab Case Law Access Project), CU (court website merged with Harvard), D (direct court input)', max_length=10)),
                ('case_name_short', models.TextField(blank=True, help_text="The abridged name of the case, often a single word, e.g. 'Marsh'")),
                ('case_name', models.TextField(blank=True, help_text='The full name of the case')),
                ('case_name_full', models.TextField(blank=True, help_text='The full name of the case')),
                ('judges', models.TextField(blank=True, help_text='The judges that heard the oral arguments as a simple text string. This field is used when normalized judges cannot be placed into the panel field.', null=True)),
                ('sha1', models.CharField(db_index=True, help_text='unique ID for the document, as generated via SHA1 of the binary file or text data', max_length=40)),
                ('download_url', models.URLField(blank=True, db_index=True, help_text='The URL on the court website where the document was originally scraped', max_length=500, null=True)),
                ('local_path_mp3', models.FileField(blank=True, db_index=True, help_text='The location in AWS S3 where our enhanced copy of the original audio file is stored. Note that the field name is historical, from before when we used S3. To find the location in S3, concatenate https://storage.courtlistener.com/ and the value of this field.', storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_upload_path)),
                ('local_path_original_file', models.FileField(db_index=True, help_text='The location in AWS S3 where the original audio file downloaded from the court is stored. Note that the field name is historical, from before when we used S3. To find the location in S3, concatenate https://storage.courtlistener.com/ and the value of this field.', storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.lib.model_helpers.make_upload_path)),
                ('filepath_ia', models.CharField(blank=True, help_text='The URL of the file in IA', max_length=1000)),
                ('ia_upload_failure_count', models.SmallIntegerField(blank=True, help_text='Number of times the upload to the Internet Archive failed.', null=True)),
                ('duration', models.SmallIntegerField(help_text='the length of the item, in seconds', null=True)),
                ('processing_complete', models.BooleanField(default=False, help_text='Is audio for this item done processing?')),
                ('date_blocked', models.DateField(blank=True, db_index=True, help_text='The date that this opinion was blocked from indexing by search engines', null=True)),
                ('blocked', models.BooleanField(db_index=True, default=False, help_text='Should this item be blocked from indexing by search engines?')),
                ('stt_status', models.SmallIntegerField(choices=[(0, 'Speech to Text Needed'), (1, 'Speech to Text Complete'), (2, 'Speech to Text Failed')], default=0, help_text='The status of the Speech to Text for this item?', verbose_name='Speech to text status')),
                ('stt_google_response', models.TextField(blank=True, help_text='The JSON response object returned by Google Speech.', verbose_name='Speech to text Google response')),
                ('docket', models.ForeignKey(blank=True, help_text='The docket that the oral argument is a part of', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audio_files', to='search.docket')),
                ('panel', models.ManyToManyField(blank=True, help_text='The judges that heard the oral arguments', related_name='oral_argument_panel_members', to='people_db.Person')),
            ],
            options={
                'verbose_name_plural': 'Audio Files',
                'ordering': ['-date_created'],
            },
        ),
    ]
