# Generated by Django 3.2.16 on 2023-01-25 22:38

import cl.disclosures.models
import cl.lib.storage
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0005_events_middlewareevents'),
        ('people_db', '0014_add_event_tables_and_triggers'),
        ('disclosures', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgreementEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('date_raw', models.TextField(blank=True, help_text='Date of judicial agreement.')),
                ('parties_and_terms', models.TextField(blank=True, help_text='Parties and terms of agreement (ex. Board Member NY Ballet)')),
                ('redacted', models.BooleanField(default=False, help_text='Does the agreement row contain redaction(s)?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DebtEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('creditor_name', models.TextField(blank=True, help_text='Liability/Debt creditor')),
                ('description', models.TextField(blank=True, help_text='Description of the debt')),
                ('value_code', models.CharField(blank=True, choices=[('J', '1 - 15,000'), ('K', '15,001 - 50,000'), ('L', '50,001 - 100,000'), ('M', '100,001 - 250,000'), ('N', '250,001 - 500,000'), ('O', '500,001 - 1,000,000'), ('P1', '1,000,001 - 5,000,000'), ('P2', '5,000,001 - 25,000,000'), ('P3', '25,000,001 - 50,000,000'), ('P4', '50,000,001 - '), ('-1', 'Failed Extraction')], help_text='Form code for the value of the judicial debt.', max_length=5)),
                ('redacted', models.BooleanField(default=False, help_text='Does the debt row contain redaction(s)?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FinancialDisclosureEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('year', models.SmallIntegerField(help_text='The year that the disclosure corresponds with')),
                ('download_filepath', models.TextField(help_text='The path to the original file collected on aws. If split tiff, return url for page one of the disclosures')),
                ('filepath', models.FileField(help_text='The filepath to the disclosure normalized to a PDF.', max_length=300, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.disclosures.models.pdf_path)),
                ('thumbnail', models.FileField(blank=True, help_text='A thumbnail of the first page of the disclosure form.', max_length=300, null=True, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.disclosures.models.thumbnail_path)),
                ('thumbnail_status', models.SmallIntegerField(choices=[(0, 'Thumbnail needed'), (1, 'Thumbnail completed successfully'), (2, 'Unable to generate thumbnail')], default=0, help_text='The status of the thumbnail generation')),
                ('page_count', models.SmallIntegerField(help_text='The number of pages in the disclosure report')),
                ('sha1', models.CharField(blank=True, help_text='SHA1 hash of the generated PDF', max_length=40)),
                ('report_type', models.SmallIntegerField(choices=[(-1, 'Unknown Report'), (0, 'Nomination Report'), (1, 'Initial Report'), (2, 'Annual Report'), (3, 'Final Report')], default=-1, help_text='Financial Disclosure report type')),
                ('is_amended', models.BooleanField(default=False, help_text='Is disclosure amended?', null=True)),
                ('addendum_content_raw', models.TextField(blank=True, help_text='Raw content of addendum with whitespace preserved.')),
                ('addendum_redacted', models.BooleanField(default=False, help_text='Is the addendum partially or completely redacted?')),
                ('has_been_extracted', models.BooleanField(default=False, help_text='Have we successfully extracted the data from PDF?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GiftEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('source', models.TextField(blank=True, help_text='Source of the judicial gift. (ex. Alta Ski Area).')),
                ('description', models.TextField(blank=True, help_text='Description of the gift (ex. Season Pass).')),
                ('value', models.TextField(blank=True, help_text='Value of the judicial gift, (ex. $1,199.00)')),
                ('redacted', models.BooleanField(default=False, help_text='Does the gift row contain redaction(s)?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvestmentEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('page_number', models.IntegerField(help_text='The page number the investment is listed on.  This is used to generate links directly to the PDF page.')),
                ('description', models.TextField(blank=True, help_text='Name of investment (ex. APPL common stock).')),
                ('redacted', models.BooleanField(default=False, help_text='Does the investment row contains redaction(s)?')),
                ('income_during_reporting_period_code', models.CharField(blank=True, choices=[('A', '1 - 1,000'), ('B', '1,001 - 2,500'), ('C', '2,501 - 5,000'), ('D', '5,001 - 15,000'), ('E', '15,001 - 50,000'), ('F', '50,001 - 100,000'), ('G', '100,001 - 1,000,000'), ('H1', '1,000,001 - 5,000,000'), ('H2', '5,000,001 +'), ('-1', 'Failed Extraction')], help_text='Increase in investment value - as a form code', max_length=5)),
                ('income_during_reporting_period_type', models.TextField(blank=True, help_text='Type of investment (ex. Rent, Dividend). Typically standardized but not universally.')),
                ('gross_value_code', models.CharField(blank=True, choices=[('J', '1 - 15,000'), ('K', '15,001 - 50,000'), ('L', '50,001 - 100,000'), ('M', '100,001 - 250,000'), ('N', '250,001 - 500,000'), ('O', '500,001 - 1,000,000'), ('P1', '1,000,001 - 5,000,000'), ('P2', '5,000,001 - 25,000,000'), ('P3', '25,000,001 - 50,000,000'), ('P4', '50,000,001 - '), ('-1', 'Failed Extraction')], help_text='Investment total value code at end of reporting period as code (ex. J (1-15,000)).', max_length=5)),
                ('gross_value_method', models.CharField(blank=True, choices=[('Q', 'Appraisal'), ('R', 'Cost (Real Estate Only)'), ('S', 'Assessment'), ('T', 'Cash Market'), ('U', 'Book Value'), ('V', 'Other'), ('W', 'Estimated'), ('-1', 'Failed Extraction')], help_text='Investment valuation method code (ex. Q = Appraisal)', max_length=5)),
                ('transaction_during_reporting_period', models.TextField(blank=True, help_text='Transaction of investment during reporting period (ex. Buy, Sold)')),
                ('transaction_date_raw', models.CharField(blank=True, help_text='Date of the transaction, if any (D2)', max_length=40)),
                ('transaction_date', models.DateField(blank=True, help_text='Datetime value for if any (D2)', null=True)),
                ('transaction_value_code', models.CharField(blank=True, choices=[('J', '1 - 15,000'), ('K', '15,001 - 50,000'), ('L', '50,001 - 100,000'), ('M', '100,001 - 250,000'), ('N', '250,001 - 500,000'), ('O', '500,001 - 1,000,000'), ('P1', '1,000,001 - 5,000,000'), ('P2', '5,000,001 - 25,000,000'), ('P3', '25,000,001 - 50,000,000'), ('P4', '50,000,001 - '), ('-1', 'Failed Extraction')], help_text='Transaction value amount, as form code (ex. J (1-15,000)).', max_length=5)),
                ('transaction_gain_code', models.CharField(blank=True, choices=[('A', '1 - 1,000'), ('B', '1,001 - 2,500'), ('C', '2,501 - 5,000'), ('D', '5,001 - 15,000'), ('E', '15,001 - 50,000'), ('F', '50,001 - 100,000'), ('G', '100,001 - 1,000,000'), ('H1', '1,000,001 - 5,000,000'), ('H2', '5,000,001 +'), ('-1', 'Failed Extraction')], help_text='Gain from investment transaction if any (ex. A (1-1000)).', max_length=5)),
                ('transaction_partner', models.TextField(blank=True, help_text='Identity of the transaction partner')),
                ('has_inferred_values', models.BooleanField(default=False, help_text='If the investment name was inferred during extraction. This is common because transactions usually list the first purchase of a stock and leave the name value blank for subsequent purchases or sales.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NonInvestmentIncomeEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('date_raw', models.TextField(blank=True, help_text='Date of non-investment income (ex. 2011).')),
                ('source_type', models.TextField(blank=True, help_text='Source and type of non-investment income for the judge (ex. Teaching a class at U. Miami).')),
                ('income_amount', models.TextField(blank=True, help_text="Amount earned by judge, often a number, but sometimes with explanatory text (e.g. 'Income at firm: $xyz').")),
                ('redacted', models.BooleanField(default=False, help_text='Does the non-investment income row contain redaction(s)?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PositionEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('position', models.TextField(blank=True, help_text='Position title (ex. Trustee).')),
                ('organization_name', models.TextField(blank=True, help_text='Name of organization or entity (ex. Trust #1).')),
                ('redacted', models.BooleanField(default=False, help_text='Does the position row contain redaction(s)?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReimbursementEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('source', models.TextField(blank=True, help_text='Source of the reimbursement (ex. FSU Law School).')),
                ('date_raw', models.TextField(blank=True, help_text='Dates as a text string for the date of reimbursements. This is often conference dates (ex. June 2-6, 2011).')),
                ('location', models.TextField(blank=True, help_text='Location of the reimbursement (ex. Harvard Law School, Cambridge, MA).')),
                ('purpose', models.TextField(blank=True, help_text='Purpose of the reimbursement (ex. Baseball announcer).')),
                ('items_paid_or_provided', models.TextField(blank=True, help_text='Items reimbursed (ex. Room, Airfare).')),
                ('redacted', models.BooleanField(default=False, help_text='Does the reimbursement contain redaction(s)?')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpouseIncomeEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('source_type', models.TextField(blank=True, help_text='Source and type of income of judicial spouse (ex. Salary from Bank job).')),
                ('date_raw', models.TextField(blank=True, help_text='Date of spousal income (ex. 2011).')),
                ('redacted', models.BooleanField(default=False, help_text='Does the spousal-income row contain redaction(s)?')),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='agreement',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_agreementevent" ("date_created", "date_modified", "date_raw", "financial_disclosure_id", "id", "parties_and_terms", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted") VALUES (NEW."date_created", NEW."date_modified", NEW."date_raw", NEW."financial_disclosure_id", NEW."id", NEW."parties_and_terms", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted"); RETURN NULL;', hash='ddf2a5e6c6125219b2389db05ad2d8e3ad453ec6', operation='INSERT', pgid='pgtrigger_snapshot_insert_69a8c', table='disclosures_agreement', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='agreement',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_agreementevent" ("date_created", "date_modified", "date_raw", "financial_disclosure_id", "id", "parties_and_terms", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted") VALUES (NEW."date_created", NEW."date_modified", NEW."date_raw", NEW."financial_disclosure_id", NEW."id", NEW."parties_and_terms", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted"); RETURN NULL;', hash='eb5f1240d4920247a1ebbfea7a035de6ff58efb3', operation='UPDATE', pgid='pgtrigger_snapshot_update_e00c2', table='disclosures_agreement', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='debt',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_debtevent" ("creditor_name", "date_created", "date_modified", "description", "financial_disclosure_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "value_code") VALUES (NEW."creditor_name", NEW."date_created", NEW."date_modified", NEW."description", NEW."financial_disclosure_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."value_code"); RETURN NULL;', hash='adaf2e25fefe38d2f4f037350e5771b6c416d5c8', operation='INSERT', pgid='pgtrigger_snapshot_insert_684e3', table='disclosures_debt', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='debt',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_debtevent" ("creditor_name", "date_created", "date_modified", "description", "financial_disclosure_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "value_code") VALUES (NEW."creditor_name", NEW."date_created", NEW."date_modified", NEW."description", NEW."financial_disclosure_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."value_code"); RETURN NULL;', hash='520ba5cb808a97f1a772eb4d7ce416c8144dcb8b', operation='UPDATE', pgid='pgtrigger_snapshot_update_93edc', table='disclosures_debt', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='financialdisclosure',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_financialdisclosureevent" ("addendum_content_raw", "addendum_redacted", "date_created", "date_modified", "download_filepath", "filepath", "has_been_extracted", "id", "is_amended", "page_count", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "report_type", "sha1", "thumbnail", "thumbnail_status", "year") VALUES (NEW."addendum_content_raw", NEW."addendum_redacted", NEW."date_created", NEW."date_modified", NEW."download_filepath", NEW."filepath", NEW."has_been_extracted", NEW."id", NEW."is_amended", NEW."page_count", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."report_type", NEW."sha1", NEW."thumbnail", NEW."thumbnail_status", NEW."year"); RETURN NULL;', hash='48a0a4a007d40d5bb95743a3e427d755c8bdbf0e', operation='INSERT', pgid='pgtrigger_snapshot_insert_64c14', table='disclosures_financialdisclosure', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='financialdisclosure',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_financialdisclosureevent" ("addendum_content_raw", "addendum_redacted", "date_created", "date_modified", "download_filepath", "filepath", "has_been_extracted", "id", "is_amended", "page_count", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "report_type", "sha1", "thumbnail", "thumbnail_status", "year") VALUES (NEW."addendum_content_raw", NEW."addendum_redacted", NEW."date_created", NEW."date_modified", NEW."download_filepath", NEW."filepath", NEW."has_been_extracted", NEW."id", NEW."is_amended", NEW."page_count", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."report_type", NEW."sha1", NEW."thumbnail", NEW."thumbnail_status", NEW."year"); RETURN NULL;', hash='54800fa2be6036d203cabcd3a45e5b7a499d9a1c', operation='UPDATE', pgid='pgtrigger_snapshot_update_28e98', table='disclosures_financialdisclosure', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='gift',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_giftevent" ("date_created", "date_modified", "description", "financial_disclosure_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "source", "value") VALUES (NEW."date_created", NEW."date_modified", NEW."description", NEW."financial_disclosure_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."source", NEW."value"); RETURN NULL;', hash='01c135267a287ecb0e83703fc700d5ec035f59b3', operation='INSERT', pgid='pgtrigger_snapshot_insert_94042', table='disclosures_gift', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='gift',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_giftevent" ("date_created", "date_modified", "description", "financial_disclosure_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "source", "value") VALUES (NEW."date_created", NEW."date_modified", NEW."description", NEW."financial_disclosure_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."source", NEW."value"); RETURN NULL;', hash='8e15df8ab1bee900b1182cf44ca67b0dc7362387', operation='UPDATE', pgid='pgtrigger_snapshot_update_9e72b', table='disclosures_gift', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='investment',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_investmentevent" ("date_created", "date_modified", "description", "financial_disclosure_id", "gross_value_code", "gross_value_method", "has_inferred_values", "id", "income_during_reporting_period_code", "income_during_reporting_period_type", "page_number", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "transaction_date", "transaction_date_raw", "transaction_during_reporting_period", "transaction_gain_code", "transaction_partner", "transaction_value_code") VALUES (NEW."date_created", NEW."date_modified", NEW."description", NEW."financial_disclosure_id", NEW."gross_value_code", NEW."gross_value_method", NEW."has_inferred_values", NEW."id", NEW."income_during_reporting_period_code", NEW."income_during_reporting_period_type", NEW."page_number", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."transaction_date", NEW."transaction_date_raw", NEW."transaction_during_reporting_period", NEW."transaction_gain_code", NEW."transaction_partner", NEW."transaction_value_code"); RETURN NULL;', hash='ed475fdcf8b28ce84acaf028536b19ba73bd506b', operation='INSERT', pgid='pgtrigger_snapshot_insert_cde17', table='disclosures_investment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='investment',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_investmentevent" ("date_created", "date_modified", "description", "financial_disclosure_id", "gross_value_code", "gross_value_method", "has_inferred_values", "id", "income_during_reporting_period_code", "income_during_reporting_period_type", "page_number", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "transaction_date", "transaction_date_raw", "transaction_during_reporting_period", "transaction_gain_code", "transaction_partner", "transaction_value_code") VALUES (NEW."date_created", NEW."date_modified", NEW."description", NEW."financial_disclosure_id", NEW."gross_value_code", NEW."gross_value_method", NEW."has_inferred_values", NEW."id", NEW."income_during_reporting_period_code", NEW."income_during_reporting_period_type", NEW."page_number", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."transaction_date", NEW."transaction_date_raw", NEW."transaction_during_reporting_period", NEW."transaction_gain_code", NEW."transaction_partner", NEW."transaction_value_code"); RETURN NULL;', hash='0705491613e79218bc9d6922c3906f9c35c2d097', operation='UPDATE', pgid='pgtrigger_snapshot_update_f6320', table='disclosures_investment', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='noninvestmentincome',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_noninvestmentincomeevent" ("date_created", "date_modified", "date_raw", "financial_disclosure_id", "id", "income_amount", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "source_type") VALUES (NEW."date_created", NEW."date_modified", NEW."date_raw", NEW."financial_disclosure_id", NEW."id", NEW."income_amount", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."source_type"); RETURN NULL;', hash='12c4c6be9c10c23a862f4976b4d607f74f4f011a', operation='INSERT', pgid='pgtrigger_snapshot_insert_c76a9', table='disclosures_noninvestmentincome', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='noninvestmentincome',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_noninvestmentincomeevent" ("date_created", "date_modified", "date_raw", "financial_disclosure_id", "id", "income_amount", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "source_type") VALUES (NEW."date_created", NEW."date_modified", NEW."date_raw", NEW."financial_disclosure_id", NEW."id", NEW."income_amount", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."source_type"); RETURN NULL;', hash='3c56b051bf9c98195775f437224a297075f489bf', operation='UPDATE', pgid='pgtrigger_snapshot_update_4b46e', table='disclosures_noninvestmentincome', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='position',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_positionevent" ("date_created", "date_modified", "financial_disclosure_id", "id", "organization_name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "redacted") VALUES (NEW."date_created", NEW."date_modified", NEW."financial_disclosure_id", NEW."id", NEW."organization_name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."redacted"); RETURN NULL;', hash='bb3e5fc3baf9fc7b2c3951bb5aaddd1820c877e4', operation='INSERT', pgid='pgtrigger_snapshot_insert_c33c6', table='disclosures_position', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='position',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_positionevent" ("date_created", "date_modified", "financial_disclosure_id", "id", "organization_name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position", "redacted") VALUES (NEW."date_created", NEW."date_modified", NEW."financial_disclosure_id", NEW."id", NEW."organization_name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position", NEW."redacted"); RETURN NULL;', hash='68dbea842e77f8e8b9cc3523824cbb0d83edc3f9', operation='UPDATE', pgid='pgtrigger_snapshot_update_6dbf5', table='disclosures_position', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reimbursement',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_reimbursementevent" ("date_created", "date_modified", "date_raw", "financial_disclosure_id", "id", "items_paid_or_provided", "location", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "purpose", "redacted", "source") VALUES (NEW."date_created", NEW."date_modified", NEW."date_raw", NEW."financial_disclosure_id", NEW."id", NEW."items_paid_or_provided", NEW."location", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."purpose", NEW."redacted", NEW."source"); RETURN NULL;', hash='a63b0a100c9a76059df161b5c0b16c8da5250c84', operation='INSERT', pgid='pgtrigger_snapshot_insert_c2f93', table='disclosures_reimbursement', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reimbursement',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_reimbursementevent" ("date_created", "date_modified", "date_raw", "financial_disclosure_id", "id", "items_paid_or_provided", "location", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "purpose", "redacted", "source") VALUES (NEW."date_created", NEW."date_modified", NEW."date_raw", NEW."financial_disclosure_id", NEW."id", NEW."items_paid_or_provided", NEW."location", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."purpose", NEW."redacted", NEW."source"); RETURN NULL;', hash='2bf70ba3af70433d176910fb3a8c0b81af6e7727', operation='UPDATE', pgid='pgtrigger_snapshot_update_53701', table='disclosures_reimbursement', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='spouseincome',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "disclosures_spouseincomeevent" ("date_created", "date_modified", "date_raw", "financial_disclosure_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "source_type") VALUES (NEW."date_created", NEW."date_modified", NEW."date_raw", NEW."financial_disclosure_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."source_type"); RETURN NULL;', hash='f1b6af11a3cc15accbff7bb323442c1266df2fa5', operation='INSERT', pgid='pgtrigger_snapshot_insert_5505f', table='disclosures_spouseincome', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='spouseincome',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "disclosures_spouseincomeevent" ("date_created", "date_modified", "date_raw", "financial_disclosure_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "redacted", "source_type") VALUES (NEW."date_created", NEW."date_modified", NEW."date_raw", NEW."financial_disclosure_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."redacted", NEW."source_type"); RETURN NULL;', hash='ac13e200ed063ed9d244db68631238ce71094821', operation='UPDATE', pgid='pgtrigger_snapshot_update_37f1c', table='disclosures_spouseincome', when='AFTER')),
        ),
        migrations.AddField(
            model_name='spouseincomeevent',
            name='financial_disclosure',
            field=models.ForeignKey(db_constraint=False, help_text='The financial disclosure associated with this spouse income.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='spouseincomeevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='spouseincomeevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.spouseincome'),
        ),
        migrations.AddField(
            model_name='reimbursementevent',
            name='financial_disclosure',
            field=models.ForeignKey(db_constraint=False, help_text='The financial disclosure associated with this reimbursement.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='reimbursementevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='reimbursementevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.reimbursement'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='financial_disclosure',
            field=models.ForeignKey(db_constraint=False, help_text='The financial disclosure associated with this financial position.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.position'),
        ),
        migrations.AddField(
            model_name='noninvestmentincomeevent',
            name='financial_disclosure',
            field=models.ForeignKey(db_constraint=False, help_text='The financial disclosure associated with this non-investment income.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='noninvestmentincomeevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='noninvestmentincomeevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.noninvestmentincome'),
        ),
        migrations.AddField(
            model_name='investmentevent',
            name='financial_disclosure',
            field=models.ForeignKey(db_constraint=False, help_text='The financial disclosure associated with this investment.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='investmentevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='investmentevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.investment'),
        ),
        migrations.AddField(
            model_name='giftevent',
            name='financial_disclosure',
            field=models.ForeignKey(db_constraint=False, help_text='The financial disclosure associated with this gift.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='giftevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='giftevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.gift'),
        ),
        migrations.AddField(
            model_name='financialdisclosureevent',
            name='person',
            field=models.ForeignKey(db_constraint=False, help_text='The person that the document is associated with.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='financialdisclosureevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='financialdisclosureevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='debtevent',
            name='financial_disclosure',
            field=models.ForeignKey(db_constraint=False, help_text='The financial disclosure associated with this debt.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='debtevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='debtevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.debt'),
        ),
        migrations.AddField(
            model_name='agreementevent',
            name='financial_disclosure',
            field=models.ForeignKey(db_constraint=False, help_text='The financial disclosure associated with this agreement.', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='disclosures.financialdisclosure'),
        ),
        migrations.AddField(
            model_name='agreementevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='agreementevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='disclosures.agreement'),
        ),
    ]
