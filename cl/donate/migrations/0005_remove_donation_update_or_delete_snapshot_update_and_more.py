# Generated by Django 4.2 on 2023-05-01 05:22

from django.db import migrations
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ("donate", "0004_update_triggers"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="donation",
            name="update_or_delete_snapshot_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="monthlydonation",
            name="update_or_delete_snapshot_update",
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="donation",
            trigger=pgtrigger.compiler.Trigger(
                name="update_or_delete_snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."date_created" IS DISTINCT FROM (NEW."date_created") OR OLD."donor_id" IS DISTINCT FROM (NEW."donor_id") OR OLD."clearing_date" IS DISTINCT FROM (NEW."clearing_date") OR OLD."send_annual_reminder" IS DISTINCT FROM (NEW."send_annual_reminder") OR OLD."amount" IS DISTINCT FROM (NEW."amount") OR OLD."payment_provider" IS DISTINCT FROM (NEW."payment_provider") OR OLD."payment_id" IS DISTINCT FROM (NEW."payment_id") OR OLD."transaction_id" IS DISTINCT FROM (NEW."transaction_id") OR OLD."status" IS DISTINCT FROM (NEW."status") OR OLD."referrer" IS DISTINCT FROM (NEW."referrer"))',
                    func='INSERT INTO "donate_donationevent" ("amount", "clearing_date", "date_created", "date_modified", "donor_id", "id", "payment_id", "payment_provider", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "referrer", "send_annual_reminder", "status", "transaction_id") VALUES (OLD."amount", OLD."clearing_date", OLD."date_created", OLD."date_modified", OLD."donor_id", OLD."id", OLD."payment_id", OLD."payment_provider", _pgh_attach_context(), NOW(), \'update_or_delete_snapshot\', OLD."id", OLD."referrer", OLD."send_annual_reminder", OLD."status", OLD."transaction_id"); RETURN NULL;',
                    hash="22e95a6d14019397f36dff7ad38a56be520b0fb6",
                    operation="UPDATE",
                    pgid="pgtrigger_update_or_delete_snapshot_update_a4f64",
                    table="donate_donation",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="monthlydonation",
            trigger=pgtrigger.compiler.Trigger(
                name="update_or_delete_snapshot_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."id" IS DISTINCT FROM (NEW."id") OR OLD."date_created" IS DISTINCT FROM (NEW."date_created") OR OLD."donor_id" IS DISTINCT FROM (NEW."donor_id") OR OLD."enabled" IS DISTINCT FROM (NEW."enabled") OR OLD."payment_provider" IS DISTINCT FROM (NEW."payment_provider") OR OLD."monthly_donation_amount" IS DISTINCT FROM (NEW."monthly_donation_amount") OR OLD."monthly_donation_day" IS DISTINCT FROM (NEW."monthly_donation_day") OR OLD."stripe_customer_id" IS DISTINCT FROM (NEW."stripe_customer_id") OR OLD."failure_count" IS DISTINCT FROM (NEW."failure_count"))',
                    func='INSERT INTO "donate_monthlydonationevent" ("date_created", "date_modified", "donor_id", "enabled", "failure_count", "id", "monthly_donation_amount", "monthly_donation_day", "payment_provider", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stripe_customer_id") VALUES (OLD."date_created", OLD."date_modified", OLD."donor_id", OLD."enabled", OLD."failure_count", OLD."id", OLD."monthly_donation_amount", OLD."monthly_donation_day", OLD."payment_provider", _pgh_attach_context(), NOW(), \'update_or_delete_snapshot\', OLD."id", OLD."stripe_customer_id"); RETURN NULL;',
                    hash="8c2b5b9bee7d92d36aede241ceb08310cc28c951",
                    operation="UPDATE",
                    pgid="pgtrigger_update_or_delete_snapshot_update_e645e",
                    table="donate_monthlydonation",
                    when="AFTER",
                ),
            ),
        ),
    ]
