# Generated by Django 3.2.16 on 2023-01-25 23:15

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('pghistory', '0005_events_middlewareevents'),
        ('donate', '0002_adjust_on_delete_make_nullable'),
    ]

    operations = [
        migrations.CreateModel(
            name='DonationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('clearing_date', models.DateTimeField(blank=True, null=True)),
                ('send_annual_reminder', models.BooleanField(default=False, verbose_name='Send me a reminder to donate again in one year')),
                ('amount', models.DecimalField(decimal_places=2, default=None, max_digits=10, validators=[django.core.validators.MinValueValidator(5, 'Sorry, the minimum donation amount is $5.00.')])),
                ('payment_provider', models.CharField(choices=[('dwolla', 'Dwolla'), ('paypal', 'PayPal'), ('cc', 'Credit Card'), ('check', 'Check'), ('bitcoin', 'Bitcoin')], default=None, max_length=50)),
                ('payment_id', models.CharField(help_text='Internal ID used during a transaction (used by PayPal and Stripe).', max_length=64)),
                ('transaction_id', models.CharField(blank=True, help_text='The ID of a transaction made in PayPal.', max_length=64, null=True)),
                ('status', models.SmallIntegerField(choices=[(0, 'Awaiting Payment'), (1, 'Unknown Error'), (2, 'Completed, but awaiting processing'), (3, 'Cancelled'), (4, 'Processed'), (5, 'Pending'), (6, 'Failed'), (7, 'Reclaimed/Refunded'), (8, 'Captured'), (9, 'Disputed'), (10, 'Dispute closed')])),
                ('referrer', models.TextField(blank=True, verbose_name='GET or HTTP referrer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MonthlyDonationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('enabled', models.BooleanField(default=True, help_text='Is this monthly donation enabled?')),
                ('payment_provider', models.CharField(choices=[('dwolla', 'Dwolla'), ('paypal', 'PayPal'), ('cc', 'Credit Card'), ('check', 'Check'), ('bitcoin', 'Bitcoin')], max_length=50)),
                ('monthly_donation_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('monthly_donation_day', models.SmallIntegerField(help_text='The day of the month that the monthly donation should be processed.')),
                ('stripe_customer_id', models.CharField(help_text='The ID of the Stripe customer object that we use to charge credit card users each month.', max_length=200)),
                ('failure_count', models.SmallIntegerField(default=0, help_text='The number of times this customer ID has failed. If a threshold is exceeded, we disable the subscription.')),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='donation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "donate_donationevent" ("amount", "clearing_date", "date_created", "date_modified", "donor_id", "id", "payment_id", "payment_provider", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "referrer", "send_annual_reminder", "status", "transaction_id") VALUES (NEW."amount", NEW."clearing_date", NEW."date_created", NEW."date_modified", NEW."donor_id", NEW."id", NEW."payment_id", NEW."payment_provider", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."referrer", NEW."send_annual_reminder", NEW."status", NEW."transaction_id"); RETURN NULL;', hash='5f7aab9346564255e3c6c22dab89fdc5a8d2eeef', operation='INSERT', pgid='pgtrigger_snapshot_insert_e1095', table='donate_donation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='donation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "donate_donationevent" ("amount", "clearing_date", "date_created", "date_modified", "donor_id", "id", "payment_id", "payment_provider", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "referrer", "send_annual_reminder", "status", "transaction_id") VALUES (NEW."amount", NEW."clearing_date", NEW."date_created", NEW."date_modified", NEW."donor_id", NEW."id", NEW."payment_id", NEW."payment_provider", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."referrer", NEW."send_annual_reminder", NEW."status", NEW."transaction_id"); RETURN NULL;', hash='d4b84b83bc281dd0a772fa488c83e615d9783d0f', operation='UPDATE', pgid='pgtrigger_snapshot_update_cc68b', table='donate_donation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='monthlydonation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "donate_monthlydonationevent" ("date_created", "date_modified", "donor_id", "enabled", "failure_count", "id", "monthly_donation_amount", "monthly_donation_day", "payment_provider", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stripe_customer_id") VALUES (NEW."date_created", NEW."date_modified", NEW."donor_id", NEW."enabled", NEW."failure_count", NEW."id", NEW."monthly_donation_amount", NEW."monthly_donation_day", NEW."payment_provider", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."stripe_customer_id"); RETURN NULL;', hash='c027cc38bd102ebda5ccf9c3987567d0a1ac4b74', operation='INSERT', pgid='pgtrigger_snapshot_insert_6a386', table='donate_monthlydonation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='monthlydonation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "donate_monthlydonationevent" ("date_created", "date_modified", "donor_id", "enabled", "failure_count", "id", "monthly_donation_amount", "monthly_donation_day", "payment_provider", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "stripe_customer_id") VALUES (NEW."date_created", NEW."date_modified", NEW."donor_id", NEW."enabled", NEW."failure_count", NEW."id", NEW."monthly_donation_amount", NEW."monthly_donation_day", NEW."payment_provider", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."stripe_customer_id"); RETURN NULL;', hash='fad24c80aa472c771c3a5d643dd73003bf3e6611', operation='UPDATE', pgid='pgtrigger_snapshot_update_87937', table='donate_monthlydonation', when='AFTER')),
        ),
        migrations.AddField(
            model_name='monthlydonationevent',
            name='donor',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The user that made the donation', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='monthlydonationevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='monthlydonationevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='donate.monthlydonation'),
        ),
        migrations.AddField(
            model_name='donationevent',
            name='donor',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The user that made the donation', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='donationevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='donationevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='donate.donation'),
        ),
    ]
