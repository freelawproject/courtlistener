# Generated by Django 3.2.16 on 2023-01-27 18:00

from django.db import migrations, models
import django.db.models.deletion
import localflavor.us.models
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0005_events_middlewareevents'),
        ('search', '0011_add_event_tables_and_triggers'),
        ('people_db', '0013_remove_cl_id'),
    ]

    operations = [
        migrations.CreateModel(
            name='ABARatingEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('year_rated', models.PositiveSmallIntegerField(help_text='The year of the rating.', null=True)),
                ('rating', models.CharField(choices=[('ewq', 'Exceptionally Well Qualified'), ('wq', 'Well Qualified'), ('q', 'Qualified'), ('nq', 'Not Qualified'), ('nqa', 'Not Qualified By Reason of Age')], help_text='The rating given to the person.', max_length=5)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EducationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('degree_level', models.CharField(blank=True, choices=[('ba', "Bachelor's (e.g. B.A.)"), ('ma', "Master's (e.g. M.A.)"), ('jd', 'Juris Doctor (J.D.)'), ('llm', 'Master of Laws (LL.M)'), ('llb', 'Bachelor of Laws (e.g. LL.B)'), ('jsd', 'Doctor of Law (J.S.D)'), ('phd', 'Doctor of Philosophy (PhD)'), ('aa', 'Associate (e.g. A.A.)'), ('md', 'Medical Degree (M.D.)'), ('mba', 'Master of Business Administration (M.B.A.)'), ('cfa', 'Accounting Certification (C.P.A., C.M.A., C.F.A.)'), ('cert', 'Certificate')], help_text='Normalized degree level, e.g. BA, JD.', max_length=4)),
                ('degree_detail', models.CharField(blank=True, help_text='Detailed degree description, e.g. including major.', max_length=100)),
                ('degree_year', models.PositiveSmallIntegerField(blank=True, help_text='The year the degree was awarded.', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('date_completed', models.DateTimeField(blank=True, help_text='Whenever an editor last decided that a profile was complete in some sense.', null=True)),
                ('fjc_id', models.IntegerField(blank=True, help_text='The ID of a judge as assigned by the Federal Judicial Center.', null=True)),
                ('slug', models.SlugField(db_index=False, help_text='A generated path for this item as used in CourtListener URLs', max_length=158)),
                ('name_first', models.CharField(help_text='The first name of this person.', max_length=50)),
                ('name_middle', models.CharField(blank=True, help_text='The middle name or names of this person', max_length=50)),
                ('name_last', models.CharField(help_text='The last name of this person', max_length=50)),
                ('name_suffix', models.CharField(blank=True, choices=[('jr', 'Jr.'), ('sr', 'Sr.'), ('1', 'I'), ('2', 'II'), ('3', 'III'), ('4', 'IV')], help_text="Any suffixes that this person's name may have", max_length=5)),
                ('date_dob', models.DateField(blank=True, help_text='The date of birth for the person', null=True)),
                ('date_granularity_dob', models.CharField(blank=True, choices=[('%Y', 'Year'), ('%Y-%m', 'Month'), ('%Y-%m-%d', 'Day')], max_length=15)),
                ('date_dod', models.DateField(blank=True, help_text='The date of death for the person', null=True)),
                ('date_granularity_dod', models.CharField(blank=True, choices=[('%Y', 'Year'), ('%Y-%m', 'Month'), ('%Y-%m-%d', 'Day')], max_length=15)),
                ('dob_city', models.CharField(blank=True, help_text='The city where the person was born.', max_length=50)),
                ('dob_state', localflavor.us.models.USStateField(blank=True, help_text='The state where the person was born.', max_length=2)),
                ('dob_country', models.CharField(blank=True, default='United States', help_text='The country where the person was born.', max_length=50)),
                ('dod_city', models.CharField(blank=True, help_text='The city where the person died.', max_length=50)),
                ('dod_state', localflavor.us.models.USStateField(blank=True, help_text='The state where the person died.', max_length=2)),
                ('dod_country', models.CharField(blank=True, default='United States', help_text='The country where the person died.', max_length=50)),
                ('gender', models.CharField(blank=True, choices=[('m', 'Male'), ('f', 'Female'), ('o', 'Other')], help_text="The person's gender", max_length=2)),
                ('religion', models.CharField(blank=True, choices=[('ca', 'Catholic'), ('pr', 'Protestant'), ('je', 'Jewish'), ('mu', 'Muslim'), ('at', 'Atheist'), ('ag', 'Agnostic'), ('mo', 'Mormon'), ('bu', 'Buddhist'), ('hi', 'Hindu')], help_text='The religion of a person', max_length=30)),
                ('ftm_total_received', models.FloatField(blank=True, help_text='The amount of money received by this person and logged by Follow the Money.', null=True)),
                ('ftm_eid', models.CharField(blank=True, help_text='The ID of a judge as assigned by the Follow the Money database.', max_length=30, null=True)),
                ('has_photo', models.BooleanField(default=False, help_text='Whether there is a photo corresponding to this person in the judge pics project.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonRaceEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PoliticalAffiliationEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('political_party', models.CharField(choices=[('d', 'Democratic'), ('r', 'Republican'), ('i', 'Independent'), ('g', 'Green'), ('l', 'Libertarian'), ('f', 'Federalist'), ('w', 'Whig'), ('j', 'Jeffersonian Republican'), ('u', 'National Union'), ('z', 'Reform Party')], help_text='The political party the person is affiliated with.', max_length=5)),
                ('source', models.CharField(blank=True, choices=[('b', 'Ballot'), ('a', 'Appointer'), ('o', 'Other')], help_text='The source of the political affiliation -- where it is documented that this affiliation exists.', max_length=5)),
                ('date_start', models.DateField(blank=True, help_text='The date the political affiliation was first documented', null=True)),
                ('date_granularity_start', models.CharField(blank=True, choices=[('%Y', 'Year'), ('%Y-%m', 'Month'), ('%Y-%m-%d', 'Day')], max_length=15)),
                ('date_end', models.DateField(blank=True, help_text='The date the affiliation ended.', null=True)),
                ('date_granularity_end', models.CharField(blank=True, choices=[('%Y', 'Year'), ('%Y-%m', 'Month'), ('%Y-%m-%d', 'Day')], max_length=15)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PositionEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('position_type', models.CharField(blank=True, choices=[('Judge', (('jud', 'Judge'), ('jus', 'Justice'), ('ad-law-jud', 'Administrative Law Judge'), ('act-jud', 'Acting Judge'), ('act-jus', 'Acting Justice'), ('act-pres-jud', 'Acting Presiding Judge'), ('act-c-admin-jus', 'Acting Chief Administrative Justice'), ('ass-jud', 'Associate Judge'), ('ass-jus', 'Associate Justice'), ('ass-c-jud', 'Associate Chief Judge'), ('ass-pres-jud', 'Associate Presiding Judge'), ('asst-pres-jud', 'Assistant Presiding Judge'), ('c-jud', 'Chief Judge'), ('c-jus', 'Chief Justice'), ('c-spec-m', 'Chief Special Master'), ('c-admin-jus', 'Chief Administrative Justice'), ('pres-jud', 'Presiding Judge'), ('pres-jus', 'Presiding Justice'), ('sup-jud', 'Supervising Judge'), ('ad-pres-jus', 'Administrative Presiding Justice'), ('com', 'Commissioner'), ('com-dep', 'Deputy Commissioner'), ('jud-pt', 'Judge Pro Tem'), ('jus-pt', 'Justice Pro Tem'), ('ref-jud-tr', 'Judge Trial Referee'), ('ref-off', 'Official Referee'), ('ref-state-trial', 'State Trial Referee'), ('ret-act-jus', 'Active Retired Justice'), ('ret-ass-jud', 'Retired Associate Judge'), ('ret-c-jud', 'Retired Chief Judge'), ('ret-jus', 'Retired Justice'), ('ret-senior-jud', 'Senior Judge'), ('mag', 'Magistrate'), ('c-mag', 'Chief Magistrate'), ('pres-mag', 'Presiding Magistrate'), ('mag-pt', 'Magistrate Pro Tem'), ('mag-rc', 'Magistrate (Recalled)'), ('mag-part-time', 'Magistrate (Part-Time)'), ('spec-chair', 'Special Chairman'), ('spec-jud', 'Special Judge'), ('spec-m', 'Special Master'), ('spec-scjcbc', 'Special Superior Court Judge for Complex Business Cases'), ('chair', 'Chairman'), ('chan', 'Chancellor'), ('presi-jud', 'President'), ('res-jud', 'Reserve Judge'), ('trial-jud', 'Trial Judge'), ('vice-chan', 'Vice Chancellor'), ('vice-cj', 'Vice Chief Judge'))), ('Attorney General', (('att-gen', 'Attorney General'), ('att-gen-ass', 'Assistant Attorney General'), ('att-gen-ass-spec', 'Special Assistant Attorney General'), ('sen-counsel', 'Senior Counsel'), ('dep-sol-gen', 'Deputy Solicitor General'))), ('Appointing Authority', (('pres', 'President of the United States'), ('gov', 'Governor'), ('mayor', 'Mayor'))), ('Clerkships', (('clerk', 'Clerk'), ('clerk-chief-dep', 'Chief Deputy Clerk'), ('staff-atty', 'Staff Attorney'))), ('prof', 'Professor'), ('adj-prof', 'Adjunct Professor'), ('prac', 'Practitioner'), ('pros', 'Prosecutor'), ('pub-def', 'Public Defender'), ('da', 'District Attorney'), ('ada', 'Assistant District Attorney'), ('legis', 'Legislator'), ('sen', 'Senator'), ('state-sen', 'State Senator')], help_text='If this is a judicial position, this indicates the role the person had. This field may be blank if job_title is complete instead.', max_length=20, null=True)),
                ('job_title', models.CharField(blank=True, help_text="If title isn't in position_type, a free-text position may be entered here.", max_length=100)),
                ('sector', models.SmallIntegerField(blank=True, choices=[(1, 'Private sector'), (2, 'Public sector')], default=None, help_text='Whether the job was private or public sector.', null=True)),
                ('organization_name', models.CharField(blank=True, help_text='If the organization where this position was held is not a school or court, this is the place it was held.', max_length=120, null=True)),
                ('location_city', models.CharField(blank=True, help_text='If not a court or school, the city where person worked.', max_length=50)),
                ('location_state', localflavor.us.models.USStateField(blank=True, help_text='If not a court or school, the state where person worked.', max_length=2)),
                ('date_nominated', models.DateField(blank=True, help_text='The date recorded in the Senate Executive Journal when a federal judge was nominated for their position or the date a state judge nominated by the legislature. When a nomination is by primary election, this is the date of the election. When a nomination is from a merit commission, this is the date the nomination was announced.', null=True)),
                ('date_elected', models.DateField(blank=True, help_text='Judges are elected in most states. This is the date of theirfirst election. This field will be null if the judge was initially selected by nomination.', null=True)),
                ('date_recess_appointment', models.DateField(blank=True, help_text='If a judge was appointed while congress was in recess, this is the date of that appointment.', null=True)),
                ('date_referred_to_judicial_committee', models.DateField(blank=True, help_text='Federal judges are usually referred to the Judicial Committee before being nominated. This is the date of that referral.', null=True)),
                ('date_judicial_committee_action', models.DateField(blank=True, help_text='The date that the Judicial Committee took action on the referral.', null=True)),
                ('judicial_committee_action', models.CharField(blank=True, choices=[('no_rep', 'Not Reported'), ('rep_w_rec', 'Reported with Recommendation'), ('rep_wo_rec', 'Reported without Recommendation'), ('rec_postpone', 'Recommendation Postponed'), ('rec_bad', 'Recommended Unfavorably')], help_text='The action that the judicial committee took in response to a nomination', max_length=20)),
                ('date_hearing', models.DateField(blank=True, help_text='After being nominated, a judge is usually subject to a hearing. This is the date of that hearing.', null=True)),
                ('date_confirmation', models.DateField(blank=True, help_text='After the hearing the senate will vote on judges. This is the date of that vote.', null=True)),
                ('date_start', models.DateField(blank=True, help_text='The date the position starts active duty.', null=True)),
                ('date_granularity_start', models.CharField(blank=True, choices=[('%Y', 'Year'), ('%Y-%m', 'Month'), ('%Y-%m-%d', 'Day')], max_length=15)),
                ('date_termination', models.DateField(blank=True, help_text='The last date of their employment. The compliment to date_start', null=True)),
                ('termination_reason', models.CharField(blank=True, choices=[('ded', 'Death'), ('retire_vol', 'Voluntary Retirement'), ('retire_mand', 'Mandatory Retirement'), ('resign', 'Resigned'), ('other_pos', 'Appointed to Other Judgeship'), ('lost', 'Lost Election'), ('abolished', 'Court Abolished'), ('bad_judge', 'Impeached and Convicted'), ('recess_not_confirmed', 'Recess Appointment Not Confirmed'), ('termed_out', 'Term Limit Reached')], help_text='The reason for a termination', max_length=25)),
                ('date_granularity_termination', models.CharField(blank=True, choices=[('%Y', 'Year'), ('%Y-%m', 'Month'), ('%Y-%m-%d', 'Day')], max_length=15)),
                ('date_retirement', models.DateField(blank=True, help_text='The date when they become a senior judge by going into active retirement', null=True)),
                ('nomination_process', models.CharField(blank=True, choices=[('fed_senate', 'U.S. Senate'), ('state_senate', 'State Senate'), ('election', 'Primary Election'), ('merit_comm', 'Merit Commission')], help_text='The process by which a person was nominated into this position.', max_length=20)),
                ('vote_type', models.CharField(blank=True, choices=[('s', 'Senate'), ('p', 'Partisan Election'), ('np', 'Non-Partisan Election')], help_text='The type of vote that resulted in this position.', max_length=2)),
                ('voice_vote', models.BooleanField(blank=True, help_text='Whether the Senate voted by voice vote for this position.', null=True)),
                ('votes_yes', models.PositiveIntegerField(blank=True, help_text='If votes are an integer, this is the number of votes in favor of a position.', null=True)),
                ('votes_no', models.PositiveIntegerField(blank=True, help_text='If votes are an integer, this is the number of votes opposed to a position.', null=True)),
                ('votes_yes_percent', models.FloatField(blank=True, help_text='If votes are a percentage, this is the percentage of votes in favor of a position.', null=True)),
                ('votes_no_percent', models.FloatField(blank=True, help_text='If votes are a percentage, this is the percentage of votes opposed to a position.', null=True)),
                ('how_selected', models.CharField(blank=True, choices=[('Election', (('e_part', 'Partisan Election'), ('e_non_part', 'Non-Partisan Election'))), ('Appointment', (('a_pres', 'Appointment (President)'), ('a_gov', 'Appointment (Governor)'), ('a_legis', 'Appointment (Legislature)'), ('a_judge', 'Appointment (Judge)'))), ('Other', (('ct_trans', 'Transferred (Court Restructuring)'),))], help_text='The method that was used for selecting this judge for this position (generally an election or appointment).', max_length=20)),
                ('has_inferred_values', models.BooleanField(default=False, help_text='Some or all of the values for this position were inferred from a data source instead of manually added. See sources field for more details.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RaceEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('race', models.CharField(choices=[('w', 'White'), ('b', 'Black or African American'), ('i', 'American Indian or Alaska Native'), ('a', 'Asian'), ('p', 'Native Hawaiian or Other Pacific Islander'), ('mena', 'Middle Eastern/North African'), ('h', 'Hispanic/Latino'), ('o', 'Other')], max_length=5)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RetentionEventEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('retention_type', models.CharField(choices=[('reapp_gov', 'Governor Reappointment'), ('reapp_leg', 'Legislative Reappointment'), ('elec_p', 'Partisan Election'), ('elec_n', 'Nonpartisan Election'), ('elec_u', 'Uncontested Election')], help_text='The method through which this position was retained.', max_length=10)),
                ('date_retention', models.DateField(help_text='The date of retention')),
                ('votes_yes', models.PositiveIntegerField(blank=True, help_text='If votes are an integer, this is the number of votes in favor of a position.', null=True)),
                ('votes_no', models.PositiveIntegerField(blank=True, help_text='If votes are an integer, this is the number of votes opposed to a position.', null=True)),
                ('votes_yes_percent', models.FloatField(blank=True, help_text='If votes are a percentage, this is the percentage of votes in favor of a position.', null=True)),
                ('votes_no_percent', models.FloatField(blank=True, help_text='If votes are a percentage, this is the percentage of votes opposed to a position.', null=True)),
                ('unopposed', models.BooleanField(blank=True, help_text='Whether the position was unopposed at the time of retention.', null=True)),
                ('won', models.BooleanField(blank=True, help_text='Whether the retention event was won.', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SchoolEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('name', models.CharField(help_text='The name of the school or alias', max_length=120)),
                ('ein', models.IntegerField(blank=True, help_text='The EIN assigned by the IRS', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('url', models.URLField(blank=True, help_text='The URL where this data was gathered.', max_length=2000)),
                ('date_accessed', models.DateField(blank=True, help_text='The date the data was gathered.', null=True)),
                ('notes', models.TextField(blank=True, help_text="Any additional notes about the data's provenance, in Markdown format.")),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonRace',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('people_db.person_race',),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='abarating',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_abaratingevent" ("date_created", "date_modified", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rating", "year_rated") VALUES (NEW."date_created", NEW."date_modified", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."rating", NEW."year_rated"); RETURN NULL;', hash='38afbd91cac2db46932d6d07aaed7d9803567549', operation='INSERT', pgid='pgtrigger_snapshot_insert_26a9a', table='people_db_abarating', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='abarating',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_abaratingevent" ("date_created", "date_modified", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "rating", "year_rated") VALUES (NEW."date_created", NEW."date_modified", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."rating", NEW."year_rated"); RETURN NULL;', hash='e0e91c8cc51f3f412a9971507acd01a7d5d90f6c', operation='UPDATE', pgid='pgtrigger_snapshot_update_1a35c', table='people_db_abarating', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='education',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_educationevent" ("date_created", "date_modified", "degree_detail", "degree_level", "degree_year", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "school_id") VALUES (NEW."date_created", NEW."date_modified", NEW."degree_detail", NEW."degree_level", NEW."degree_year", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."school_id"); RETURN NULL;', hash='6e3022272457672198047ac63eb5d671f1160900', operation='INSERT', pgid='pgtrigger_snapshot_insert_3f5b7', table='people_db_education', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='education',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_educationevent" ("date_created", "date_modified", "degree_detail", "degree_level", "degree_year", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "school_id") VALUES (NEW."date_created", NEW."date_modified", NEW."degree_detail", NEW."degree_level", NEW."degree_year", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."school_id"); RETURN NULL;', hash='22f1584d1eec3549d15b0715d2057512982bfce1', operation='UPDATE', pgid='pgtrigger_snapshot_update_342ab', table='people_db_education', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='person',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_personevent" ("date_completed", "date_created", "date_dob", "date_dod", "date_granularity_dob", "date_granularity_dod", "date_modified", "dob_city", "dob_country", "dob_state", "dod_city", "dod_country", "dod_state", "fjc_id", "ftm_eid", "ftm_total_received", "gender", "has_photo", "id", "is_alias_of_id", "name_first", "name_last", "name_middle", "name_suffix", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "religion", "slug") VALUES (NEW."date_completed", NEW."date_created", NEW."date_dob", NEW."date_dod", NEW."date_granularity_dob", NEW."date_granularity_dod", NEW."date_modified", NEW."dob_city", NEW."dob_country", NEW."dob_state", NEW."dod_city", NEW."dod_country", NEW."dod_state", NEW."fjc_id", NEW."ftm_eid", NEW."ftm_total_received", NEW."gender", NEW."has_photo", NEW."id", NEW."is_alias_of_id", NEW."name_first", NEW."name_last", NEW."name_middle", NEW."name_suffix", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."religion", NEW."slug"); RETURN NULL;', hash='3399a8b70fe203fa4328293647e4cb5d8d046c02', operation='INSERT', pgid='pgtrigger_snapshot_insert_271f6', table='people_db_person', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='person',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_personevent" ("date_completed", "date_created", "date_dob", "date_dod", "date_granularity_dob", "date_granularity_dod", "date_modified", "dob_city", "dob_country", "dob_state", "dod_city", "dod_country", "dod_state", "fjc_id", "ftm_eid", "ftm_total_received", "gender", "has_photo", "id", "is_alias_of_id", "name_first", "name_last", "name_middle", "name_suffix", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "religion", "slug") VALUES (NEW."date_completed", NEW."date_created", NEW."date_dob", NEW."date_dod", NEW."date_granularity_dob", NEW."date_granularity_dod", NEW."date_modified", NEW."dob_city", NEW."dob_country", NEW."dob_state", NEW."dod_city", NEW."dod_country", NEW."dod_state", NEW."fjc_id", NEW."ftm_eid", NEW."ftm_total_received", NEW."gender", NEW."has_photo", NEW."id", NEW."is_alias_of_id", NEW."name_first", NEW."name_last", NEW."name_middle", NEW."name_suffix", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."religion", NEW."slug"); RETURN NULL;', hash='b1bb72d9f029f496b7d0ee3d0f3b04cda0901f15', operation='UPDATE', pgid='pgtrigger_snapshot_update_11bc7', table='people_db_person', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='politicalaffiliation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_politicalaffiliationevent" ("date_created", "date_end", "date_granularity_end", "date_granularity_start", "date_modified", "date_start", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "political_party", "source") VALUES (NEW."date_created", NEW."date_end", NEW."date_granularity_end", NEW."date_granularity_start", NEW."date_modified", NEW."date_start", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."political_party", NEW."source"); RETURN NULL;', hash='2040550f71235de89f74925766dad68f0d993ff9', operation='INSERT', pgid='pgtrigger_snapshot_insert_ab32e', table='people_db_politicalaffiliation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='politicalaffiliation',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_politicalaffiliationevent" ("date_created", "date_end", "date_granularity_end", "date_granularity_start", "date_modified", "date_start", "id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "political_party", "source") VALUES (NEW."date_created", NEW."date_end", NEW."date_granularity_end", NEW."date_granularity_start", NEW."date_modified", NEW."date_start", NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."political_party", NEW."source"); RETURN NULL;', hash='b8cabbf2261daf14201773211bf8a8ed006795a0', operation='UPDATE', pgid='pgtrigger_snapshot_update_6f60c', table='people_db_politicalaffiliation', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='position',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_positionevent" ("appointer_id", "court_id", "date_confirmation", "date_created", "date_elected", "date_granularity_start", "date_granularity_termination", "date_hearing", "date_judicial_committee_action", "date_modified", "date_nominated", "date_recess_appointment", "date_referred_to_judicial_committee", "date_retirement", "date_start", "date_termination", "has_inferred_values", "how_selected", "id", "job_title", "judicial_committee_action", "location_city", "location_state", "nomination_process", "organization_name", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position_type", "predecessor_id", "school_id", "sector", "supervisor_id", "termination_reason", "voice_vote", "vote_type", "votes_no", "votes_no_percent", "votes_yes", "votes_yes_percent") VALUES (NEW."appointer_id", NEW."court_id", NEW."date_confirmation", NEW."date_created", NEW."date_elected", NEW."date_granularity_start", NEW."date_granularity_termination", NEW."date_hearing", NEW."date_judicial_committee_action", NEW."date_modified", NEW."date_nominated", NEW."date_recess_appointment", NEW."date_referred_to_judicial_committee", NEW."date_retirement", NEW."date_start", NEW."date_termination", NEW."has_inferred_values", NEW."how_selected", NEW."id", NEW."job_title", NEW."judicial_committee_action", NEW."location_city", NEW."location_state", NEW."nomination_process", NEW."organization_name", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position_type", NEW."predecessor_id", NEW."school_id", NEW."sector", NEW."supervisor_id", NEW."termination_reason", NEW."voice_vote", NEW."vote_type", NEW."votes_no", NEW."votes_no_percent", NEW."votes_yes", NEW."votes_yes_percent"); RETURN NULL;', hash='1d52228d6e0ab49de5953ffaf0f2f0675a5f05fb', operation='INSERT', pgid='pgtrigger_snapshot_insert_b594d', table='people_db_position', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='position',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_positionevent" ("appointer_id", "court_id", "date_confirmation", "date_created", "date_elected", "date_granularity_start", "date_granularity_termination", "date_hearing", "date_judicial_committee_action", "date_modified", "date_nominated", "date_recess_appointment", "date_referred_to_judicial_committee", "date_retirement", "date_start", "date_termination", "has_inferred_values", "how_selected", "id", "job_title", "judicial_committee_action", "location_city", "location_state", "nomination_process", "organization_name", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position_type", "predecessor_id", "school_id", "sector", "supervisor_id", "termination_reason", "voice_vote", "vote_type", "votes_no", "votes_no_percent", "votes_yes", "votes_yes_percent") VALUES (NEW."appointer_id", NEW."court_id", NEW."date_confirmation", NEW."date_created", NEW."date_elected", NEW."date_granularity_start", NEW."date_granularity_termination", NEW."date_hearing", NEW."date_judicial_committee_action", NEW."date_modified", NEW."date_nominated", NEW."date_recess_appointment", NEW."date_referred_to_judicial_committee", NEW."date_retirement", NEW."date_start", NEW."date_termination", NEW."has_inferred_values", NEW."how_selected", NEW."id", NEW."job_title", NEW."judicial_committee_action", NEW."location_city", NEW."location_state", NEW."nomination_process", NEW."organization_name", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position_type", NEW."predecessor_id", NEW."school_id", NEW."sector", NEW."supervisor_id", NEW."termination_reason", NEW."voice_vote", NEW."vote_type", NEW."votes_no", NEW."votes_no_percent", NEW."votes_yes", NEW."votes_yes_percent"); RETURN NULL;', hash='f62cbd62f81f9750b2bea507e2949ce0a489178b', operation='UPDATE', pgid='pgtrigger_snapshot_update_d5203', table='people_db_position', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='race',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_raceevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "race") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."race"); RETURN NULL;', hash='8a4663070ba5ff0667cc164dd946060fab9ba608', operation='INSERT', pgid='pgtrigger_snapshot_insert_36b13', table='people_db_race', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='race',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_raceevent" ("id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "race") VALUES (NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."race"); RETURN NULL;', hash='0bf94b32fec5e43b310d4fae1921b08c69b36372', operation='UPDATE', pgid='pgtrigger_snapshot_update_901ca', table='people_db_race', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='retentionevent',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_retentioneventevent" ("date_created", "date_modified", "date_retention", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position_id", "retention_type", "unopposed", "votes_no", "votes_no_percent", "votes_yes", "votes_yes_percent", "won") VALUES (NEW."date_created", NEW."date_modified", NEW."date_retention", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position_id", NEW."retention_type", NEW."unopposed", NEW."votes_no", NEW."votes_no_percent", NEW."votes_yes", NEW."votes_yes_percent", NEW."won"); RETURN NULL;', hash='a6db6bcc5bb0336b5e82cf88d19cc2f51a766ea9', operation='INSERT', pgid='pgtrigger_snapshot_insert_123d1', table='people_db_retentionevent', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='retentionevent',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_retentioneventevent" ("date_created", "date_modified", "date_retention", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position_id", "retention_type", "unopposed", "votes_no", "votes_no_percent", "votes_yes", "votes_yes_percent", "won") VALUES (NEW."date_created", NEW."date_modified", NEW."date_retention", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."position_id", NEW."retention_type", NEW."unopposed", NEW."votes_no", NEW."votes_no_percent", NEW."votes_yes", NEW."votes_yes_percent", NEW."won"); RETURN NULL;', hash='e2438569e360c33bc29399e1305e06d439594cc2', operation='UPDATE', pgid='pgtrigger_snapshot_update_21cad', table='people_db_retentionevent', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='school',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_schoolevent" ("date_created", "date_modified", "ein", "id", "is_alias_of_id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."date_created", NEW."date_modified", NEW."ein", NEW."id", NEW."is_alias_of_id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='a426fb7533491b4154a1b497916f19beb621fdca', operation='INSERT', pgid='pgtrigger_snapshot_insert_79a6c', table='people_db_school', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='school',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_schoolevent" ("date_created", "date_modified", "ein", "id", "is_alias_of_id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."date_created", NEW."date_modified", NEW."ein", NEW."id", NEW."is_alias_of_id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='3259b91d858cdd9473b46427c388f7a082570ad9', operation='UPDATE', pgid='pgtrigger_snapshot_update_d61c7', table='people_db_school', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='source',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_sourceevent" ("date_accessed", "date_created", "date_modified", "id", "notes", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "url") VALUES (NEW."date_accessed", NEW."date_created", NEW."date_modified", NEW."id", NEW."notes", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."url"); RETURN NULL;', hash='dce08f4538b1598dee760074979b61e3e08056b5', operation='INSERT', pgid='pgtrigger_snapshot_insert_c86e5', table='people_db_source', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='source',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_sourceevent" ("date_accessed", "date_created", "date_modified", "id", "notes", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "url") VALUES (NEW."date_accessed", NEW."date_created", NEW."date_modified", NEW."id", NEW."notes", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."url"); RETURN NULL;', hash='f8a4312c845687e821d9f82dbf72c52e833433b1', operation='UPDATE', pgid='pgtrigger_snapshot_update_6b08f', table='people_db_source', when='AFTER')),
        ),
        migrations.AddField(
            model_name='sourceevent',
            name='person',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='sourceevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='sourceevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.source'),
        ),
        migrations.AddField(
            model_name='schoolevent',
            name='is_alias_of',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Any alternate names that a school may have', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.school'),
        ),
        migrations.AddField(
            model_name='schoolevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='schoolevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.school'),
        ),
        migrations.AddField(
            model_name='retentioneventevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='retentioneventevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.retentionevent'),
        ),
        migrations.AddField(
            model_name='retentioneventevent',
            name='position',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The position that was retained by this event.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.position'),
        ),
        migrations.AddField(
            model_name='raceevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='raceevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.race'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='appointer',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='If this is an appointed position, the person-position responsible for the appointment. This field references other positions instead of referencing people because that allows you to know the position a person held when an appointment was made.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.position'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='court',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='If this was a judicial position, this is the jurisdiction where it was held.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.court'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='person',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The person that held the position.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.position'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='predecessor',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The person that previously held this position', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='school',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='If this was an academic job, this is the school where the person worked.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.school'),
        ),
        migrations.AddField(
            model_name='positionevent',
            name='supervisor',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='If this is a clerkship, the supervising judge.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='politicalaffiliationevent',
            name='person',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The person with the political affiliation', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='politicalaffiliationevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='politicalaffiliationevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.politicalaffiliation'),
        ),
        migrations.AddField(
            model_name='personraceevent',
            name='person',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='personraceevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='personraceevent',
            name='race',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.race'),
        ),
        migrations.AddField(
            model_name='personevent',
            name='is_alias_of',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='Any nicknames or other aliases that a person has. For example, William Jefferson Clinton has an alias to Bill', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='personevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='personevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='educationevent',
            name='person',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The person that completed this education', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='educationevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='educationevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.education'),
        ),
        migrations.AddField(
            model_name='educationevent',
            name='school',
            field=models.ForeignKey(db_constraint=False, help_text='The school where this education was completed', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.school'),
        ),
        migrations.AddField(
            model_name='abaratingevent',
            name='person',
            field=models.ForeignKey(blank=True, db_constraint=False, help_text='The person rated by the American Bar Association', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='people_db.person'),
        ),
        migrations.AddField(
            model_name='abaratingevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='abaratingevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='people_db.abarating'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='personrace',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "people_db_personraceevent" ("id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "race_id") VALUES (NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."race_id"); RETURN NULL;', hash='b416d0145735d42c05a78c8340e3fc58f97791a1', operation='INSERT', pgid='pgtrigger_snapshot_insert_3bcce', table='people_db_person_race', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='personrace',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "people_db_personraceevent" ("id", "person_id", "pgh_context_id", "pgh_created_at", "pgh_label", "race_id") VALUES (NEW."id", NEW."person_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."race_id"); RETURN NULL;', hash='496584b9aebfd67b12c361533769f1833e376511', operation='UPDATE', pgid='pgtrigger_snapshot_update_134c2', table='people_db_person_race', when='AFTER')),
        ),
    ]
