# QUESTIONS/COMMENTS
# 1. Why do we have dates as strings and as dates? Can't we just not store them as
#    dates? I nuked all of these.
# 2. Model names are singular even though that's weird. They're classes.
# 3. No magic numbers (as in the managers)
# 4. I added verbose_name and verbose_name_plural meta values
# 5. Todo: Check all char/text fields and see if they have or should not have
#    blank=True. Related: If these fields need/have null=True, they usually
#    need blank=True as well.

# coding=utf-8
import hashlib
import json

from django.db import models
from django.contrib.contenttypes.fields import GenericForeignKey, \
    GenericRelation
from django.contrib.contenttypes.models import ContentType
from django.utils.encoding import force_bytes

from cl.lib.models import AbstractJSON, AbstractPDF, AbstractFile


class UPLOAD_TYPE:
    DOCKET = 1
    NAMES = (
        (DOCKET, 'JSON Docket'),
    )


class LASCJSON(AbstractJSON, AbstractFile):
    """Store the original JSON content from LASC's API.

    Keep the original data in case we ever need to reparse it.
    """
    upload_type = models.SmallIntegerField(
        help_text="The type of JSON file that is uploaded",
        choices=UPLOAD_TYPE.NAMES,
    )
    sha1 = models.CharField(
        help_text="SHA1 hash of case data. Generated by hashing a copy of the "
                  "JSON with whitespace removed.",
        max_length=128,
    )

    class Meta:
        verbose_name = 'LASC JSON File'

    def save(self, *args, **kwargs):
        # Always generate a fresh hash when the file is saved, nuking
        # whitespace.
        with open(self.filepath.path, 'r') as f:
            j = json.load(f)
        j_data = j.dumps(separators=(',', ':'))
        self.sha1 = hashlib.sha1(force_bytes(j_data)).hexdigest()
        super(LASCJSON, self).save(*args, **kwargs)


class LASCPDF(AbstractPDF):
    """Use the content framework to associate PDFs with our dockets
    """
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey()

    class Meta:
        verbose_name = 'LASC PDF'


class QueuedCase(models.Model):
    """Cases we have yet to fetch

    This table is populated by crawling the date search interface.
    """

    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified",
        auto_now=True,
        db_index=True,
    )
    internal_case_id = models.CharField(
        help_text="Internal case ID. Typically a combination of the docket "
                  "number, district, and division code.",
        max_length=300,
        db_index=True,
        blank=True,
    )
    # These fields are only available in the date search results, so we save
    # them here, and eventually populate them in the Docket table.
    judge_code = models.CharField(
        help_text="Internal judge code assigned to the case. First letter of "
                  "judge's last name, and then four digits.",
        max_length=10,
        null=True,
        blank=True,
    )
    case_type_code = models.CharField(
        help_text="A code representing the type of case (similar to the "
                  "federal nature of suit code in PACER). E.g. '1601' "
                  "represents 'Fraud (no contract) (General Jurisdiction)'.",
        max_length=10,
        null=True,
    )


class QueuedPDF(models.Model):
    """PDFs we have yet to download."""

    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified",
        auto_now=True,
        db_index=True,
    )
    internal_case_id = models.CharField(
        help_text="Internal case ID. Typically a combination of the docket "
                  "number, district, and division code.",
        max_length=300,
        db_index=True,
        blank=True,
    )
    document_id = models.CharField(
        help_text="Internal Document Id",
        max_length=40,
        db_index=True,
        blank=True,
    )

    @property
    def document_url(self):
        return '/'.join(["https://media.lacourt.org/api/AzureApi",
                        self.internal_case_id,
                        self.document_id])


class Docket(models.Model):
    """High-level table to contain all other LASC-related data"""
    json_document = GenericRelation(
        LASCJSON,
        help_text="JSON files associated with this docket.",
        related_name='dockets',
        null=True,
        blank=True,
    )
    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified",
        auto_now=True,
        db_index=True,
    )
    date_checked = models.DateTimeField(
        help_text="Datetime case was last pulled or checked from LASC",
        null=True,
        blank=True,
        db_index=True,
    )
    date_filed = models.DateField(
        help_text="The date the case was filed",
        null=True,
        blank=True,
    )
    date_disposition = models.DateField(
        help_text="The date the case was disposed by the court",
        null=True,
        blank=True,
    )
    docket_number = models.CharField(
        help_text="Docket number for the case. E.g. 19LBCV00507, "
                  "19STCV28994, or even 30-2017-00900866-CU-AS-CJC.",
        max_length=300,
        db_index=True,
        blank=True,
    )
    district = models.CharField(
        help_text="District is a 2-3 character code representing court "
                  "locations; For Example BUR means Burbank",
        max_length=10,
        blank=True,
    )
    division_code = models.CharField(
        help_text="Division. E.g. civil (CV), civil probate (CP), etc.",
        max_length=10,
        blank=True,
    )
    disposition_type = models.TextField(
        help_text="Disposition type",
        null=True,
        blank=True
    )
    disposition_type_code = models.TextField(
        help_text="Disposition type code",
        null=True,
        blank=True,
    )
    case_type_str = models.TextField(
        help_text="Case type description",
        blank=True,
    )
    case_type_code = models.CharField(
        help_text="Case type code",
        max_length=10,
        null=True,
    )
    case_name = models.TextField(
        help_text="The name of the case",
        blank=True,
    )
    judge_code = models.CharField(
        help_text="Internal judge code assigned to the case",
        max_length=10,
        null=True,
        blank=True,
    )
    judge_name = models.TextField(
        help_text="The judge that the case was assigned to",
        null=True,
        blank=True,
    )
    courthouse_name = models.TextField(
        help_text="The courthouse name",
        blank=True,
    )
    # Why isn't this a date field?
    date_status = models.TextField(
        help_text="Date status was updated",
        null=True,
        blank=True,
    )
    status_code = models.TextField(
        help_text="Court status code associated with current status",
        null=True,
        blank=True,
    )
    status_str = models.TextField(
        help_text="The status of the case",
        null=True,
        blank=True,
    )

    class Meta:
        index_together = ('docket_number', 'district', 'division_code')

    @property
    def case_id(self):
        return ';'.join([self.docket_number, self.district,
                         self.division_code])


class DocumentImage(models.Model):
    """XXX we need a description here..."""

    """
        # caseNumber
        # pageCount
        # IsPurchaseable
        # createDateString
        # documentType
        # "docFilingDateString": "06/07/2019",
        # "documentURL": "",
        # "createDate": "2019-06-07T00:00:00-07:00",
        # "IsInCart": false,
        # "OdysseyID": "",
        # "IsDownloadable": true,
        # "documentTypeID": "",
        # "docId": "1769824611",
        # "description": "Answer",
        # "volume": "",
        # "appId": "",
        # "IsViewable": true,
        # "securityLevel": 0,
        # "IsEmailable": false,
        # "imageTypeId": 3,
        # "IsPurchased": true,
        # "docFilingDate": "2019-06-07T00:00:00-07:00",
        # "docPart":
    """

    docket = models.ForeignKey(
        Docket,
        related_name='document_images',
        on_delete=models.CASCADE,
    )
    pdf_document = GenericRelation(
        LASCPDF,
        help_text="PDF document.",
        related_name='document_images',
        null=True,
    )
    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified.",
        auto_now=True,
        db_index=True,
    )
    date_filed = models.DateField(
        help_text="The date the document was filed in the system",
    )
    # Is this a duplicate of date_created?
    date_create = models.DateTimeField(
        help_text="The date the document was created in the system",
    )
    page_count = models.IntegerField(
        help_text="Page count for this document",
    )
    # XXX Could use an example in the help_text here.
    document_type = models.TextField(
        help_text="Type of document code",
        null=True,
        blank=True,
    )
    # XXX Can this be moved to a @property?
    document_url = models.TextField(
        help_text="The document URL in MAP",
    )
    # Maybe an example here?
    image_type_id = models.TextField(
        help_text="Image type ID",
    )
    app_id = models.TextField(
        help_text="ID for filing application, if any.",
    )
    doc_id = models.TextField(
        help_text="Internal document ID",
    )
    # Duplicate of document_type, above?
    document_type_id = models.TextField(
        help_text="Document Type ID",
    )
    # No help_text?
    odyssey_id = models.TextField(
        null=True,
        blank=True,
    )
    # This stores whether the item is available in CL, ie, whether we have it?
    # If so, the convention is is_available for this field.
    is_downloadable = models.BooleanField(
        help_text="Is the document downloadable by Courtlistener as a BOOL",
        # XXX I'm not sure I like this default. Let's discuss.
        default=True,
    )
    # Hm, now I don't know what is_downloadable was for.
    downloaded = models.BooleanField(
        help_text="Has the document been downloaded as a BOOL",
        default=False,
    )
    security_level = models.TextField(
        help_text="Document security level",
        null=True,
        blank=True,
    )
    description = models.TextField(
        help_text="Document description",
        null=True,
        blank=True,
    )
    # XXX What's this mean?
    volume = models.TextField(
        help_text="Document volume",
        null=True,
        blank=True,
    )
    # XXX What's this mean?
    doc_part = models.TextField(
        help_text="Document Part",
        null=True,
        blank=True,
    )


class DocumentFiled(models.Model):
    """XXX Need a description here."""

    """
    # "CaseNumber": "18STCV02953",
    # "Memo": null,
    # "DateFiled": "2019-06-07T00:00:00-07:00",
    # "DateFiledString": "06/07/2019",
    # "Party": "Angel Ortiz Hernandez (Defendant)",
    # "Document": "Answer"]
    """
    docket = models.ForeignKey(
        Docket,
        related_name='documents_filed',
        on_delete=models.CASCADE,
    )
    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified.",
        auto_now=True,
        db_index=True,
    )
    date_filed = models.DateTimeField(
        help_text="Date a document was filed",
    )
    # XXX Do they call this the memo publicly? If not, we usually call this the
    # 'description'.
    memo = models.TextField(
        help_text="Memo describing document filed",
        null=True,
        blank=True,
    )
    # XXX Any point trying to normalize this to the party table?
    party = models.TextField(
        help_text="Filing party for the document",
        null=True,
        blank=True,
    )
    # XXX The field name doesn't seem to match the help_text here, maybe?
    document = models.TextField(
        help_text="Document type",
        null=True,
        blank=True,
    )

    class Meta:
        verbose_name_plural = 'Documents Filed'


class RegisterOfActions(models.Model):

    """
        # "IsPurchaseable": false,
        # "Description": "Answer",
        # "PageCount": -1,
        # "AdditionalInformation": "<ul><li>Party: Angel Ortiz Hernandez (Defendant)</li></ul>",
        # "RegisterOfActionDateString": "06/07/2019",
        # "IsPurchased": false,
        # "FilenetID": "",
        # "IsEmailable": false,
        # "IsViewable": false,
        # "OdysseyID": "",
        # "IsInCart": false,
        # "RegisterOfActionDate": "2019-06-07T00:00:00-07:00",
        # "IsDownloadable": false
    """

    docket = models.ForeignKey(
        Docket,
        related_name='registers_of_action',
        on_delete=models.CASCADE,
    )
    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified.",
        auto_now=True,
        db_index=True,
    )
    date_register_of_action = models.DateTimeField(
        help_text="Date of the action entry",
    )
    description = models.TextField(
        help_text="Short description of the document",
    )
    additional_information = models.TextField(
        help_text="Additional information stored as HTML",
    )

    class Meta:
        verbose_name = "Register of Action Entry"
        verbose_name_plural = "Register of Action Entries"


class CrossReference(models.Model):
    """Relations between cases.

    Unfortunately, these cannot be normalized b/c XXX
    """
    """
    cross_reference_date_string: "11/08/2001"
    cross_reference_date : 2001-11-07T23:00:00-08:00
    cross_reference_case_number: 37-2011-0095551-
    cross_reference_type_description:  Coordinated Case(s)
    """

    docket = models.ForeignKey(
        Docket,
        related_name='cross_references',
        on_delete=models.CASCADE,
    )
    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified.",
        auto_now=True,
        db_index=True,
    )
    date_cross_reference = models.DateTimeField(
        help_text="Cross reference date",
        null=True,
    )
    cross_reference_docket_number = models.TextField(
        help_text="Cross reference docket number",
        null=True,
    )
    cross_reference_type = models.TextField(
        help_text="A description of the type of cross reference",
        null=True,
    )


class Party(models.Model):

    """
    # "EntityNumber": "3",
    # "PartyFlag": "L",
    # "DateOfBirthString": "",
    # "CaseNumber": "18STCV02953",
    # "District": "",
    # "CRSPartyCode": null,
    # "DateOfBirth": "0001-01-01T00:00:00-08:00",
    # "AttorneyFirm": "",
    # "CivasCXCNumber": "",
    # "AttorneyName": "",
    # "PartyDescription": "Defendant",
    # "DivisionCode": "CV",
    # "PartyTypeCode": "D",
    # "Name": "HERNANDEZ ANGEL ORTIZ AKA ANGEL HERNANDEZ"

    """

    docket = models.ForeignKey(
        Docket,
        related_name='parties',
        on_delete=models.CASCADE,
    )
    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified.",
        auto_now=True,
        db_index=True,
    )
    attorney_name = models.TextField(
        help_text="Attorney name",
    )
    attorney_firm = models.TextField(
        help_text="Attorney firm",
    )
    entity_number = models.TextField(
        help_text="Order entity/party joined cases system",
    )
    party_flag = models.TextField(
        help_text="Court code representing party",
    )
    party_type_code = models.TextField(
        help_text="Court code representing party position",
    )
    party_description = models.TextField(
        help_text="Description of the party",
    )
    # XXX Isn't this the party_name field?
    name = models.TextField(
        help_text="Full name of the party",
    )

    class Meta:
        verbose_name_plural = "Parties"


class TIME_CHOICES:
    PAST = 1
    FUTURE = 2
    NAMES = (
        (PAST, "Proceedings in the past"),
        (FUTURE, "Proceedings in the future"),
    )


class PastProceedingManager(models.Manager):
    def get_queryset(self):
        super_queryset = super(PastProceedingManager, self).get_queryset()
        return super_queryset.filter(past_or_future=TIME_CHOICES.PAST)


class FutureProceedingManager(models.Manager):
    def get_queryset(self):
        super_qs = super(FutureProceedingManager, self).get_queryset()
        return super_qs.filter(past_or_future=TIME_CHOICES.FUTURE)


class Proceeding(models.Model):
    docket = models.ForeignKey(
        Docket,
        related_name='proceedings',
        on_delete=models.CASCADE,
    )
    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified.",
        auto_now=True,
        db_index=True,
    )
    past_or_future = models.SmallIntegerField(
        help_text="Is this event in the past or future?",
        choices=TIME_CHOICES.NAMES,
        null=True,
        blank=True,
    )
    date_proceeding = models.TextField(
        help_text="Date of the past proceeding",
    )
    # XXX Do we need am/pm, proceeding_time, and date_proceeding? This seems weird?
    am_pm = models.TextField(
        help_text="Was the proceeding in the AM or PM",
    )
    proceeding_time = models.TextField(
        help_text="Time of the past proceeding in HH:MM string",
    )
    # XXX Again, should this be a description field instead?
    memo = models.TextField(
        help_text="Memo about the past proceeding",
    )
    address = models.TextField(
        help_text="Address of the past proceeding",  # XXX Here and elsewhere: "Past"?
    )
    proceeding_room = models.TextField(
        help_text="The court room of the past proceeding",
    )
    result = models.TextField(
        help_text="Result of the past proceeding",
    )
    judge_name = models.TextField(
        help_text="Judge in the past proceeding",
    )
    courthouse_name = models.TextField(
        help_text="Courthouse name for the past proceeding",
    )
    division_code = models.TextField(
        help_text="Courthouse division. E.g. CV = Civil}",
    )
    event = models.TextField(
        help_text='Event that occurred. E.g. "Jury Trial"',
    )

    past_objects = PastProceedingManager()
    future_objects = FutureProceedingManager()


class TentativeRuling(models.Model):
    """
    Sample data taken from random cases.

    "CaseNumber": "VC065473",
    "HearingDate": "2019-07-11T00:00:00-07:00",
    "LocationID": "SE ",
    "Ruling": "SUPER LONG HTML"
    "Department": "SEC",
    "CreationDateString": "07/10/2019",
    "CreationDate": "2019-07-10T14:51:33-07:00",
    "HearingDateString": "07/11/2019"
    """
    docket = models.ForeignKey(
        Docket,
        related_name='tentative_rulings',
        on_delete=models.CASCADE,
    )
    date_created = models.DateTimeField(
        help_text="The time when this item was created",
        auto_now_add=True,
        db_index=True,
    )
    date_modified = models.DateTimeField(
        help_text="The last moment when the item was modified.",
        auto_now=True,
        db_index=True,
    )
    date_creation = models.DateTimeField(
        help_text="Date the ruling was decided",
    )
    date_hearing = models.DateTimeField(
        help_text="",
    )
    location_id = models.TextField(
        help_text="Internal court code for location",
    )
    department = models.TextField(
        help_text="Internal court code for department",
    )
    ruling = models.TextField(
        help_text="The court ruling as HTML",
    )

