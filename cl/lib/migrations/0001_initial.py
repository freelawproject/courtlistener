# -*- coding: utf-8 -*-
# Generated by Django 1.11.22 on 2019-08-19 18:28
from __future__ import unicode_literals

import cl.lib.model_helpers
import cl.lib.models
import cl.lib.storage
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='LASCJSON',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text=b'The date the file was imported to Local Storage.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text=b'Timestamp of last update.')),
                ('filepath_local', models.FileField(blank=True, db_index=True, help_text=b'The path of the file in the local storage area.', max_length=1000, storage=cl.lib.storage.UUIDFileSystemStorage(), upload_to=cl.lib.models.make_json_data_path)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LASCPDF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text=b'The date the file was imported to Local Storage.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text=b'Timestamp of last update.')),
                ('sha1', models.CharField(blank=True, help_text=b'The ID used for a document in RECAP', max_length=40)),
                ('page_count', models.IntegerField(blank=True, help_text=b'The number of pages in the document, if known', null=True)),
                ('file_size', models.IntegerField(blank=True, help_text=b'The size of the file in bytes, if known', null=True)),
                ('filepath_local', models.FileField(blank=True, db_index=True, help_text=b'The path of the file in the local storage area.', max_length=1000, storage=cl.lib.storage.IncrementingFileSystemStorage(), upload_to=cl.lib.models.make_pdf_path)),
                ('filepath', models.FileField(blank=True, help_text=b'The path of the original json file.', max_length=1000, storage=cl.lib.storage.UUIDFileSystemStorage(), upload_to=cl.lib.models.make_pdf_path)),
                ('filepath_ia', models.CharField(blank=True, help_text=b'The URL of the file in IA', max_length=1000)),
                ('ia_upload_failure_count', models.SmallIntegerField(blank=True, help_text=b'Number of times the upload to the Internet Archive failed.', null=True)),
                ('thumbnail', models.FileField(blank=True, help_text=b'A thumbnail of the first page of the document', null=True, storage=cl.lib.storage.IncrementingFileSystemStorage(), upload_to=cl.lib.model_helpers.make_pdf_thumb_path)),
                ('thumbnail_status', models.SmallIntegerField(choices=[(0, b'Thumbnail needed'), (1, b'Thumbnail completed successfully'), (2, b'Unable to generate thumbnail')], default=0, help_text=b'The status of the thumbnail generation')),
                ('plain_text', models.TextField(blank=True, help_text=b'Plain text of the document after extraction using pdftotext, wpd2txt, etc.')),
                ('ocr_status', models.SmallIntegerField(blank=True, choices=[(1, b'OCR Complete'), (2, b'OCR Not Necessary'), (3, b'OCR Failed'), (4, b'OCR Needed')], help_text=b'The status of OCR processing on this item.', null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
