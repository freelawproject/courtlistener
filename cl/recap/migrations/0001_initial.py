# Generated by Django 3.1.7 on 2021-05-28 19:34

from django.db import migrations, models

import cl.lib.storage
import cl.recap.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EmailProcessingQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('filepath', models.FileField(help_text='The S3 filepath to the email and receipt stored as JSON text.', max_length=300, null=True, storage=cl.lib.storage.IncrementingAWSMediaStorage(), upload_to=cl.recap.models.make_recap_email_processing_queue_aws_path)),
                ('status', models.SmallIntegerField(choices=[(1, 'Awaiting processing in queue.'), (2, 'Item processed successfully.'), (3, 'Item encountered an error while processing.'), (4, 'Item is currently being processed.'), (5, 'Item failed processing, but will be retried.'), (6, 'Item failed validity tests.'), (7, 'There was insufficient metadata to complete the task.')], db_index=True, default=1, help_text='The current status of this upload. Possible values are: (1): Awaiting processing in queue., (2): Item processed successfully., (3): Item encountered an error while processing., (4): Item is currently being processed., (5): Item failed processing, but will be retried., (6): Item failed validity tests., (7): There was insufficient metadata to complete the task.')),
                ('status_message', models.TextField(blank=True, help_text='Any errors that occurred while processing an item')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FjcIntegratedDatabase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('dataset_source', models.SmallIntegerField(choices=[(1, 'Civil cases filed and terminated from SY 1970 through SY 1987'), (2, 'Civil cases filed, terminated, and pending from SY 1988 to present (2017)'), (8, 'Civil cases filed, terminated, and pending from SY 1988 to present (2020)'), (3, 'Criminal defendants filed and terminated from SY 1970 through FY 1995'), (4, 'Criminal defendants filed, terminated, and pending from FY 1996 to present (2017)'), (5, 'Appellate cases filed and terminated from SY 1971 through FY 2007'), (6, 'Appellate cases filed, terminated, and pending from FY 2008 to present (2017)'), (7, 'Bankruptcy cases filed, terminated, and pending from FY 2008 to present (2017)')], help_text='IDB has several source datafiles. This field helps keep track of where a row came from originally.')),
                ('office', models.CharField(blank=True, help_text='The code that designates the office within the district where the case is filed. Must conform with format established in Volume XI, Guide to Judiciary Policies and Procedures, Appendix A. See: https://free.law/idb-facts/', max_length=3)),
                ('docket_number', models.CharField(blank=True, help_text="The number assigned by the Clerks' office; consists of 2 digit Docket Year (usually calendar year in which the case was filed) and 5 digit sequence number.", max_length=7)),
                ('origin', models.SmallIntegerField(blank=True, choices=[(1, 'Original Proceeding'), (2, 'Removed  (began in the state court, removed to the district court)'), (3, 'Remanded for further action (removal from court of appeals)'), (4, 'Reinstated/reopened (previously opened and closed, reopened for additional action)'), (5, 'Transferred from another district(pursuant to 28 USC 1404)'), (6, 'Multi district litigation (cases transferred to this district by an order entered by Judicial Panel on Multi District Litigation pursuant to 28 USC 1407)'), (7, "Appeal to a district judge of a magistrate judge's decision"), (8, 'Second reopen'), (9, 'Third reopen'), (10, 'Fourth reopen'), (11, 'Fifth reopen'), (12, 'Sixth reopen'), (13, 'Multi district litigation originating in the district (valid beginning July 1, 2016)')], help_text='A single digit code describing the manner in which the case was filed in the district.', null=True)),
                ('date_filed', models.DateField(blank=True, db_index=True, help_text='The date on which the case was filed in the district.', null=True)),
                ('jurisdiction', models.SmallIntegerField(blank=True, choices=[(1, 'Government plaintiff'), (2, 'Government defendant'), (3, 'Federal question'), (4, 'Diversity of citizenship'), (5, 'Local question')], help_text='The code which provides the basis for the U.S. district court jurisdiction in the case. This code is used in conjunction with appropriate nature of suit code.', null=True)),
                ('nature_of_suit', models.IntegerField(blank=True, choices=[(110, '110 Insurance'), (120, '120 Marine contract actions'), (130, '130 Miller act'), (140, '140 Negotiable instruments'), (150, '150 Overpayments & enforcement of judgments'), (151, '151 Overpayments under the medicare act'), (152, '152 Recovery of defaulted student loans'), (153, '153 Recovery of overpayments of vet benefits'), (160, "160 Stockholder's suits"), (190, '190 Other contract actions'), (195, '195 Contract product liability'), (196, '196 Contract franchise'), (210, '210 Land condemnation'), (220, '220 Foreclosure'), (230, '230 Rent, lease, ejectment'), (240, '240 Torts to land'), (245, '245 Tort product liability'), (290, '290 Other real property actions'), (310, '310 Airplane personal injury'), (315, '315 Airplane product liability'), (320, '320 Assault, libel, and slander'), (330, "330 Federal employers' liability"), (340, '340 Marine personal injury'), (345, '345 Marine - Product liability'), (350, '350 Motor vehicle personal injury'), (355, '355 Motor vehicle product liability'), (360, '360 Other personal liability'), (362, '362 Medical malpractice'), (365, '365 Personal injury - Product liability'), (367, '367 Health care / pharm'), (368, '368 Asbestos personal injury - Prod. Liab.'), (370, '370 Other fraud'), (371, '371 Truth in lending'), (375, '375 False Claims Act'), (380, '380 Other personal property damage'), (385, '385 Property damage - Product liability'), (400, '400 State re-appointment'), (410, '410 Antitrust'), (422, '422 Bankruptcy appeals rule 28 USC 158'), (423, '423 Bankruptcy withdrawal 28 USC 157'), (430, '430 Banks and banking'), (440, '440 Civil rights other'), (441, '441 Civil rights voting'), (442, '442 Civil rights jobs'), (443, '443 Civil rights accomodations'), (444, '444 Civil rights welfare'), (445, '445 Civil rights ADA employment'), (446, '446 Civil rights ADA other'), (448, '448 Education'), (450, '450 Interstate commerce'), (460, '460 Deportation'), (462, '462 Naturalization, petition for hearing of denial'), (463, '463 Habeas corpus - alien detainee'), (465, '465 Other immigration actions'), (470, '470 Civil (RICO)'), (480, '480 Consumer credit'), (490, '490 Cable/Satellite TV'), (510, '510 Prisoner petitions - vacate sentence'), (530, '530 Prisoner petitions - habeas corpus'), (535, '535 Habeas corpus: Death penalty'), (540, '540 Prisoner petitions - mandamus and other'), (550, '550 Prisoner - civil rights'), (555, '555 Prisoner - prison condition'), (560, '560 Civil detainee'), (610, '610 Agricultural acts'), (620, '620 Food and drug acts'), (625, '625 Drug related seizure of property'), (630, '630 Liquor laws'), (640, '640 Railroad and trucks'), (650, '650 Airline regulations'), (660, '660 Occupational safety/health'), (690, '690 Other forfeiture and penalty suits'), (710, '710 Fair Labor Standards Act'), (720, '720 Labor/Management Relations Act'), (730, '730 Labor/Management report & disclosure'), (740, '740 Railway Labor Act'), (751, '751 Family and Medical Leave Act'), (790, '790 Other labor litigation'), (791, '791 Employee Retirement Income Security Act'), (810, '810 Selective service'), (820, '820 Copyright'), (830, '830 Patent'), (840, '840 Trademark'), (850, '850 Securities, Commodities, Exchange'), (860, '860 Social security'), (861, '861 HIA (1395 FF) / Medicare'), (862, '862 Black lung'), (863, '863 D.I.W.C. / D.I.W.W.'), (864, '864 S.S.I.D.'), (865, '865 R.S.I.'), (870, '870 Tax suits'), (871, '871 IRS 3rd party suits 26 USC 7609'), (875, '875 Customer challenge 12 USC 3410'), (890, '890 Other statutory actions'), (891, '891 Agricultural acts'), (892, '892 Economic Stabilization Act'), (893, '893 Environmental matters'), (894, '894 Energy Allocation Act'), (895, '895 Freedom of Information Act of 1974'), (896, '896 Arbitration'), (899, '899 Administrative procedure act / review or appeal of agency decision'), (900, '900 Appeal of fee - equal access to justice'), (910, '910 Domestic relations'), (920, '920 Insanity'), (930, '930 Probate'), (940, '940 Substitute trustee'), (950, '950 Constitutionality of state statutes'), (990, '990 Other'), (992, '992 Local jurisdictional appeal'), (999, '999 Miscellaneous')], help_text='A three digit statistical code representing the nature of suit of the action filed.', null=True)),
                ('title', models.TextField(blank=True, db_index=True, help_text='No description provided by FJC.')),
                ('section', models.CharField(blank=True, db_index=True, help_text='No description provided by FJC.', max_length=200)),
                ('subsection', models.CharField(blank=True, db_index=True, help_text='No description provided by FJC.', max_length=200)),
                ('diversity_of_residence', models.SmallIntegerField(blank=True, help_text='Involves diversity of citizenship for the plaintiff and defendant. First position is the citizenship of the plaintiff, second position is the citizenship of the defendant. Only used when jurisdiction is 4', null=True)),
                ('class_action', models.BooleanField(help_text='Involves an allegation by the plaintiff that the complaint meets the prerequisites of a "Class Action" as provided in Rule 23 - F.R.CV.P. ', null=True)),
                ('monetary_demand', models.IntegerField(blank=True, help_text='The monetary amount sought by plaintiff (in thousands). Amounts less than $500 appear as 1, and amounts over $10k appear as 9999. See notes in codebook.', null=True)),
                ('county_of_residence', models.IntegerField(blank=True, help_text='The code for the county of residence of the first listed plaintiff (see notes in codebook). Appears to use FIPS code.', null=True)),
                ('arbitration_at_filing', models.CharField(blank=True, choices=[('M', 'Mandatory'), ('V', 'Voluntary'), ('E', 'Exempt'), ('Y', 'Yes, but type unknown')], help_text='This field is used only by the courts  participating in the Formal Arbitration Program.  It is not used for any other purpose.', max_length=1)),
                ('arbitration_at_termination', models.CharField(blank=True, choices=[('M', 'Mandatory'), ('V', 'Voluntary'), ('E', 'Exempt'), ('Y', 'Yes, but type unknown')], help_text='Termination arbitration code.', max_length=1)),
                ('multidistrict_litigation_docket_number', models.TextField(blank=True, help_text='A 4 digit multi district litigation docket number.')),
                ('plaintiff', models.TextField(blank=True, db_index=True, help_text='First listed plaintiff. This field appears to be cut off at 30 characters')),
                ('defendant', models.TextField(blank=True, db_index=True, help_text='First listed defendant. This field appears to be cut off at 30 characters.')),
                ('date_transfer', models.DateField(blank=True, help_text='The date when the papers were received in the receiving district for a transferred  case.', null=True)),
                ('transfer_office', models.CharField(blank=True, help_text='The office number of the district losing the case.', max_length=3)),
                ('transfer_docket_number', models.TextField(blank=True, help_text='The docket number of the case in the losing district')),
                ('transfer_origin', models.TextField(blank=True, help_text='The origin number of the case in the losing district')),
                ('date_terminated', models.DateField(blank=True, help_text='The date the district court received the final judgment or the order disposing of the case.', null=True)),
                ('termination_class_action_status', models.SmallIntegerField(blank=True, choices=[(2, 'Denied'), (3, 'Granted')], help_text='A code that indicates a case involving allegations of class action.', null=True)),
                ('procedural_progress', models.SmallIntegerField(blank=True, choices=[('Before issue joined', ((1, 'No court action (before issue joined)'), (2, 'Order entered'), (11, 'Hearing held'), (12, 'Order decided'))), ('After issue joined', ((3, 'No court action (after issue joined)'), (4, 'Judgment on motion'), (5, 'Pretrial conference held'), (6, 'During court trial'), (7, 'During jury trial'), (8, 'After court trial'), (9, 'After jury trial'), (10, 'Other'), (13, 'Request for trial de novo after arbitration')))], help_text='The point to which the case had progressed when it was disposed of. See notes in codebook.', null=True)),
                ('disposition', models.SmallIntegerField(blank=True, choices=[('Cases transferred or remanded', ((0, 'Transfer to another district'), (1, 'Remanded to state court'), (10, 'Multi-district litigation transfer'), (11, 'Remanded to U.S. agency'))), ('Dismissals', ((2, 'Want of prosecution'), (3, 'Lack of jurisdiction'), (12, 'Voluntarily dismissed'), (13, 'Settled'), (14, 'Other'))), ('Judgment on', ((4, 'Default'), (5, 'Consent'), (6, 'Motion before trial'), (7, 'Jury verdict'), (8, 'Directed verdict'), (9, 'Court trial'), (15, 'Award of arbitrator'), (16, 'Stayed pending bankruptcy'), (17, 'Other'), (18, 'Statistical closing'), (19, 'Appeal affirmed (magistrate judge)'), (20, 'Appeal denied (magistrate judge')))], help_text='The manner in which the case was disposed of.', null=True)),
                ('nature_of_judgement', models.SmallIntegerField(blank=True, choices=[(0, 'No monetary award'), (1, 'Monetary award only'), (2, 'Monetary award and other'), (3, 'Injunction'), (4, 'Forfeiture/foreclosure/condemnation, etc.'), (5, 'Costs only'), (6, 'Costs and attorney fees')], help_text='Cases disposed of by an entry of a final judgment.', null=True)),
                ('amount_received', models.IntegerField(blank=True, help_text='Dollar amount received (in thousands) when appropriate. Field not used uniformally; see codebook.', null=True)),
                ('judgment', models.SmallIntegerField(blank=True, choices=[(1, 'Plaintiff'), (2, 'Defendant'), (3, 'Both plaintiff and defendant'), (4, 'Unknown')], help_text='Which party the cases was disposed in favor of.', null=True)),
                ('pro_se', models.SmallIntegerField(blank=True, choices=[(0, 'No pro se plaintiffs or defendants'), (1, 'Pro se plaintiffs, but no pro se defendants'), (2, 'Pro se defendants, but no pro se plaintiffs'), (3, 'Both pro se plaintiffs & defendants')], help_text='Which parties filed pro se? (See codebook for more details.)', null=True)),
                ('year_of_tape', models.IntegerField(blank=True, help_text='Statistical year label on data files obtained from the Administrative Office of the United States Courts.  2099 on pending case records.', null=True)),
                ('nature_of_offense', models.CharField(blank=True, choices=[('0100', 'Murder, First Degree'), ('0101', 'Murder, Government Officials'), ('0200', 'Murder, Second Degree'), ('0201', 'Murder, 2nd Degree, Government Officials'), ('0300', 'Manslaughter'), ('0301', 'Manslaughter'), ('0310', 'Negligent Homicide'), ('0311', 'Negligent Homicide, Government Officials'), ('1100', 'Robbery, Bank'), ('1200', 'Robbery, Postal'), ('1400', 'Robbery, Other'), ('1500', 'Aggravated or Felonious'), ('1501', 'Felony, on Government Official'), ('1560', 'Fair Housing Law'), ('1600', 'Assault, Other'), ('1601', 'Misdemeanor, on Government Official'), ('1602', 'Obstruction of Justice-Interference'), ('1700', 'Racketeering, Violent Crime'), ('1800', 'Carjacking'), ('2100', 'Burglary, Bank'), ('2200', 'Burglary, Postal'), ('2300', 'Interstate Commerce'), ('2400', 'Burglary, Other'), ('3100', 'Larceny & Theft, Bank'), ('3200', 'Larceny & Theft, Postal'), ('3300', 'Interstate Commerce'), ('3400', 'Theft of U.S. Property'), ('3500', 'Theft within Special Maritime Jurisdiction'), ('3600', 'Transportation of Stolen Property'), ('3700', 'Larceny & Theft, Felony Other'), ('3800', 'Larceny & Theft, Misdemeanor Other'), ('4100', 'Bank Embezzlement'), ('4200', 'Postal Embezzlement'), ('4310', 'Embezzles Public Moneys Or Property'), ('4320', 'Lending, Credit, Insurance Institutions'), ('4330', 'By Officers Of A Carrier'), ('4340', 'World War Veterans Relief'), ('4350', 'Embezzlement: Officer or Employee of U.S. Govt.'), ('4390', 'Embezzlement, Other'), ('4510', 'Income Tax, Evade or Defeat'), ('4520', 'Income Tax, Other Felony'), ('4530', 'Income Tax, Failure to File'), ('4540', 'Income Tax, Other Misdemeanor'), ('4600', 'Lending, Credit Institutions'), ('4601', 'Bank Fraud'), ('4700', 'Postal, Interstate Wire, Radio, etc.'), ('4800', 'Veterans and Allotments'), ('4900', 'Bankruptcy'), ('4910', 'Marketing Agreements & Commodity Credit'), ('4920', 'Securities & Exchange'), ('4931', 'Fraud, Excise Tax, Other'), ('4932', 'Fraud, Wagering Tax, Other'), ('4933', 'Fraud, Other Tax'), ('4940', 'Railroad Retirement & Unemployment'), ('4941', 'Fraud Food Stamp Program'), ('4950', 'Social Security'), ('4960', 'False Personation'), ('4970', 'Nationality Laws'), ('4980', 'Passport Fraud'), ('4991', 'False Claims & Statements'), ('4992', 'Fraud, Conspiracy to Defraud, Other'), ('4993', 'Fraud, Conspiracy (General), Other'), ('4994', 'Fraud, False Entries, Other'), ('4995', 'Credit Card Fraud'), ('4996', 'Computer Fraud'), ('4997', 'Telemarketing Fraud'), ('4998', 'Health Care Fraud'), ('4999', 'Fraud, Other'), ('5100', 'Transport etc. Stolen Vehicles, Aircraft'), ('5200', 'Auto Theft, Other'), ('5500', 'Transport, Forged Securities'), ('5600', 'Forgery, Postal'), ('5710', 'Forgery, Other U. S.'), ('5720', 'Forgery, Other'), ('5800', 'Counterfeiting'), ('5900', 'Sexually Explicit Material'), ('6100', 'Sexual Abuse of Adult'), ('6110', 'Sexual Abuse of Children'), ('6120', 'Interstate Domestic Violence'), ('6121', 'Violent Offenses, Other'), ('6200', 'White Slave & Importing Aliens'), ('6300', 'Sex Offenses, Other'), ('6301', 'Transportation for Illegal Sexual Activity'), ('6400', 'Failure to Register'), ('6500', 'Narc. Marijuana Tax Act (Terms/Reopens)'), ('6501', 'Marijuana-Sell, Distribute, or Dispense'), ('6502', 'Marijuana-Importation/Exportation'), ('6503', 'Marijuana-Manufacture'), ('6504', 'Marijuana-Possession'), ('6505', "Marijuana-Records, Rx's, Fraudulent Rx"), ('6600', 'Narc. Border Registration (Terms/Reopens)'), ('6700', 'Narcotics, Other (Terms/Reopens)'), ('6701', 'Narcotics-Sell, Distribute, or Dispense'), ('6702', 'Narcotics-Importation/Exportation'), ('6703', 'Narcotics-Manufacture'), ('6704', 'Narcotics-Possession'), ('6705', "Narcotics-Records, Rx'S, Fraudulent Rx's"), ('6706', 'Narcotics, Other (Terms/Reopens)'), ('6707', 'Narcotics, Other (Terms/Reopens)'), ('6800', 'Continuing Criminal Enterprise'), ('6801', 'Controlled Substance-Sell, Distribute, or Dispense'), ('6802', 'Controlled Substance-Importation/Exportation'), ('6803', 'Controlled Substance-Manufacture'), ('6804', 'Controlled Substance-Possession'), ('6805', "Control Substance-Records, Rx's, Fraudulent Rx's"), ('6806', 'Drug Cultivation'), ('6807', 'Illicit Drug Profits'), ('6808', 'Controlled Substances Aboard Aircraft'), ('6809', 'Mail Order Drug Paraphernalia'), ('6810', 'Under Influence Alcohol/Drugs'), ('6900', 'Polluting Federal Lands-Controlled Substance'), ('6905', 'Other Drug Offenses'), ('6907', 'Illicit Drug Profits'), ('6909', 'Mail Order Drug Paraphernalia'), ('6911', 'Other DAPCA Offenses'), ('7100', 'Bribery'), ('7130', 'Conflict of Interest-Mining'), ('7131', 'Conflict of Interest-Health/Welfare'), ('7210', 'Traffic Offenses, Drunken Driving'), ('7220', 'Traffic Offenses, Other'), ('7310', 'Escape'), ('7311', 'Escape, Jumping Bail'), ('7312', 'Escape, Bail Reform Act of 1966'), ('7313', 'Escape from Custody'), ('7314', 'Criminal Default'), ('7320', 'Escape, Aiding or Harboring'), ('7330', 'Prison Contraband'), ('7331', 'Fraud, Other'), ('7400', 'Extortion, Racketeering, & Threats'), ('7401', 'Threats Against The President'), ('7410', 'Racketeering, Arson'), ('7420', 'Racketeering, Bribery'), ('7430', 'Racketeering, Extortion'), ('7440', 'Racketeering, Gambling'), ('7450', 'Racketeering, Liquor'), ('7460', 'Racketeering, Narcotics'), ('7470', 'Racketeering, Prostitution'), ('7471', 'Racketeering, Murder'), ('7472', 'Racketeering, Kidnap'), ('7473', 'Racketeering, Maim'), ('7474', 'Conspiracy, Murder, Kidnap'), ('7475', 'Attempt, Conspire/Maim, Assault'), ('7477', 'Monetary Laundering'), ('7478', 'Murder, First Degree'), ('7480', 'Racketeering'), ('7481', 'Racketeering, Robbery'), ('7482', 'Racketeering, Threats'), ('7490', 'Racketeering, Extortion Credit Transaction'), ('7500', 'Gambling & Lottery'), ('7520', 'Gambling & Lottery, Travel/Racketeering'), ('7530', 'Gambling & Lottery, Transmit Wager Info.'), ('7600', 'Kidnapping (18:1201,1202)'), ('7601', 'Kidnapping, Govt Officials'), ('7610', 'Kidnapping (18:13)'), ('7611', 'Kidnap, Hostage'), ('7700', 'Perjury'), ('7800', 'Firearms & Weapons'), ('7820', 'Firearms, Unlawful Possession'), ('7830', 'Firearms'), ('7831', 'Furtherance of Violence'), ('7910', 'Arson'), ('7920', 'Abortion'), ('7930', 'Bigamy'), ('7940', 'Malicious Destruction of Property'), ('7941', 'Other, Property'), ('7950', 'Disorderly Conduct'), ('7961', 'Travel to Incite to Riot'), ('7962', 'Civil Disorder'), ('7990', 'Misc. General Offenses, Other'), ('7991', 'Juvenile Delinquency'), ('8100', 'Failure to Pay Child Support'), ('8200', 'False Claims and Services, Government'), ('8201', 'Identification Documents and Information Fraud'), ('8500', 'Mail Fraud'), ('8600', 'Wire, Radio, or Television Fraud'), ('8710', 'Immigration Laws, Illegal Entry'), ('8720', 'Immigration Laws, Illegal Re-Entry'), ('8730', 'Immigration Laws, Other'), ('8731', 'Fraud And Misuse of Visa/Permits'), ('8740', 'Immigration Laws, Illegal Entry'), ('8750', 'Immigration Laws, Fraudulent Citizenship'), ('8900', 'Liquor, Internal Revenue'), ('8901', 'Fraud, Other Tax'), ('9001', 'Hazardous Waste-Treatment/Disposal/Store'), ('9110', 'Agriculture Acts'), ('9115', 'Agriculture Acts'), ('9120', 'Agriculture, Federal Seed Act'), ('9130', 'Game Conservation Acts'), ('9140', 'Agriculture, Insecticide Act'), ('9150', 'National Park/Recreation Violations'), ('9160', 'Agriculture, Packers & Stockyard Act'), ('9170', 'Agriculture, Plant Quarantine'), ('9180', 'Agriculture, Handling Animals, Research'), ('9200', 'Antitrust Violations'), ('9300', 'Fair Labor Standards Act'), ('9400', 'Food & Drug Act'), ('9500', 'Migratory Bird Laws'), ('9600', 'Motor Carrier Act'), ('9710', 'National Defense, Selective Service Acts'), ('9720', 'National Defense, Illegal Use of Uniform'), ('9730', 'National Defense, Defense Production Act'), ('9731', 'Economic Stabilization Act of 1970-Price'), ('9732', 'Economic Stabilization Act of 1970-Rents'), ('9733', 'Economic Stabilization Act of 1970-Wages'), ('9740', 'Alien Registration'), ('9741', 'Energy Facility'), ('9751', 'Treason'), ('9752', 'Espionage'), ('9753', 'Sabotage'), ('9754', 'Sedition'), ('9755', 'Smith Act'), ('9760', 'Curfew, Restricted Areas'), ('9770', 'Exportation of War Materials'), ('9771', 'Anti-Apartheid Program'), ('9780', 'Trading with the Enemy Act'), ('9790', 'National Defense, Other'), ('9791', 'Subversive Activities Control Act'), ('9792', 'Defense Contractors'), ('9793', 'Armed Forces'), ('9810', 'Obscene Mail'), ('9820', 'Obscene Matter in Interstate Commerce'), ('9901', 'Civil Rights'), ('9902', 'Election Law Violators'), ('9903', 'Federal Statues-Public Officer/Employees'), ('9904', 'Federal Statute-U.S. Emblems/Insignias'), ('9905', 'Federal Statutes-Foreign Relations'), ('9906', 'Federal Statutes-Bank and Banking'), ('9907', 'Federal Statutes-Money and Finance'), ('9908', 'Federal Statutes-Public Health & Welfare'), ('9909', 'Federal Statute-Census'), ('9910', 'Communication Acts (Including Wire Tapping)'), ('9911', 'Wire Interception'), ('9912', 'Federal Statutes-Copyright Laws'), ('9914', 'Federal Statutes-Coast Guard'), ('9915', 'Federal Statutes-Commerce And Trade'), ('9916', 'Federal Statutes-Consumer Credit Protection'), ('9917', 'Federal Statutes-Consumer Product Safety'), ('9918', 'Federal Statues-Toxic Substance Control'), ('9919', 'Federal Statutes-Title 5'), ('9920', 'Federal Statutes-Conservation Acts'), ('9921', 'Contempt'), ('9922', 'Contempt, Congressional'), ('9923', 'Forfeiture - Criminal or Drug Related'), ('9926', 'Federal Statutes-Extort/Oppress under Law'), ('9928', 'Federal Statutes-Removal from State Court'), ('9929', 'Federal Statutes-Labor Laws'), ('9930', 'Federal Statutes-Minerals & Land Mining'), ('9931', 'Customs Laws (Except Narcotics & Liquor)'), ('9932', 'Customs Laws - Import Injurious Animals'), ('9935', 'Patents and Trademarks'), ('9936', 'Patriotic Societies And Observances'), ('9938', 'Veterans Benefits'), ('9940', 'Social Security'), ('9941', 'Connally Act/Hot Oil Act'), ('9942', 'Transport Convict-Made Goods Interstate'), ('9943', 'Railroad & Transportation Acts'), ('9944', 'Destruction of Property, Interstate Commerce'), ('9947', 'Telephones Telegraphs & Radios'), ('9949', 'Federal Statute-Transportation'), ('9950', 'War and National Defense, Other'), ('9951', 'Transportation of Strikebreakers'), ('9952', 'Taft Hartley Act'), ('9953', 'Eight Hour Day on Public Works'), ('9954', 'Peonage'), ('9956', 'Federal Statute, Phw'), ('9957', 'Terrorist Activity'), ('9960', 'Liquor (Except Internal Revenue)'), ('9971', 'Maritime & Shipping Laws'), ('9972', 'Stowaways'), ('9973', 'Federal Boat Safety Act of 1971'), ('9974', 'Federal Water Pollution Control Act'), ('9981', 'Postal, Non Mailable Material'), ('9982', 'Postal, Injury to Property'), ('9983', 'Postal, Obstructing the Mail'), ('9984', 'Postal, Violations By Postal Employees'), ('9989', 'Postal, Other'), ('9990', 'National Park/Recreation Violations'), ('9991', 'Destroying Federal Property'), ('9992', 'Intimidation of Witnesses, Jurors, etc.'), ('9993', 'Aircraft Regulations'), ('9994', 'Explosives (Except on Vessels)'), ('9995', 'Gold Acts'), ('9996', 'Train Wrecking'), ('9999', 'Federal Statutes, Other')], help_text='The four digit D2 offense code associated with the filing title/secion 1. These codes were created in FY2005 to replace the AO offense codes.', max_length=4)),
                ('version', models.IntegerField(blank=True, help_text='This field was created in FY 2012. It increments with each update received to a defendant record.', null=True)),
            ],
            options={
                'verbose_name_plural': 'FJC Integrated Database Entries',
            },
        ),
        migrations.CreateModel(
            name='PacerFetchQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('date_completed', models.DateTimeField(blank=True, db_index=True, help_text='When the item was completed or errored out.', null=True)),
                ('status', models.SmallIntegerField(choices=[(1, 'Awaiting processing in queue.'), (2, 'Item processed successfully.'), (3, 'Item encountered an error while processing.'), (4, 'Item is currently being processed.'), (5, 'Item failed processing, but will be retried.'), (6, 'Item failed validity tests.'), (7, 'There was insufficient metadata to complete the task.')], db_index=True, default=1, help_text='The current status of this request. Possible values are: (1): Awaiting processing in queue., (2): Item processed successfully., (3): Item encountered an error while processing., (4): Item is currently being processed., (5): Item failed processing, but will be retried., (6): Item failed validity tests., (7): There was insufficient metadata to complete the task.')),
                ('request_type', models.SmallIntegerField(choices=[(1, 'HTML Docket'), (2, 'PDF'), (3, 'Attachment Page')], help_text='The type of object that is requested')),
                ('message', models.TextField(blank=True, help_text='Any messages that may help a user during or after processing.')),
                ('pacer_case_id', models.CharField(blank=True, db_index=True, help_text='The case ID provided by PACER for the case to update (must be used in combination with the court field).', max_length=100)),
                ('docket_number', models.CharField(blank=True, help_text='The docket number of a case to update (must be used in combination with the court field).', max_length=50)),
                ('de_date_start', models.DateField(blank=True, help_text='Only fetch docket entries (de) newer than this date. Default is 1 Jan. 1960. Timezone appears to be that of the court.', null=True)),
                ('de_date_end', models.DateField(blank=True, help_text='Only fetch docket entries (de) older than or equal to this date. Timezone appears to be that of the court.', null=True)),
                ('de_number_start', models.IntegerField(blank=True, help_text='Only fetch docket entries (de) >= than this value. Warning: Using this parameter will not return numberless entries.', null=True)),
                ('de_number_end', models.IntegerField(blank=True, help_text='Only fetch docket entries (de) <= this value. Warning: Using this parameter will not return numberless entries.', null=True)),
                ('show_parties_and_counsel', models.BooleanField(default=True, help_text='Should we pull parties and counsel for a docket report?')),
                ('show_terminated_parties', models.BooleanField(default=True, help_text='Should we pull terminated parties and counsel as well?')),
                ('show_list_of_member_cases', models.BooleanField(default=False, help_text='Should we pull the list of member cases? This can add considerable expense to each docket.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PacerHtmlFiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('object_id', models.PositiveIntegerField()),
                ('filepath', models.FileField(help_text='The path of the original data from PACER.', max_length=150, storage=cl.lib.storage.UUIDFileSystemStorage(), upload_to=cl.recap.models.make_recap_data_path)),
                ('upload_type', models.SmallIntegerField(choices=[(1, 'HTML Docket'), (2, 'HTML attachment page'), (3, 'PDF'), (4, 'Docket history report'), (5, 'Appellate HTML docket'), (6, 'Appellate HTML attachment page'), (7, 'Internet Archive XML docket'), (8, 'Case report (iquery.pl) page'), (9, 'Claims register page'), (10, 'Zip archive of RECAP Documents')], help_text='The type of object that is uploaded')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessingQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, db_index=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('pacer_case_id', models.CharField(blank=True, db_index=True, help_text='The cased ID provided by PACER.', max_length=100)),
                ('pacer_doc_id', models.CharField(blank=True, db_index=True, help_text='The ID of the document in PACER.', max_length=32)),
                ('document_number', models.BigIntegerField(blank=True, help_text='The docket entry number for the document.', null=True)),
                ('attachment_number', models.SmallIntegerField(blank=True, help_text='If the file is an attachment, the number is the attachment number on the docket.', null=True)),
                ('filepath_local', models.FileField(help_text='The path of the uploaded file.', max_length=1000, storage=cl.lib.storage.UUIDFileSystemStorage(), upload_to=cl.recap.models.make_recap_processing_queue_path)),
                ('status', models.SmallIntegerField(choices=[(1, 'Awaiting processing in queue.'), (2, 'Item processed successfully.'), (3, 'Item encountered an error while processing.'), (4, 'Item is currently being processed.'), (5, 'Item failed processing, but will be retried.'), (6, 'Item failed validity tests.'), (7, 'There was insufficient metadata to complete the task.')], db_index=True, default=1, help_text='The current status of this upload. Possible values are: (1): Awaiting processing in queue., (2): Item processed successfully., (3): Item encountered an error while processing., (4): Item is currently being processed., (5): Item failed processing, but will be retried., (6): Item failed validity tests., (7): There was insufficient metadata to complete the task.')),
                ('upload_type', models.SmallIntegerField(choices=[(1, 'HTML Docket'), (2, 'HTML attachment page'), (3, 'PDF'), (4, 'Docket history report'), (5, 'Appellate HTML docket'), (6, 'Appellate HTML attachment page'), (7, 'Internet Archive XML docket'), (8, 'Case report (iquery.pl) page'), (9, 'Claims register page'), (10, 'Zip archive of RECAP Documents')], help_text='The type of object that is uploaded')),
                ('error_message', models.TextField(blank=True, help_text='Any errors that occurred while processing an item')),
                ('debug', models.BooleanField(default=False, help_text='Are you debugging? Debugging uploads will be validated, but not saved to the database.')),
            ],
            options={
                'permissions': (('has_recap_upload_access', 'Can upload documents to RECAP.'),),
            },
        ),
    ]
