# Generated by Django 5.1.5 on 2025-03-24 01:40

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("users", "0015_pghistory_v3_4_0_trigger_update"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="userprofile",
            name="update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="userprofile",
            name="delete_delete",
        ),
        migrations.AddField(
            model_name="userprofile",
            name="prayers_public",
            field=models.BooleanField(
                default=False,
                help_text="If enabled, the user's pending document prayers will be viewable by the public",
            ),
        ),
        migrations.AddField(
            model_name="userprofileevent",
            name="prayers_public",
            field=models.BooleanField(
                default=False,
                help_text="If enabled, the user's pending document prayers will be viewable by the public",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "users_userprofileevent" ("activation_key", "address1", "address2", "auto_subscribe", "avatar", "city", "docket_default_order_desc", "email_confirmed", "employer", "id", "is_tester", "key_expires", "neon_account_id", "notes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plaintext_preferred", "prayers_public", "recap_email", "state", "stub_account", "unlimited_docket_alerts", "user_id", "zip_code") VALUES (OLD."activation_key", OLD."address1", OLD."address2", OLD."auto_subscribe", OLD."avatar", OLD."city", OLD."docket_default_order_desc", OLD."email_confirmed", OLD."employer", OLD."id", OLD."is_tester", OLD."key_expires", OLD."neon_account_id", OLD."notes", _pgh_attach_context(), NOW(), \'update\', OLD."id", OLD."plaintext_preferred", OLD."prayers_public", OLD."recap_email", OLD."state", OLD."stub_account", OLD."unlimited_docket_alerts", OLD."user_id", OLD."zip_code"); RETURN NULL;',
                    hash="a4ed620e5ada336bca6ebb2a5b1d653b98c5a7d4",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_52a36",
                    table="users_userprofile",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userprofile",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "users_userprofileevent" ("activation_key", "address1", "address2", "auto_subscribe", "avatar", "city", "docket_default_order_desc", "email_confirmed", "employer", "id", "is_tester", "key_expires", "neon_account_id", "notes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plaintext_preferred", "prayers_public", "recap_email", "state", "stub_account", "unlimited_docket_alerts", "user_id", "zip_code") VALUES (OLD."activation_key", OLD."address1", OLD."address2", OLD."auto_subscribe", OLD."avatar", OLD."city", OLD."docket_default_order_desc", OLD."email_confirmed", OLD."employer", OLD."id", OLD."is_tester", OLD."key_expires", OLD."neon_account_id", OLD."notes", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."plaintext_preferred", OLD."prayers_public", OLD."recap_email", OLD."state", OLD."stub_account", OLD."unlimited_docket_alerts", OLD."user_id", OLD."zip_code"); RETURN NULL;',
                    hash="fdcbea73f61a5c6966473f6583e0ae006f932117",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_4530f",
                    table="users_userprofile",
                    when="AFTER",
                ),
            ),
        ),
    ]
