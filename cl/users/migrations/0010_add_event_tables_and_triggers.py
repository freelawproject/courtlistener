# Generated by Django 3.2.16 on 2023-01-27 19:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('pghistory', '0005_events_middlewareevents'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('users', '0009_backoff_event_add_checked'),
    ]

    operations = [
        migrations.CreateModel(
            name='GroupPermissionsEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupProxyEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('name', models.CharField(max_length=150, verbose_name='name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PermissionProxyEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('codename', models.CharField(max_length=100, verbose_name='codename')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserGroupsEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPermissionsEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfileBarMembershipEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfileEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('stub_account', models.BooleanField(default=False)),
                ('employer', models.CharField(blank=True, help_text="the user's employer", max_length=100, null=True)),
                ('address1', models.CharField(blank=True, max_length=100, null=True)),
                ('address2', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=10, null=True)),
                ('avatar', models.ImageField(blank=True, help_text="the user's avatar", upload_to='avatars/%Y/%m/%d')),
                ('wants_newsletter', models.BooleanField(default=False, help_text='This user wants newsletters')),
                ('unlimited_docket_alerts', models.BooleanField(default=False, help_text='Should the user get unlimited docket alerts?')),
                ('plaintext_preferred', models.BooleanField(default=False, help_text='should the alert should be sent in plaintext')),
                ('activation_key', models.CharField(max_length=40)),
                ('key_expires', models.DateTimeField(blank=True, help_text="The time and date when the user's activation_key expires", null=True)),
                ('email_confirmed', models.BooleanField(default=False, help_text='The user has confirmed their email address')),
                ('notes', models.TextField(blank=True, help_text='Any notes about the user.')),
                ('is_tester', models.BooleanField(default=False, help_text='The user tests new features before they are finished')),
                ('recap_email', models.EmailField(blank=True, help_text='Generated recap email address for the user.', max_length=254)),
                ('auto_subscribe', models.BooleanField(default=True, help_text="If enabled, for every new case that comes in from the user's recap.email address, a new docket subscription for the case will be created; if disabled we'll ask users if they want to subscribe to the case.")),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProxyEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupPermissions',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.group_permissions',),
        ),
        migrations.CreateModel(
            name='GroupProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='PermissionProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.permission',),
            managers=[
                ('objects', django.contrib.auth.models.PermissionManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserGroups',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user_groups',),
        ),
        migrations.CreateModel(
            name='UserPermissions',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user_user_permissions',),
        ),
        migrations.CreateModel(
            name='UserProfileBarMembership',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.userprofile_barmembership',),
        ),
        migrations.CreateModel(
            name='UserProxy',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userprofile',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_userprofileevent" ("activation_key", "address1", "address2", "auto_subscribe", "avatar", "city", "email_confirmed", "employer", "id", "is_tester", "key_expires", "notes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plaintext_preferred", "recap_email", "state", "stub_account", "unlimited_docket_alerts", "user_id", "wants_newsletter", "zip_code") VALUES (NEW."activation_key", NEW."address1", NEW."address2", NEW."auto_subscribe", NEW."avatar", NEW."city", NEW."email_confirmed", NEW."employer", NEW."id", NEW."is_tester", NEW."key_expires", NEW."notes", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."plaintext_preferred", NEW."recap_email", NEW."state", NEW."stub_account", NEW."unlimited_docket_alerts", NEW."user_id", NEW."wants_newsletter", NEW."zip_code"); RETURN NULL;', hash='aa341719534a80b6c9f390387615a65236106919', operation='INSERT', pgid='pgtrigger_snapshot_insert_31610', table='users_userprofile', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userprofile',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_userprofileevent" ("activation_key", "address1", "address2", "auto_subscribe", "avatar", "city", "email_confirmed", "employer", "id", "is_tester", "key_expires", "notes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plaintext_preferred", "recap_email", "state", "stub_account", "unlimited_docket_alerts", "user_id", "wants_newsletter", "zip_code") VALUES (NEW."activation_key", NEW."address1", NEW."address2", NEW."auto_subscribe", NEW."avatar", NEW."city", NEW."email_confirmed", NEW."employer", NEW."id", NEW."is_tester", NEW."key_expires", NEW."notes", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."plaintext_preferred", NEW."recap_email", NEW."state", NEW."stub_account", NEW."unlimited_docket_alerts", NEW."user_id", NEW."wants_newsletter", NEW."zip_code"); RETURN NULL;', hash='5a100c4fbaec17c304654aaeca224fdd740ead43', operation='UPDATE', pgid='pgtrigger_snapshot_update_74231', table='users_userprofile', when='AFTER')),
        ),
        migrations.AddField(
            model_name='userproxyevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='userproxyevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='users.userproxy'),
        ),
        migrations.AddField(
            model_name='userprofileevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='userprofileevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='users.userprofile'),
        ),
        migrations.AddField(
            model_name='userprofileevent',
            name='user',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='the user this model extends'),
        ),
        migrations.AddField(
            model_name='userprofilebarmembershipevent',
            name='barmembership',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='users.barmembership'),
        ),
        migrations.AddField(
            model_name='userprofilebarmembershipevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='userprofilebarmembershipevent',
            name='userprofile',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='users.userprofile'),
        ),
        migrations.AddField(
            model_name='userpermissionsevent',
            name='permission',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='auth.permission'),
        ),
        migrations.AddField(
            model_name='userpermissionsevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='userpermissionsevent',
            name='user',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usergroupsevent',
            name='group',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='auth.group'),
        ),
        migrations.AddField(
            model_name='usergroupsevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='usergroupsevent',
            name='user',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='permissionproxyevent',
            name='content_type',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='contenttypes.contenttype', verbose_name='content type'),
        ),
        migrations.AddField(
            model_name='permissionproxyevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='permissionproxyevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='users.permissionproxy'),
        ),
        migrations.AddField(
            model_name='groupproxyevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='groupproxyevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='users.groupproxy'),
        ),
        migrations.AddField(
            model_name='grouppermissionsevent',
            name='group',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='auth.group'),
        ),
        migrations.AddField(
            model_name='grouppermissionsevent',
            name='permission',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='auth.permission'),
        ),
        migrations.AddField(
            model_name='grouppermissionsevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='grouppermissions',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_grouppermissionsevent" ("group_id", "id", "permission_id", "pgh_context_id", "pgh_created_at", "pgh_label") VALUES (NEW."group_id", NEW."id", NEW."permission_id", _pgh_attach_context(), NOW(), \'snapshot\'); RETURN NULL;', hash='190fc4d33be33806907c415607dd61c4aa035efb', operation='INSERT', pgid='pgtrigger_snapshot_insert_47043', table='auth_group_permissions', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='grouppermissions',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_grouppermissionsevent" ("group_id", "id", "permission_id", "pgh_context_id", "pgh_created_at", "pgh_label") VALUES (NEW."group_id", NEW."id", NEW."permission_id", _pgh_attach_context(), NOW(), \'snapshot\'); RETURN NULL;', hash='76526fcb4e1e199175ecfc8b75cda40c2d740a12', operation='UPDATE', pgid='pgtrigger_snapshot_update_8e426', table='auth_group_permissions', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='groupproxy',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_groupproxyevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='ad0c3757ff07badb1e01dc4d277b1072b4b2537c', operation='INSERT', pgid='pgtrigger_snapshot_insert_0bb2c', table='auth_group', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='groupproxy',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_groupproxyevent" ("id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='2719a239ac1a52026c65d804131c59ed0f3417b6', operation='UPDATE', pgid='pgtrigger_snapshot_update_1e0d3', table='auth_group', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='permissionproxy',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_permissionproxyevent" ("codename", "content_type_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."codename", NEW."content_type_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='ce59d3bcfa5af69fa46bf960f1bb31d8cf32dfed', operation='INSERT', pgid='pgtrigger_snapshot_insert_c294b', table='auth_permission', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='permissionproxy',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_permissionproxyevent" ("codename", "content_type_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id") VALUES (NEW."codename", NEW."content_type_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id"); RETURN NULL;', hash='c10177884052b7fc204de8efe6d380da632dd530', operation='UPDATE', pgid='pgtrigger_snapshot_update_8f943', table='auth_permission', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='usergroups',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_usergroupsevent" ("group_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "user_id") VALUES (NEW."group_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."user_id"); RETURN NULL;', hash='07f96f95d10ebed7e9e1997396c923e1de1fa62c', operation='INSERT', pgid='pgtrigger_snapshot_insert_cb58e', table='auth_user_groups', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='usergroups',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_usergroupsevent" ("group_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "user_id") VALUES (NEW."group_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."user_id"); RETURN NULL;', hash='f63dc20f489b3da60b0b4fd7375f7dc75acbb328', operation='UPDATE', pgid='pgtrigger_snapshot_update_591a4', table='auth_user_groups', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userpermissions',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_userpermissionsevent" ("id", "permission_id", "pgh_context_id", "pgh_created_at", "pgh_label", "user_id") VALUES (NEW."id", NEW."permission_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."user_id"); RETURN NULL;', hash='64d04f34bf969cb0915906dd0745633c03247e7e', operation='INSERT', pgid='pgtrigger_snapshot_insert_46522', table='auth_user_user_permissions', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userpermissions',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_userpermissionsevent" ("id", "permission_id", "pgh_context_id", "pgh_created_at", "pgh_label", "user_id") VALUES (NEW."id", NEW."permission_id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."user_id"); RETURN NULL;', hash='b311129b652886b174cd1dbbd9f3347a49cad778', operation='UPDATE', pgid='pgtrigger_snapshot_update_80307', table='auth_user_user_permissions', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userprofilebarmembership',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_userprofilebarmembershipevent" ("barmembership_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "userprofile_id") VALUES (NEW."barmembership_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."userprofile_id"); RETURN NULL;', hash='2af83be1b83550629a688c44113e1c0430d8ef8e', operation='INSERT', pgid='pgtrigger_snapshot_insert_de1c8', table='users_userprofile_barmembership', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userprofilebarmembership',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_userprofilebarmembershipevent" ("barmembership_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "userprofile_id") VALUES (NEW."barmembership_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."userprofile_id"); RETURN NULL;', hash='dfa53db455704cc58ca39636c262a174fe876878', operation='UPDATE', pgid='pgtrigger_snapshot_update_cb3f2', table='users_userprofile_barmembership', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userproxy',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_userproxyevent" ("date_joined", "email", "first_name", "id", "is_active", "is_staff", "is_superuser", "last_login", "last_name", "password", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "username") VALUES (NEW."date_joined", NEW."email", NEW."first_name", NEW."id", NEW."is_active", NEW."is_staff", NEW."is_superuser", NEW."last_login", NEW."last_name", NEW."password", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."username"); RETURN NULL;', hash='c66c0d34ec5bfdb1c02556c8d346afb57abe0e9b', operation='INSERT', pgid='pgtrigger_snapshot_insert_70025', table='auth_user', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userproxy',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_userproxyevent" ("date_joined", "email", "first_name", "id", "is_active", "is_staff", "is_superuser", "last_login", "last_name", "password", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "username") VALUES (NEW."date_joined", NEW."email", NEW."first_name", NEW."id", NEW."is_active", NEW."is_staff", NEW."is_superuser", NEW."last_login", NEW."last_name", NEW."password", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."username"); RETURN NULL;', hash='d90516903b3ce015d76bb46097f69a802f0f7666', operation='UPDATE', pgid='pgtrigger_snapshot_update_b6e18', table='auth_user', when='AFTER')),
        ),
    ]
