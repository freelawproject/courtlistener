# Generated by Django 3.2.16 on 2023-01-25 23:29

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0005_events_middlewareevents'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0009_backoff_event_add_checked'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfileBarMembershipEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfileEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('stub_account', models.BooleanField(default=False)),
                ('employer', models.CharField(blank=True, help_text="the user's employer", max_length=100, null=True)),
                ('address1', models.CharField(blank=True, max_length=100, null=True)),
                ('address2', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, max_length=2, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=10, null=True)),
                ('avatar', models.ImageField(blank=True, help_text="the user's avatar", upload_to='avatars/%Y/%m/%d')),
                ('wants_newsletter', models.BooleanField(default=False, help_text='This user wants newsletters')),
                ('unlimited_docket_alerts', models.BooleanField(default=False, help_text='Should the user get unlimited docket alerts?')),
                ('plaintext_preferred', models.BooleanField(default=False, help_text='should the alert should be sent in plaintext')),
                ('activation_key', models.CharField(max_length=40)),
                ('key_expires', models.DateTimeField(blank=True, help_text="The time and date when the user's activation_key expires", null=True)),
                ('email_confirmed', models.BooleanField(default=False, help_text='The user has confirmed their email address')),
                ('notes', models.TextField(blank=True, help_text='Any notes about the user.')),
                ('is_tester', models.BooleanField(default=False, help_text='The user tests new features before they are finished')),
                ('recap_email', models.EmailField(blank=True, help_text='Generated recap email address for the user.', max_length=254)),
                ('auto_subscribe', models.BooleanField(default=True, help_text="If enabled, for every new case that comes in from the user's recap.email address, a new docket subscription for the case will be created; if disabled we'll ask users if they want to subscribe to the case.")),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfileBarMembership',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.userprofile_barmembership',),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userprofile',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_userprofileevent" ("activation_key", "address1", "address2", "auto_subscribe", "avatar", "city", "email_confirmed", "employer", "id", "is_tester", "key_expires", "notes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plaintext_preferred", "recap_email", "state", "stub_account", "unlimited_docket_alerts", "user_id", "wants_newsletter", "zip_code") VALUES (NEW."activation_key", NEW."address1", NEW."address2", NEW."auto_subscribe", NEW."avatar", NEW."city", NEW."email_confirmed", NEW."employer", NEW."id", NEW."is_tester", NEW."key_expires", NEW."notes", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."plaintext_preferred", NEW."recap_email", NEW."state", NEW."stub_account", NEW."unlimited_docket_alerts", NEW."user_id", NEW."wants_newsletter", NEW."zip_code"); RETURN NULL;', hash='aa341719534a80b6c9f390387615a65236106919', operation='INSERT', pgid='pgtrigger_snapshot_insert_31610', table='users_userprofile', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userprofile',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_userprofileevent" ("activation_key", "address1", "address2", "auto_subscribe", "avatar", "city", "email_confirmed", "employer", "id", "is_tester", "key_expires", "notes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "plaintext_preferred", "recap_email", "state", "stub_account", "unlimited_docket_alerts", "user_id", "wants_newsletter", "zip_code") VALUES (NEW."activation_key", NEW."address1", NEW."address2", NEW."auto_subscribe", NEW."avatar", NEW."city", NEW."email_confirmed", NEW."employer", NEW."id", NEW."is_tester", NEW."key_expires", NEW."notes", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."plaintext_preferred", NEW."recap_email", NEW."state", NEW."stub_account", NEW."unlimited_docket_alerts", NEW."user_id", NEW."wants_newsletter", NEW."zip_code"); RETURN NULL;', hash='5a100c4fbaec17c304654aaeca224fdd740ead43', operation='UPDATE', pgid='pgtrigger_snapshot_update_74231', table='users_userprofile', when='AFTER')),
        ),
        migrations.AddField(
            model_name='userprofileevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='userprofileevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='users.userprofile'),
        ),
        migrations.AddField(
            model_name='userprofileevent',
            name='user',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL, verbose_name='the user this model extends'),
        ),
        migrations.AddField(
            model_name='userprofilebarmembershipevent',
            name='barmembership',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='users.barmembership'),
        ),
        migrations.AddField(
            model_name='userprofilebarmembershipevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='userprofilebarmembershipevent',
            name='userprofile',
            field=models.ForeignKey(db_constraint=False, db_tablespace='', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='users.userprofile'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userprofilebarmembership',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "users_userprofilebarmembershipevent" ("barmembership_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "userprofile_id") VALUES (NEW."barmembership_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."userprofile_id"); RETURN NULL;', hash='2af83be1b83550629a688c44113e1c0430d8ef8e', operation='INSERT', pgid='pgtrigger_snapshot_insert_de1c8', table='users_userprofile_barmembership', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='userprofilebarmembership',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "users_userprofilebarmembershipevent" ("barmembership_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "userprofile_id") VALUES (NEW."barmembership_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."userprofile_id"); RETURN NULL;', hash='dfa53db455704cc58ca39636c262a174fe876878', operation='UPDATE', pgid='pgtrigger_snapshot_update_cb3f2', table='users_userprofile_barmembership', when='AFTER')),
        ),
    ]
